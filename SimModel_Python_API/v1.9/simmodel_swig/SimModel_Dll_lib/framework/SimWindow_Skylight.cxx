// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimWindow_Skylight.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimWindow_Skylight
      // 

      const SimWindow_Skylight::SimWindow_Name_optional& SimWindow_Skylight::
      SimWindow_Name () const
      {
        return this->SimWindow_Name_;
      }

      SimWindow_Skylight::SimWindow_Name_optional& SimWindow_Skylight::
      SimWindow_Name ()
      {
        return this->SimWindow_Name_;
      }

      void SimWindow_Skylight::
      SimWindow_Name (const SimWindow_Name_type& x)
      {
        this->SimWindow_Name_.set (x);
      }

      void SimWindow_Skylight::
      SimWindow_Name (const SimWindow_Name_optional& x)
      {
        this->SimWindow_Name_ = x;
      }

      void SimWindow_Skylight::
      SimWindow_Name (::std::auto_ptr< SimWindow_Name_type > x)
      {
        this->SimWindow_Name_.set (x);
      }

      const SimWindow_Skylight::SimWindow_ConstructionName_optional& SimWindow_Skylight::
      SimWindow_ConstructionName () const
      {
        return this->SimWindow_ConstructionName_;
      }

      SimWindow_Skylight::SimWindow_ConstructionName_optional& SimWindow_Skylight::
      SimWindow_ConstructionName ()
      {
        return this->SimWindow_ConstructionName_;
      }

      void SimWindow_Skylight::
      SimWindow_ConstructionName (const SimWindow_ConstructionName_type& x)
      {
        this->SimWindow_ConstructionName_.set (x);
      }

      void SimWindow_Skylight::
      SimWindow_ConstructionName (const SimWindow_ConstructionName_optional& x)
      {
        this->SimWindow_ConstructionName_ = x;
      }

      void SimWindow_Skylight::
      SimWindow_ConstructionName (::std::auto_ptr< SimWindow_ConstructionName_type > x)
      {
        this->SimWindow_ConstructionName_.set (x);
      }

      const SimWindow_Skylight::SimWindow_BldgSurfName_optional& SimWindow_Skylight::
      SimWindow_BldgSurfName () const
      {
        return this->SimWindow_BldgSurfName_;
      }

      SimWindow_Skylight::SimWindow_BldgSurfName_optional& SimWindow_Skylight::
      SimWindow_BldgSurfName ()
      {
        return this->SimWindow_BldgSurfName_;
      }

      void SimWindow_Skylight::
      SimWindow_BldgSurfName (const SimWindow_BldgSurfName_type& x)
      {
        this->SimWindow_BldgSurfName_.set (x);
      }

      void SimWindow_Skylight::
      SimWindow_BldgSurfName (const SimWindow_BldgSurfName_optional& x)
      {
        this->SimWindow_BldgSurfName_ = x;
      }

      void SimWindow_Skylight::
      SimWindow_BldgSurfName (::std::auto_ptr< SimWindow_BldgSurfName_type > x)
      {
        this->SimWindow_BldgSurfName_.set (x);
      }

      const SimWindow_Skylight::SimWindow_ShadingContName_optional& SimWindow_Skylight::
      SimWindow_ShadingContName () const
      {
        return this->SimWindow_ShadingContName_;
      }

      SimWindow_Skylight::SimWindow_ShadingContName_optional& SimWindow_Skylight::
      SimWindow_ShadingContName ()
      {
        return this->SimWindow_ShadingContName_;
      }

      void SimWindow_Skylight::
      SimWindow_ShadingContName (const SimWindow_ShadingContName_type& x)
      {
        this->SimWindow_ShadingContName_.set (x);
      }

      void SimWindow_Skylight::
      SimWindow_ShadingContName (const SimWindow_ShadingContName_optional& x)
      {
        this->SimWindow_ShadingContName_ = x;
      }

      void SimWindow_Skylight::
      SimWindow_ShadingContName (::std::auto_ptr< SimWindow_ShadingContName_type > x)
      {
        this->SimWindow_ShadingContName_.set (x);
      }

      const SimWindow_Skylight::SimWindow_FrmAndDivName_optional& SimWindow_Skylight::
      SimWindow_FrmAndDivName () const
      {
        return this->SimWindow_FrmAndDivName_;
      }

      SimWindow_Skylight::SimWindow_FrmAndDivName_optional& SimWindow_Skylight::
      SimWindow_FrmAndDivName ()
      {
        return this->SimWindow_FrmAndDivName_;
      }

      void SimWindow_Skylight::
      SimWindow_FrmAndDivName (const SimWindow_FrmAndDivName_type& x)
      {
        this->SimWindow_FrmAndDivName_.set (x);
      }

      void SimWindow_Skylight::
      SimWindow_FrmAndDivName (const SimWindow_FrmAndDivName_optional& x)
      {
        this->SimWindow_FrmAndDivName_ = x;
      }

      void SimWindow_Skylight::
      SimWindow_FrmAndDivName (::std::auto_ptr< SimWindow_FrmAndDivName_type > x)
      {
        this->SimWindow_FrmAndDivName_.set (x);
      }

      const SimWindow_Skylight::SimWindow_Mult_optional& SimWindow_Skylight::
      SimWindow_Mult () const
      {
        return this->SimWindow_Mult_;
      }

      SimWindow_Skylight::SimWindow_Mult_optional& SimWindow_Skylight::
      SimWindow_Mult ()
      {
        return this->SimWindow_Mult_;
      }

      void SimWindow_Skylight::
      SimWindow_Mult (const SimWindow_Mult_type& x)
      {
        this->SimWindow_Mult_.set (x);
      }

      void SimWindow_Skylight::
      SimWindow_Mult (const SimWindow_Mult_optional& x)
      {
        this->SimWindow_Mult_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimWindow_Skylight
      //

      SimWindow_Skylight::
      SimWindow_Skylight ()
      : ::schema::simxml::BuildingModel::SimWindow (),
        SimWindow_Name_ (this),
        SimWindow_ConstructionName_ (this),
        SimWindow_BldgSurfName_ (this),
        SimWindow_ShadingContName_ (this),
        SimWindow_FrmAndDivName_ (this),
        SimWindow_Mult_ (this)
      {
      }

      SimWindow_Skylight::
      SimWindow_Skylight (const RefId_type& RefId)
      : ::schema::simxml::BuildingModel::SimWindow (RefId),
        SimWindow_Name_ (this),
        SimWindow_ConstructionName_ (this),
        SimWindow_BldgSurfName_ (this),
        SimWindow_ShadingContName_ (this),
        SimWindow_FrmAndDivName_ (this),
        SimWindow_Mult_ (this)
      {
      }

      SimWindow_Skylight::
      SimWindow_Skylight (const SimWindow_Skylight& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimWindow (x, f, c),
        SimWindow_Name_ (x.SimWindow_Name_, f, this),
        SimWindow_ConstructionName_ (x.SimWindow_ConstructionName_, f, this),
        SimWindow_BldgSurfName_ (x.SimWindow_BldgSurfName_, f, this),
        SimWindow_ShadingContName_ (x.SimWindow_ShadingContName_, f, this),
        SimWindow_FrmAndDivName_ (x.SimWindow_FrmAndDivName_, f, this),
        SimWindow_Mult_ (x.SimWindow_Mult_, f, this)
      {
      }

      SimWindow_Skylight::
      SimWindow_Skylight (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimWindow (e, f | ::xml_schema::flags::base, c),
        SimWindow_Name_ (this),
        SimWindow_ConstructionName_ (this),
        SimWindow_BldgSurfName_ (this),
        SimWindow_ShadingContName_ (this),
        SimWindow_FrmAndDivName_ (this),
        SimWindow_Mult_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimWindow_Skylight::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::BuildingModel::SimWindow::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimWindow_Name
          //
          if (n.name () == "SimWindow_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_Name_type > r (
              SimWindow_Name_traits::create (i, f, this));

            if (!this->SimWindow_Name_)
            {
              this->SimWindow_Name_.set (r);
              continue;
            }
          }

          // SimWindow_ConstructionName
          //
          if (n.name () == "SimWindow_ConstructionName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_ConstructionName_type > r (
              SimWindow_ConstructionName_traits::create (i, f, this));

            if (!this->SimWindow_ConstructionName_)
            {
              this->SimWindow_ConstructionName_.set (r);
              continue;
            }
          }

          // SimWindow_BldgSurfName
          //
          if (n.name () == "SimWindow_BldgSurfName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_BldgSurfName_type > r (
              SimWindow_BldgSurfName_traits::create (i, f, this));

            if (!this->SimWindow_BldgSurfName_)
            {
              this->SimWindow_BldgSurfName_.set (r);
              continue;
            }
          }

          // SimWindow_ShadingContName
          //
          if (n.name () == "SimWindow_ShadingContName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_ShadingContName_type > r (
              SimWindow_ShadingContName_traits::create (i, f, this));

            if (!this->SimWindow_ShadingContName_)
            {
              this->SimWindow_ShadingContName_.set (r);
              continue;
            }
          }

          // SimWindow_FrmAndDivName
          //
          if (n.name () == "SimWindow_FrmAndDivName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_FrmAndDivName_type > r (
              SimWindow_FrmAndDivName_traits::create (i, f, this));

            if (!this->SimWindow_FrmAndDivName_)
            {
              this->SimWindow_FrmAndDivName_.set (r);
              continue;
            }
          }

          // SimWindow_Mult
          //
          if (n.name () == "SimWindow_Mult" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimWindow_Mult_)
            {
              this->SimWindow_Mult_.set (SimWindow_Mult_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimWindow_Skylight* SimWindow_Skylight::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimWindow_Skylight (*this, f, c);
      }

      SimWindow_Skylight& SimWindow_Skylight::
      operator= (const SimWindow_Skylight& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::BuildingModel::SimWindow& > (*this) = x;
          this->SimWindow_Name_ = x.SimWindow_Name_;
          this->SimWindow_ConstructionName_ = x.SimWindow_ConstructionName_;
          this->SimWindow_BldgSurfName_ = x.SimWindow_BldgSurfName_;
          this->SimWindow_ShadingContName_ = x.SimWindow_ShadingContName_;
          this->SimWindow_FrmAndDivName_ = x.SimWindow_FrmAndDivName_;
          this->SimWindow_Mult_ = x.SimWindow_Mult_;
        }

        return *this;
      }

      SimWindow_Skylight::
      ~SimWindow_Skylight ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

