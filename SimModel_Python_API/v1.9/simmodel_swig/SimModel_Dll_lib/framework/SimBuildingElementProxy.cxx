// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimBuildingElementProxy.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimBuildingElementProxy
      // 

      const SimBuildingElementProxy::Name_optional& SimBuildingElementProxy::
      Name () const
      {
        return this->Name_;
      }

      SimBuildingElementProxy::Name_optional& SimBuildingElementProxy::
      Name ()
      {
        return this->Name_;
      }

      void SimBuildingElementProxy::
      Name (const Name_type& x)
      {
        this->Name_.set (x);
      }

      void SimBuildingElementProxy::
      Name (const Name_optional& x)
      {
        this->Name_ = x;
      }

      void SimBuildingElementProxy::
      Name (::std::auto_ptr< Name_type > x)
      {
        this->Name_.set (x);
      }

      const SimBuildingElementProxy::Representation_optional& SimBuildingElementProxy::
      Representation () const
      {
        return this->Representation_;
      }

      SimBuildingElementProxy::Representation_optional& SimBuildingElementProxy::
      Representation ()
      {
        return this->Representation_;
      }

      void SimBuildingElementProxy::
      Representation (const Representation_type& x)
      {
        this->Representation_.set (x);
      }

      void SimBuildingElementProxy::
      Representation (const Representation_optional& x)
      {
        this->Representation_ = x;
      }

      void SimBuildingElementProxy::
      Representation (::std::auto_ptr< Representation_type > x)
      {
        this->Representation_.set (x);
      }

      const SimBuildingElementProxy::CompositionType_optional& SimBuildingElementProxy::
      CompositionType () const
      {
        return this->CompositionType_;
      }

      SimBuildingElementProxy::CompositionType_optional& SimBuildingElementProxy::
      CompositionType ()
      {
        return this->CompositionType_;
      }

      void SimBuildingElementProxy::
      CompositionType (const CompositionType_type& x)
      {
        this->CompositionType_.set (x);
      }

      void SimBuildingElementProxy::
      CompositionType (const CompositionType_optional& x)
      {
        this->CompositionType_ = x;
      }

      void SimBuildingElementProxy::
      CompositionType (::std::auto_ptr< CompositionType_type > x)
      {
        this->CompositionType_.set (x);
      }

      const SimBuildingElementProxy::AHUHeight_optional& SimBuildingElementProxy::
      AHUHeight () const
      {
        return this->AHUHeight_;
      }

      SimBuildingElementProxy::AHUHeight_optional& SimBuildingElementProxy::
      AHUHeight ()
      {
        return this->AHUHeight_;
      }

      void SimBuildingElementProxy::
      AHUHeight (const AHUHeight_type& x)
      {
        this->AHUHeight_.set (x);
      }

      void SimBuildingElementProxy::
      AHUHeight (const AHUHeight_optional& x)
      {
        this->AHUHeight_ = x;
      }

      const SimBuildingElementProxy::AHUWidth_optional& SimBuildingElementProxy::
      AHUWidth () const
      {
        return this->AHUWidth_;
      }

      SimBuildingElementProxy::AHUWidth_optional& SimBuildingElementProxy::
      AHUWidth ()
      {
        return this->AHUWidth_;
      }

      void SimBuildingElementProxy::
      AHUWidth (const AHUWidth_type& x)
      {
        this->AHUWidth_.set (x);
      }

      void SimBuildingElementProxy::
      AHUWidth (const AHUWidth_optional& x)
      {
        this->AHUWidth_ = x;
      }

      const SimBuildingElementProxy::AirFlow_optional& SimBuildingElementProxy::
      AirFlow () const
      {
        return this->AirFlow_;
      }

      SimBuildingElementProxy::AirFlow_optional& SimBuildingElementProxy::
      AirFlow ()
      {
        return this->AirFlow_;
      }

      void SimBuildingElementProxy::
      AirFlow (const AirFlow_type& x)
      {
        this->AirFlow_.set (x);
      }

      void SimBuildingElementProxy::
      AirFlow (const AirFlow_optional& x)
      {
        this->AirFlow_ = x;
      }

      const SimBuildingElementProxy::AirflowReturn_optional& SimBuildingElementProxy::
      AirflowReturn () const
      {
        return this->AirflowReturn_;
      }

      SimBuildingElementProxy::AirflowReturn_optional& SimBuildingElementProxy::
      AirflowReturn ()
      {
        return this->AirflowReturn_;
      }

      void SimBuildingElementProxy::
      AirflowReturn (const AirflowReturn_type& x)
      {
        this->AirflowReturn_.set (x);
      }

      void SimBuildingElementProxy::
      AirflowReturn (const AirflowReturn_optional& x)
      {
        this->AirflowReturn_ = x;
      }

      const SimBuildingElementProxy::AirflowSupply_optional& SimBuildingElementProxy::
      AirflowSupply () const
      {
        return this->AirflowSupply_;
      }

      SimBuildingElementProxy::AirflowSupply_optional& SimBuildingElementProxy::
      AirflowSupply ()
      {
        return this->AirflowSupply_;
      }

      void SimBuildingElementProxy::
      AirflowSupply (const AirflowSupply_type& x)
      {
        this->AirflowSupply_.set (x);
      }

      void SimBuildingElementProxy::
      AirflowSupply (const AirflowSupply_optional& x)
      {
        this->AirflowSupply_ = x;
      }

      const SimBuildingElementProxy::AirPressure_optional& SimBuildingElementProxy::
      AirPressure () const
      {
        return this->AirPressure_;
      }

      SimBuildingElementProxy::AirPressure_optional& SimBuildingElementProxy::
      AirPressure ()
      {
        return this->AirPressure_;
      }

      void SimBuildingElementProxy::
      AirPressure (const AirPressure_type& x)
      {
        this->AirPressure_.set (x);
      }

      void SimBuildingElementProxy::
      AirPressure (const AirPressure_optional& x)
      {
        this->AirPressure_ = x;
      }

      const SimBuildingElementProxy::AirwayLength_optional& SimBuildingElementProxy::
      AirwayLength () const
      {
        return this->AirwayLength_;
      }

      SimBuildingElementProxy::AirwayLength_optional& SimBuildingElementProxy::
      AirwayLength ()
      {
        return this->AirwayLength_;
      }

      void SimBuildingElementProxy::
      AirwayLength (const AirwayLength_type& x)
      {
        this->AirwayLength_.set (x);
      }

      void SimBuildingElementProxy::
      AirwayLength (const AirwayLength_optional& x)
      {
        this->AirwayLength_ = x;
      }

      const SimBuildingElementProxy::AlternatorVoltage_optional& SimBuildingElementProxy::
      AlternatorVoltage () const
      {
        return this->AlternatorVoltage_;
      }

      SimBuildingElementProxy::AlternatorVoltage_optional& SimBuildingElementProxy::
      AlternatorVoltage ()
      {
        return this->AlternatorVoltage_;
      }

      void SimBuildingElementProxy::
      AlternatorVoltage (const AlternatorVoltage_type& x)
      {
        this->AlternatorVoltage_.set (x);
      }

      void SimBuildingElementProxy::
      AlternatorVoltage (const AlternatorVoltage_optional& x)
      {
        this->AlternatorVoltage_ = x;
      }

      const SimBuildingElementProxy::Ang_optional& SimBuildingElementProxy::
      Ang () const
      {
        return this->Ang_;
      }

      SimBuildingElementProxy::Ang_optional& SimBuildingElementProxy::
      Ang ()
      {
        return this->Ang_;
      }

      void SimBuildingElementProxy::
      Ang (const Ang_type& x)
      {
        this->Ang_.set (x);
      }

      void SimBuildingElementProxy::
      Ang (const Ang_optional& x)
      {
        this->Ang_ = x;
      }

      const SimBuildingElementProxy::ApparentLoad_optional& SimBuildingElementProxy::
      ApparentLoad () const
      {
        return this->ApparentLoad_;
      }

      SimBuildingElementProxy::ApparentLoad_optional& SimBuildingElementProxy::
      ApparentLoad ()
      {
        return this->ApparentLoad_;
      }

      void SimBuildingElementProxy::
      ApparentLoad (const ApparentLoad_type& x)
      {
        this->ApparentLoad_.set (x);
      }

      void SimBuildingElementProxy::
      ApparentLoad (const ApparentLoad_optional& x)
      {
        this->ApparentLoad_ = x;
      }

      const SimBuildingElementProxy::ApparentLoadPhaseA_optional& SimBuildingElementProxy::
      ApparentLoadPhaseA () const
      {
        return this->ApparentLoadPhaseA_;
      }

      SimBuildingElementProxy::ApparentLoadPhaseA_optional& SimBuildingElementProxy::
      ApparentLoadPhaseA ()
      {
        return this->ApparentLoadPhaseA_;
      }

      void SimBuildingElementProxy::
      ApparentLoadPhaseA (const ApparentLoadPhaseA_type& x)
      {
        this->ApparentLoadPhaseA_.set (x);
      }

      void SimBuildingElementProxy::
      ApparentLoadPhaseA (const ApparentLoadPhaseA_optional& x)
      {
        this->ApparentLoadPhaseA_ = x;
      }

      const SimBuildingElementProxy::ApparentLoadPhaseB_optional& SimBuildingElementProxy::
      ApparentLoadPhaseB () const
      {
        return this->ApparentLoadPhaseB_;
      }

      SimBuildingElementProxy::ApparentLoadPhaseB_optional& SimBuildingElementProxy::
      ApparentLoadPhaseB ()
      {
        return this->ApparentLoadPhaseB_;
      }

      void SimBuildingElementProxy::
      ApparentLoadPhaseB (const ApparentLoadPhaseB_type& x)
      {
        this->ApparentLoadPhaseB_.set (x);
      }

      void SimBuildingElementProxy::
      ApparentLoadPhaseB (const ApparentLoadPhaseB_optional& x)
      {
        this->ApparentLoadPhaseB_ = x;
      }

      const SimBuildingElementProxy::ApparentLoadPhaseC_optional& SimBuildingElementProxy::
      ApparentLoadPhaseC () const
      {
        return this->ApparentLoadPhaseC_;
      }

      SimBuildingElementProxy::ApparentLoadPhaseC_optional& SimBuildingElementProxy::
      ApparentLoadPhaseC ()
      {
        return this->ApparentLoadPhaseC_;
      }

      void SimBuildingElementProxy::
      ApparentLoadPhaseC (const ApparentLoadPhaseC_type& x)
      {
        this->ApparentLoadPhaseC_.set (x);
      }

      void SimBuildingElementProxy::
      ApparentLoadPhaseC (const ApparentLoadPhaseC_optional& x)
      {
        this->ApparentLoadPhaseC_ = x;
      }

      const SimBuildingElementProxy::AverageSolarTransmittance_optional& SimBuildingElementProxy::
      AverageSolarTransmittance () const
      {
        return this->AverageSolarTransmittance_;
      }

      SimBuildingElementProxy::AverageSolarTransmittance_optional& SimBuildingElementProxy::
      AverageSolarTransmittance ()
      {
        return this->AverageSolarTransmittance_;
      }

      void SimBuildingElementProxy::
      AverageSolarTransmittance (const AverageSolarTransmittance_type& x)
      {
        this->AverageSolarTransmittance_.set (x);
      }

      void SimBuildingElementProxy::
      AverageSolarTransmittance (const AverageSolarTransmittance_optional& x)
      {
        this->AverageSolarTransmittance_ = x;
      }

      const SimBuildingElementProxy::AverageVisibleTransmittance_optional& SimBuildingElementProxy::
      AverageVisibleTransmittance () const
      {
        return this->AverageVisibleTransmittance_;
      }

      SimBuildingElementProxy::AverageVisibleTransmittance_optional& SimBuildingElementProxy::
      AverageVisibleTransmittance ()
      {
        return this->AverageVisibleTransmittance_;
      }

      void SimBuildingElementProxy::
      AverageVisibleTransmittance (const AverageVisibleTransmittance_type& x)
      {
        this->AverageVisibleTransmittance_.set (x);
      }

      void SimBuildingElementProxy::
      AverageVisibleTransmittance (const AverageVisibleTransmittance_optional& x)
      {
        this->AverageVisibleTransmittance_ = x;
      }

      const SimBuildingElementProxy::Azimuth_optional& SimBuildingElementProxy::
      Azimuth () const
      {
        return this->Azimuth_;
      }

      SimBuildingElementProxy::Azimuth_optional& SimBuildingElementProxy::
      Azimuth ()
      {
        return this->Azimuth_;
      }

      void SimBuildingElementProxy::
      Azimuth (const Azimuth_type& x)
      {
        this->Azimuth_.set (x);
      }

      void SimBuildingElementProxy::
      Azimuth (const Azimuth_optional& x)
      {
        this->Azimuth_ = x;
      }

      const SimBuildingElementProxy::BaseHeight_optional& SimBuildingElementProxy::
      BaseHeight () const
      {
        return this->BaseHeight_;
      }

      SimBuildingElementProxy::BaseHeight_optional& SimBuildingElementProxy::
      BaseHeight ()
      {
        return this->BaseHeight_;
      }

      void SimBuildingElementProxy::
      BaseHeight (const BaseHeight_type& x)
      {
        this->BaseHeight_.set (x);
      }

      void SimBuildingElementProxy::
      BaseHeight (const BaseHeight_optional& x)
      {
        this->BaseHeight_ = x;
      }

      const SimBuildingElementProxy::BaseLength_optional& SimBuildingElementProxy::
      BaseLength () const
      {
        return this->BaseLength_;
      }

      SimBuildingElementProxy::BaseLength_optional& SimBuildingElementProxy::
      BaseLength ()
      {
        return this->BaseLength_;
      }

      void SimBuildingElementProxy::
      BaseLength (const BaseLength_type& x)
      {
        this->BaseLength_.set (x);
      }

      void SimBuildingElementProxy::
      BaseLength (const BaseLength_optional& x)
      {
        this->BaseLength_ = x;
      }

      const SimBuildingElementProxy::Buildingstoreyname_optional& SimBuildingElementProxy::
      Buildingstoreyname () const
      {
        return this->Buildingstoreyname_;
      }

      SimBuildingElementProxy::Buildingstoreyname_optional& SimBuildingElementProxy::
      Buildingstoreyname ()
      {
        return this->Buildingstoreyname_;
      }

      void SimBuildingElementProxy::
      Buildingstoreyname (const Buildingstoreyname_type& x)
      {
        this->Buildingstoreyname_.set (x);
      }

      void SimBuildingElementProxy::
      Buildingstoreyname (const Buildingstoreyname_optional& x)
      {
        this->Buildingstoreyname_ = x;
      }

      void SimBuildingElementProxy::
      Buildingstoreyname (::std::auto_ptr< Buildingstoreyname_type > x)
      {
        this->Buildingstoreyname_.set (x);
      }

      const SimBuildingElementProxy::C1Offset1_optional& SimBuildingElementProxy::
      C1Offset1 () const
      {
        return this->C1Offset1_;
      }

      SimBuildingElementProxy::C1Offset1_optional& SimBuildingElementProxy::
      C1Offset1 ()
      {
        return this->C1Offset1_;
      }

      void SimBuildingElementProxy::
      C1Offset1 (const C1Offset1_type& x)
      {
        this->C1Offset1_.set (x);
      }

      void SimBuildingElementProxy::
      C1Offset1 (const C1Offset1_optional& x)
      {
        this->C1Offset1_ = x;
      }

      const SimBuildingElementProxy::C1Offset2_optional& SimBuildingElementProxy::
      C1Offset2 () const
      {
        return this->C1Offset2_;
      }

      SimBuildingElementProxy::C1Offset2_optional& SimBuildingElementProxy::
      C1Offset2 ()
      {
        return this->C1Offset2_;
      }

      void SimBuildingElementProxy::
      C1Offset2 (const C1Offset2_type& x)
      {
        this->C1Offset2_.set (x);
      }

      void SimBuildingElementProxy::
      C1Offset2 (const C1Offset2_optional& x)
      {
        this->C1Offset2_ = x;
      }

      const SimBuildingElementProxy::C2Offset1_optional& SimBuildingElementProxy::
      C2Offset1 () const
      {
        return this->C2Offset1_;
      }

      SimBuildingElementProxy::C2Offset1_optional& SimBuildingElementProxy::
      C2Offset1 ()
      {
        return this->C2Offset1_;
      }

      void SimBuildingElementProxy::
      C2Offset1 (const C2Offset1_type& x)
      {
        this->C2Offset1_.set (x);
      }

      void SimBuildingElementProxy::
      C2Offset1 (const C2Offset1_optional& x)
      {
        this->C2Offset1_ = x;
      }

      const SimBuildingElementProxy::C2Offset2_optional& SimBuildingElementProxy::
      C2Offset2 () const
      {
        return this->C2Offset2_;
      }

      SimBuildingElementProxy::C2Offset2_optional& SimBuildingElementProxy::
      C2Offset2 ()
      {
        return this->C2Offset2_;
      }

      void SimBuildingElementProxy::
      C2Offset2 (const C2Offset2_type& x)
      {
        this->C2Offset2_.set (x);
      }

      void SimBuildingElementProxy::
      C2Offset2 (const C2Offset2_optional& x)
      {
        this->C2Offset2_ = x;
      }

      const SimBuildingElementProxy::C3Offset1_optional& SimBuildingElementProxy::
      C3Offset1 () const
      {
        return this->C3Offset1_;
      }

      SimBuildingElementProxy::C3Offset1_optional& SimBuildingElementProxy::
      C3Offset1 ()
      {
        return this->C3Offset1_;
      }

      void SimBuildingElementProxy::
      C3Offset1 (const C3Offset1_type& x)
      {
        this->C3Offset1_.set (x);
      }

      void SimBuildingElementProxy::
      C3Offset1 (const C3Offset1_optional& x)
      {
        this->C3Offset1_ = x;
      }

      const SimBuildingElementProxy::C4Offset2_optional& SimBuildingElementProxy::
      C4Offset2 () const
      {
        return this->C4Offset2_;
      }

      SimBuildingElementProxy::C4Offset2_optional& SimBuildingElementProxy::
      C4Offset2 ()
      {
        return this->C4Offset2_;
      }

      void SimBuildingElementProxy::
      C4Offset2 (const C4Offset2_type& x)
      {
        this->C4Offset2_.set (x);
      }

      void SimBuildingElementProxy::
      C4Offset2 (const C4Offset2_optional& x)
      {
        this->C4Offset2_ = x;
      }

      const SimBuildingElementProxy::C5Offset1_optional& SimBuildingElementProxy::
      C5Offset1 () const
      {
        return this->C5Offset1_;
      }

      SimBuildingElementProxy::C5Offset1_optional& SimBuildingElementProxy::
      C5Offset1 ()
      {
        return this->C5Offset1_;
      }

      void SimBuildingElementProxy::
      C5Offset1 (const C5Offset1_type& x)
      {
        this->C5Offset1_.set (x);
      }

      void SimBuildingElementProxy::
      C5Offset1 (const C5Offset1_optional& x)
      {
        this->C5Offset1_ = x;
      }

      const SimBuildingElementProxy::C5Offset2_optional& SimBuildingElementProxy::
      C5Offset2 () const
      {
        return this->C5Offset2_;
      }

      SimBuildingElementProxy::C5Offset2_optional& SimBuildingElementProxy::
      C5Offset2 ()
      {
        return this->C5Offset2_;
      }

      void SimBuildingElementProxy::
      C5Offset2 (const C5Offset2_type& x)
      {
        this->C5Offset2_.set (x);
      }

      void SimBuildingElementProxy::
      C5Offset2 (const C5Offset2_optional& x)
      {
        this->C5Offset2_ = x;
      }

      const SimBuildingElementProxy::C6Offset1_optional& SimBuildingElementProxy::
      C6Offset1 () const
      {
        return this->C6Offset1_;
      }

      SimBuildingElementProxy::C6Offset1_optional& SimBuildingElementProxy::
      C6Offset1 ()
      {
        return this->C6Offset1_;
      }

      void SimBuildingElementProxy::
      C6Offset1 (const C6Offset1_type& x)
      {
        this->C6Offset1_.set (x);
      }

      void SimBuildingElementProxy::
      C6Offset1 (const C6Offset1_optional& x)
      {
        this->C6Offset1_ = x;
      }

      const SimBuildingElementProxy::C6Offset2_optional& SimBuildingElementProxy::
      C6Offset2 () const
      {
        return this->C6Offset2_;
      }

      SimBuildingElementProxy::C6Offset2_optional& SimBuildingElementProxy::
      C6Offset2 ()
      {
        return this->C6Offset2_;
      }

      void SimBuildingElementProxy::
      C6Offset2 (const C6Offset2_type& x)
      {
        this->C6Offset2_.set (x);
      }

      void SimBuildingElementProxy::
      C6Offset2 (const C6Offset2_optional& x)
      {
        this->C6Offset2_ = x;
      }

      const SimBuildingElementProxy::ChilledWaterFlow_optional& SimBuildingElementProxy::
      ChilledWaterFlow () const
      {
        return this->ChilledWaterFlow_;
      }

      SimBuildingElementProxy::ChilledWaterFlow_optional& SimBuildingElementProxy::
      ChilledWaterFlow ()
      {
        return this->ChilledWaterFlow_;
      }

      void SimBuildingElementProxy::
      ChilledWaterFlow (const ChilledWaterFlow_type& x)
      {
        this->ChilledWaterFlow_.set (x);
      }

      void SimBuildingElementProxy::
      ChilledWaterFlow (const ChilledWaterFlow_optional& x)
      {
        this->ChilledWaterFlow_ = x;
      }

      const SimBuildingElementProxy::ChilledWaterPressureDrop_optional& SimBuildingElementProxy::
      ChilledWaterPressureDrop () const
      {
        return this->ChilledWaterPressureDrop_;
      }

      SimBuildingElementProxy::ChilledWaterPressureDrop_optional& SimBuildingElementProxy::
      ChilledWaterPressureDrop ()
      {
        return this->ChilledWaterPressureDrop_;
      }

      void SimBuildingElementProxy::
      ChilledWaterPressureDrop (const ChilledWaterPressureDrop_type& x)
      {
        this->ChilledWaterPressureDrop_.set (x);
      }

      void SimBuildingElementProxy::
      ChilledWaterPressureDrop (const ChilledWaterPressureDrop_optional& x)
      {
        this->ChilledWaterPressureDrop_ = x;
      }

      const SimBuildingElementProxy::CircuitNaming_optional& SimBuildingElementProxy::
      CircuitNaming () const
      {
        return this->CircuitNaming_;
      }

      SimBuildingElementProxy::CircuitNaming_optional& SimBuildingElementProxy::
      CircuitNaming ()
      {
        return this->CircuitNaming_;
      }

      void SimBuildingElementProxy::
      CircuitNaming (const CircuitNaming_type& x)
      {
        this->CircuitNaming_.set (x);
      }

      void SimBuildingElementProxy::
      CircuitNaming (const CircuitNaming_optional& x)
      {
        this->CircuitNaming_ = x;
      }

      void SimBuildingElementProxy::
      CircuitNaming (::std::auto_ptr< CircuitNaming_type > x)
      {
        this->CircuitNaming_.set (x);
      }

      const SimBuildingElementProxy::Color_optional& SimBuildingElementProxy::
      Color () const
      {
        return this->Color_;
      }

      SimBuildingElementProxy::Color_optional& SimBuildingElementProxy::
      Color ()
      {
        return this->Color_;
      }

      void SimBuildingElementProxy::
      Color (const Color_type& x)
      {
        this->Color_.set (x);
      }

      void SimBuildingElementProxy::
      Color (const Color_optional& x)
      {
        this->Color_ = x;
      }

      void SimBuildingElementProxy::
      Color (::std::auto_ptr< Color_type > x)
      {
        this->Color_.set (x);
      }

      const SimBuildingElementProxy::Connectionoffset_optional& SimBuildingElementProxy::
      Connectionoffset () const
      {
        return this->Connectionoffset_;
      }

      SimBuildingElementProxy::Connectionoffset_optional& SimBuildingElementProxy::
      Connectionoffset ()
      {
        return this->Connectionoffset_;
      }

      void SimBuildingElementProxy::
      Connectionoffset (const Connectionoffset_type& x)
      {
        this->Connectionoffset_.set (x);
      }

      void SimBuildingElementProxy::
      Connectionoffset (const Connectionoffset_optional& x)
      {
        this->Connectionoffset_ = x;
      }

      const SimBuildingElementProxy::ContainerName_optional& SimBuildingElementProxy::
      ContainerName () const
      {
        return this->ContainerName_;
      }

      SimBuildingElementProxy::ContainerName_optional& SimBuildingElementProxy::
      ContainerName ()
      {
        return this->ContainerName_;
      }

      void SimBuildingElementProxy::
      ContainerName (const ContainerName_type& x)
      {
        this->ContainerName_.set (x);
      }

      void SimBuildingElementProxy::
      ContainerName (const ContainerName_optional& x)
      {
        this->ContainerName_ = x;
      }

      void SimBuildingElementProxy::
      ContainerName (::std::auto_ptr< ContainerName_type > x)
      {
        this->ContainerName_.set (x);
      }

      const SimBuildingElementProxy::ContainerType_optional& SimBuildingElementProxy::
      ContainerType () const
      {
        return this->ContainerType_;
      }

      SimBuildingElementProxy::ContainerType_optional& SimBuildingElementProxy::
      ContainerType ()
      {
        return this->ContainerType_;
      }

      void SimBuildingElementProxy::
      ContainerType (const ContainerType_type& x)
      {
        this->ContainerType_.set (x);
      }

      void SimBuildingElementProxy::
      ContainerType (const ContainerType_optional& x)
      {
        this->ContainerType_ = x;
      }

      void SimBuildingElementProxy::
      ContainerType (::std::auto_ptr< ContainerType_type > x)
      {
        this->ContainerType_.set (x);
      }

      const SimBuildingElementProxy::CoolAirFlow_optional& SimBuildingElementProxy::
      CoolAirFlow () const
      {
        return this->CoolAirFlow_;
      }

      SimBuildingElementProxy::CoolAirFlow_optional& SimBuildingElementProxy::
      CoolAirFlow ()
      {
        return this->CoolAirFlow_;
      }

      void SimBuildingElementProxy::
      CoolAirFlow (const CoolAirFlow_type& x)
      {
        this->CoolAirFlow_.set (x);
      }

      void SimBuildingElementProxy::
      CoolAirFlow (const CoolAirFlow_optional& x)
      {
        this->CoolAirFlow_ = x;
      }

      const SimBuildingElementProxy::CoolAirInletDiameter_optional& SimBuildingElementProxy::
      CoolAirInletDiameter () const
      {
        return this->CoolAirInletDiameter_;
      }

      SimBuildingElementProxy::CoolAirInletDiameter_optional& SimBuildingElementProxy::
      CoolAirInletDiameter ()
      {
        return this->CoolAirInletDiameter_;
      }

      void SimBuildingElementProxy::
      CoolAirInletDiameter (const CoolAirInletDiameter_type& x)
      {
        this->CoolAirInletDiameter_.set (x);
      }

      void SimBuildingElementProxy::
      CoolAirInletDiameter (const CoolAirInletDiameter_optional& x)
      {
        this->CoolAirInletDiameter_ = x;
      }

      const SimBuildingElementProxy::CoolAirInletRadius_optional& SimBuildingElementProxy::
      CoolAirInletRadius () const
      {
        return this->CoolAirInletRadius_;
      }

      SimBuildingElementProxy::CoolAirInletRadius_optional& SimBuildingElementProxy::
      CoolAirInletRadius ()
      {
        return this->CoolAirInletRadius_;
      }

      void SimBuildingElementProxy::
      CoolAirInletRadius (const CoolAirInletRadius_type& x)
      {
        this->CoolAirInletRadius_.set (x);
      }

      void SimBuildingElementProxy::
      CoolAirInletRadius (const CoolAirInletRadius_optional& x)
      {
        this->CoolAirInletRadius_ = x;
      }

      const SimBuildingElementProxy::CoolAirPressureDrop_optional& SimBuildingElementProxy::
      CoolAirPressureDrop () const
      {
        return this->CoolAirPressureDrop_;
      }

      SimBuildingElementProxy::CoolAirPressureDrop_optional& SimBuildingElementProxy::
      CoolAirPressureDrop ()
      {
        return this->CoolAirPressureDrop_;
      }

      void SimBuildingElementProxy::
      CoolAirPressureDrop (const CoolAirPressureDrop_type& x)
      {
        this->CoolAirPressureDrop_.set (x);
      }

      void SimBuildingElementProxy::
      CoolAirPressureDrop (const CoolAirPressureDrop_optional& x)
      {
        this->CoolAirPressureDrop_ = x;
      }

      const SimBuildingElementProxy::CoolingCoilInletRadius_optional& SimBuildingElementProxy::
      CoolingCoilInletRadius () const
      {
        return this->CoolingCoilInletRadius_;
      }

      SimBuildingElementProxy::CoolingCoilInletRadius_optional& SimBuildingElementProxy::
      CoolingCoilInletRadius ()
      {
        return this->CoolingCoilInletRadius_;
      }

      void SimBuildingElementProxy::
      CoolingCoilInletRadius (const CoolingCoilInletRadius_type& x)
      {
        this->CoolingCoilInletRadius_.set (x);
      }

      void SimBuildingElementProxy::
      CoolingCoilInletRadius (const CoolingCoilInletRadius_optional& x)
      {
        this->CoolingCoilInletRadius_ = x;
      }

      const SimBuildingElementProxy::CoolingCoilOutletRadius_optional& SimBuildingElementProxy::
      CoolingCoilOutletRadius () const
      {
        return this->CoolingCoilOutletRadius_;
      }

      SimBuildingElementProxy::CoolingCoilOutletRadius_optional& SimBuildingElementProxy::
      CoolingCoilOutletRadius ()
      {
        return this->CoolingCoilOutletRadius_;
      }

      void SimBuildingElementProxy::
      CoolingCoilOutletRadius (const CoolingCoilOutletRadius_type& x)
      {
        this->CoolingCoilOutletRadius_.set (x);
      }

      void SimBuildingElementProxy::
      CoolingCoilOutletRadius (const CoolingCoilOutletRadius_optional& x)
      {
        this->CoolingCoilOutletRadius_ = x;
      }

      const SimBuildingElementProxy::CoolingWaterDiameter_optional& SimBuildingElementProxy::
      CoolingWaterDiameter () const
      {
        return this->CoolingWaterDiameter_;
      }

      SimBuildingElementProxy::CoolingWaterDiameter_optional& SimBuildingElementProxy::
      CoolingWaterDiameter ()
      {
        return this->CoolingWaterDiameter_;
      }

      void SimBuildingElementProxy::
      CoolingWaterDiameter (const CoolingWaterDiameter_type& x)
      {
        this->CoolingWaterDiameter_.set (x);
      }

      void SimBuildingElementProxy::
      CoolingWaterDiameter (const CoolingWaterDiameter_optional& x)
      {
        this->CoolingWaterDiameter_ = x;
      }

      const SimBuildingElementProxy::CoolingWaterFlow_optional& SimBuildingElementProxy::
      CoolingWaterFlow () const
      {
        return this->CoolingWaterFlow_;
      }

      SimBuildingElementProxy::CoolingWaterFlow_optional& SimBuildingElementProxy::
      CoolingWaterFlow ()
      {
        return this->CoolingWaterFlow_;
      }

      void SimBuildingElementProxy::
      CoolingWaterFlow (const CoolingWaterFlow_type& x)
      {
        this->CoolingWaterFlow_.set (x);
      }

      void SimBuildingElementProxy::
      CoolingWaterFlow (const CoolingWaterFlow_optional& x)
      {
        this->CoolingWaterFlow_ = x;
      }

      const SimBuildingElementProxy::CoolingWaterPressureDrop_optional& SimBuildingElementProxy::
      CoolingWaterPressureDrop () const
      {
        return this->CoolingWaterPressureDrop_;
      }

      SimBuildingElementProxy::CoolingWaterPressureDrop_optional& SimBuildingElementProxy::
      CoolingWaterPressureDrop ()
      {
        return this->CoolingWaterPressureDrop_;
      }

      void SimBuildingElementProxy::
      CoolingWaterPressureDrop (const CoolingWaterPressureDrop_type& x)
      {
        this->CoolingWaterPressureDrop_.set (x);
      }

      void SimBuildingElementProxy::
      CoolingWaterPressureDrop (const CoolingWaterPressureDrop_optional& x)
      {
        this->CoolingWaterPressureDrop_ = x;
      }

      const SimBuildingElementProxy::CoolingWaterRadius_optional& SimBuildingElementProxy::
      CoolingWaterRadius () const
      {
        return this->CoolingWaterRadius_;
      }

      SimBuildingElementProxy::CoolingWaterRadius_optional& SimBuildingElementProxy::
      CoolingWaterRadius ()
      {
        return this->CoolingWaterRadius_;
      }

      void SimBuildingElementProxy::
      CoolingWaterRadius (const CoolingWaterRadius_type& x)
      {
        this->CoolingWaterRadius_.set (x);
      }

      void SimBuildingElementProxy::
      CoolingWaterRadius (const CoolingWaterRadius_optional& x)
      {
        this->CoolingWaterRadius_ = x;
      }

      const SimBuildingElementProxy::Diameter1_optional& SimBuildingElementProxy::
      Diameter1 () const
      {
        return this->Diameter1_;
      }

      SimBuildingElementProxy::Diameter1_optional& SimBuildingElementProxy::
      Diameter1 ()
      {
        return this->Diameter1_;
      }

      void SimBuildingElementProxy::
      Diameter1 (const Diameter1_type& x)
      {
        this->Diameter1_.set (x);
      }

      void SimBuildingElementProxy::
      Diameter1 (const Diameter1_optional& x)
      {
        this->Diameter1_ = x;
      }

      const SimBuildingElementProxy::Distance_optional& SimBuildingElementProxy::
      Distance () const
      {
        return this->Distance_;
      }

      SimBuildingElementProxy::Distance_optional& SimBuildingElementProxy::
      Distance ()
      {
        return this->Distance_;
      }

      void SimBuildingElementProxy::
      Distance (const Distance_type& x)
      {
        this->Distance_.set (x);
      }

      void SimBuildingElementProxy::
      Distance (const Distance_optional& x)
      {
        this->Distance_ = x;
      }

      const SimBuildingElementProxy::Distance1_optional& SimBuildingElementProxy::
      Distance1 () const
      {
        return this->Distance1_;
      }

      SimBuildingElementProxy::Distance1_optional& SimBuildingElementProxy::
      Distance1 ()
      {
        return this->Distance1_;
      }

      void SimBuildingElementProxy::
      Distance1 (const Distance1_type& x)
      {
        this->Distance1_.set (x);
      }

      void SimBuildingElementProxy::
      Distance1 (const Distance1_optional& x)
      {
        this->Distance1_ = x;
      }

      const SimBuildingElementProxy::Distance2_optional& SimBuildingElementProxy::
      Distance2 () const
      {
        return this->Distance2_;
      }

      SimBuildingElementProxy::Distance2_optional& SimBuildingElementProxy::
      Distance2 ()
      {
        return this->Distance2_;
      }

      void SimBuildingElementProxy::
      Distance2 (const Distance2_type& x)
      {
        this->Distance2_.set (x);
      }

      void SimBuildingElementProxy::
      Distance2 (const Distance2_optional& x)
      {
        this->Distance2_ = x;
      }

      const SimBuildingElementProxy::DrainFlow_optional& SimBuildingElementProxy::
      DrainFlow () const
      {
        return this->DrainFlow_;
      }

      SimBuildingElementProxy::DrainFlow_optional& SimBuildingElementProxy::
      DrainFlow ()
      {
        return this->DrainFlow_;
      }

      void SimBuildingElementProxy::
      DrainFlow (const DrainFlow_type& x)
      {
        this->DrainFlow_.set (x);
      }

      void SimBuildingElementProxy::
      DrainFlow (const DrainFlow_optional& x)
      {
        this->DrainFlow_ = x;
      }

      const SimBuildingElementProxy::DrainOffset1_optional& SimBuildingElementProxy::
      DrainOffset1 () const
      {
        return this->DrainOffset1_;
      }

      SimBuildingElementProxy::DrainOffset1_optional& SimBuildingElementProxy::
      DrainOffset1 ()
      {
        return this->DrainOffset1_;
      }

      void SimBuildingElementProxy::
      DrainOffset1 (const DrainOffset1_type& x)
      {
        this->DrainOffset1_.set (x);
      }

      void SimBuildingElementProxy::
      DrainOffset1 (const DrainOffset1_optional& x)
      {
        this->DrainOffset1_ = x;
      }

      const SimBuildingElementProxy::DrainRadius_optional& SimBuildingElementProxy::
      DrainRadius () const
      {
        return this->DrainRadius_;
      }

      SimBuildingElementProxy::DrainRadius_optional& SimBuildingElementProxy::
      DrainRadius ()
      {
        return this->DrainRadius_;
      }

      void SimBuildingElementProxy::
      DrainRadius (const DrainRadius_type& x)
      {
        this->DrainRadius_.set (x);
      }

      void SimBuildingElementProxy::
      DrainRadius (const DrainRadius_optional& x)
      {
        this->DrainRadius_ = x;
      }

      const SimBuildingElementProxy::DuctHeight_optional& SimBuildingElementProxy::
      DuctHeight () const
      {
        return this->DuctHeight_;
      }

      SimBuildingElementProxy::DuctHeight_optional& SimBuildingElementProxy::
      DuctHeight ()
      {
        return this->DuctHeight_;
      }

      void SimBuildingElementProxy::
      DuctHeight (const DuctHeight_type& x)
      {
        this->DuctHeight_.set (x);
      }

      void SimBuildingElementProxy::
      DuctHeight (const DuctHeight_optional& x)
      {
        this->DuctHeight_ = x;
      }

      const SimBuildingElementProxy::DuctWidth_optional& SimBuildingElementProxy::
      DuctWidth () const
      {
        return this->DuctWidth_;
      }

      SimBuildingElementProxy::DuctWidth_optional& SimBuildingElementProxy::
      DuctWidth ()
      {
        return this->DuctWidth_;
      }

      void SimBuildingElementProxy::
      DuctWidth (const DuctWidth_type& x)
      {
        this->DuctWidth_.set (x);
      }

      void SimBuildingElementProxy::
      DuctWidth (const DuctWidth_optional& x)
      {
        this->DuctWidth_ = x;
      }

      const SimBuildingElementProxy::ElectricalCircuitName_optional& SimBuildingElementProxy::
      ElectricalCircuitName () const
      {
        return this->ElectricalCircuitName_;
      }

      SimBuildingElementProxy::ElectricalCircuitName_optional& SimBuildingElementProxy::
      ElectricalCircuitName ()
      {
        return this->ElectricalCircuitName_;
      }

      void SimBuildingElementProxy::
      ElectricalCircuitName (const ElectricalCircuitName_type& x)
      {
        this->ElectricalCircuitName_.set (x);
      }

      void SimBuildingElementProxy::
      ElectricalCircuitName (const ElectricalCircuitName_optional& x)
      {
        this->ElectricalCircuitName_ = x;
      }

      void SimBuildingElementProxy::
      ElectricalCircuitName (::std::auto_ptr< ElectricalCircuitName_type > x)
      {
        this->ElectricalCircuitName_.set (x);
      }

      const SimBuildingElementProxy::ElectricalData_optional& SimBuildingElementProxy::
      ElectricalData () const
      {
        return this->ElectricalData_;
      }

      SimBuildingElementProxy::ElectricalData_optional& SimBuildingElementProxy::
      ElectricalData ()
      {
        return this->ElectricalData_;
      }

      void SimBuildingElementProxy::
      ElectricalData (const ElectricalData_type& x)
      {
        this->ElectricalData_.set (x);
      }

      void SimBuildingElementProxy::
      ElectricalData (const ElectricalData_optional& x)
      {
        this->ElectricalData_ = x;
      }

      void SimBuildingElementProxy::
      ElectricalData (::std::auto_ptr< ElectricalData_type > x)
      {
        this->ElectricalData_.set (x);
      }

      const SimBuildingElementProxy::Enclosure_optional& SimBuildingElementProxy::
      Enclosure () const
      {
        return this->Enclosure_;
      }

      SimBuildingElementProxy::Enclosure_optional& SimBuildingElementProxy::
      Enclosure ()
      {
        return this->Enclosure_;
      }

      void SimBuildingElementProxy::
      Enclosure (const Enclosure_type& x)
      {
        this->Enclosure_.set (x);
      }

      void SimBuildingElementProxy::
      Enclosure (const Enclosure_optional& x)
      {
        this->Enclosure_ = x;
      }

      void SimBuildingElementProxy::
      Enclosure (::std::auto_ptr< Enclosure_type > x)
      {
        this->Enclosure_.set (x);
      }

      const SimBuildingElementProxy::ExternalStaticPressure_optional& SimBuildingElementProxy::
      ExternalStaticPressure () const
      {
        return this->ExternalStaticPressure_;
      }

      SimBuildingElementProxy::ExternalStaticPressure_optional& SimBuildingElementProxy::
      ExternalStaticPressure ()
      {
        return this->ExternalStaticPressure_;
      }

      void SimBuildingElementProxy::
      ExternalStaticPressure (const ExternalStaticPressure_type& x)
      {
        this->ExternalStaticPressure_.set (x);
      }

      void SimBuildingElementProxy::
      ExternalStaticPressure (const ExternalStaticPressure_optional& x)
      {
        this->ExternalStaticPressure_ = x;
      }

      const SimBuildingElementProxy::ExternalTotalPressure_optional& SimBuildingElementProxy::
      ExternalTotalPressure () const
      {
        return this->ExternalTotalPressure_;
      }

      SimBuildingElementProxy::ExternalTotalPressure_optional& SimBuildingElementProxy::
      ExternalTotalPressure ()
      {
        return this->ExternalTotalPressure_;
      }

      void SimBuildingElementProxy::
      ExternalTotalPressure (const ExternalTotalPressure_type& x)
      {
        this->ExternalTotalPressure_.set (x);
      }

      void SimBuildingElementProxy::
      ExternalTotalPressure (const ExternalTotalPressure_optional& x)
      {
        this->ExternalTotalPressure_ = x;
      }

      const SimBuildingElementProxy::FanAirFlow_optional& SimBuildingElementProxy::
      FanAirFlow () const
      {
        return this->FanAirFlow_;
      }

      SimBuildingElementProxy::FanAirFlow_optional& SimBuildingElementProxy::
      FanAirFlow ()
      {
        return this->FanAirFlow_;
      }

      void SimBuildingElementProxy::
      FanAirFlow (const FanAirFlow_type& x)
      {
        this->FanAirFlow_.set (x);
      }

      void SimBuildingElementProxy::
      FanAirFlow (const FanAirFlow_optional& x)
      {
        this->FanAirFlow_ = x;
      }

      const SimBuildingElementProxy::FanDiameter_optional& SimBuildingElementProxy::
      FanDiameter () const
      {
        return this->FanDiameter_;
      }

      SimBuildingElementProxy::FanDiameter_optional& SimBuildingElementProxy::
      FanDiameter ()
      {
        return this->FanDiameter_;
      }

      void SimBuildingElementProxy::
      FanDiameter (const FanDiameter_type& x)
      {
        this->FanDiameter_.set (x);
      }

      void SimBuildingElementProxy::
      FanDiameter (const FanDiameter_optional& x)
      {
        this->FanDiameter_ = x;
      }

      const SimBuildingElementProxy::FanRadius_optional& SimBuildingElementProxy::
      FanRadius () const
      {
        return this->FanRadius_;
      }

      SimBuildingElementProxy::FanRadius_optional& SimBuildingElementProxy::
      FanRadius ()
      {
        return this->FanRadius_;
      }

      void SimBuildingElementProxy::
      FanRadius (const FanRadius_type& x)
      {
        this->FanRadius_.set (x);
      }

      void SimBuildingElementProxy::
      FanRadius (const FanRadius_optional& x)
      {
        this->FanRadius_ = x;
      }

      const SimBuildingElementProxy::GeneratorHeight_optional& SimBuildingElementProxy::
      GeneratorHeight () const
      {
        return this->GeneratorHeight_;
      }

      SimBuildingElementProxy::GeneratorHeight_optional& SimBuildingElementProxy::
      GeneratorHeight ()
      {
        return this->GeneratorHeight_;
      }

      void SimBuildingElementProxy::
      GeneratorHeight (const GeneratorHeight_type& x)
      {
        this->GeneratorHeight_.set (x);
      }

      void SimBuildingElementProxy::
      GeneratorHeight (const GeneratorHeight_optional& x)
      {
        this->GeneratorHeight_ = x;
      }

      const SimBuildingElementProxy::GeneratorLength_optional& SimBuildingElementProxy::
      GeneratorLength () const
      {
        return this->GeneratorLength_;
      }

      SimBuildingElementProxy::GeneratorLength_optional& SimBuildingElementProxy::
      GeneratorLength ()
      {
        return this->GeneratorLength_;
      }

      void SimBuildingElementProxy::
      GeneratorLength (const GeneratorLength_type& x)
      {
        this->GeneratorLength_.set (x);
      }

      void SimBuildingElementProxy::
      GeneratorLength (const GeneratorLength_optional& x)
      {
        this->GeneratorLength_ = x;
      }

      const SimBuildingElementProxy::GeneratorWidth_optional& SimBuildingElementProxy::
      GeneratorWidth () const
      {
        return this->GeneratorWidth_;
      }

      SimBuildingElementProxy::GeneratorWidth_optional& SimBuildingElementProxy::
      GeneratorWidth ()
      {
        return this->GeneratorWidth_;
      }

      void SimBuildingElementProxy::
      GeneratorWidth (const GeneratorWidth_type& x)
      {
        this->GeneratorWidth_.set (x);
      }

      void SimBuildingElementProxy::
      GeneratorWidth (const GeneratorWidth_optional& x)
      {
        this->GeneratorWidth_ = x;
      }

      const SimBuildingElementProxy::GroupName_optional& SimBuildingElementProxy::
      GroupName () const
      {
        return this->GroupName_;
      }

      SimBuildingElementProxy::GroupName_optional& SimBuildingElementProxy::
      GroupName ()
      {
        return this->GroupName_;
      }

      void SimBuildingElementProxy::
      GroupName (const GroupName_type& x)
      {
        this->GroupName_.set (x);
      }

      void SimBuildingElementProxy::
      GroupName (const GroupName_optional& x)
      {
        this->GroupName_ = x;
      }

      void SimBuildingElementProxy::
      GroupName (::std::auto_ptr< GroupName_type > x)
      {
        this->GroupName_.set (x);
      }

      const SimBuildingElementProxy::HalfAirOutletHeight_optional& SimBuildingElementProxy::
      HalfAirOutletHeight () const
      {
        return this->HalfAirOutletHeight_;
      }

      SimBuildingElementProxy::HalfAirOutletHeight_optional& SimBuildingElementProxy::
      HalfAirOutletHeight ()
      {
        return this->HalfAirOutletHeight_;
      }

      void SimBuildingElementProxy::
      HalfAirOutletHeight (const HalfAirOutletHeight_type& x)
      {
        this->HalfAirOutletHeight_.set (x);
      }

      void SimBuildingElementProxy::
      HalfAirOutletHeight (const HalfAirOutletHeight_optional& x)
      {
        this->HalfAirOutletHeight_ = x;
      }

      const SimBuildingElementProxy::HalfAirOutletWidth_optional& SimBuildingElementProxy::
      HalfAirOutletWidth () const
      {
        return this->HalfAirOutletWidth_;
      }

      SimBuildingElementProxy::HalfAirOutletWidth_optional& SimBuildingElementProxy::
      HalfAirOutletWidth ()
      {
        return this->HalfAirOutletWidth_;
      }

      void SimBuildingElementProxy::
      HalfAirOutletWidth (const HalfAirOutletWidth_type& x)
      {
        this->HalfAirOutletWidth_.set (x);
      }

      void SimBuildingElementProxy::
      HalfAirOutletWidth (const HalfAirOutletWidth_optional& x)
      {
        this->HalfAirOutletWidth_ = x;
      }

      const SimBuildingElementProxy::HalfOverallHeight_optional& SimBuildingElementProxy::
      HalfOverallHeight () const
      {
        return this->HalfOverallHeight_;
      }

      SimBuildingElementProxy::HalfOverallHeight_optional& SimBuildingElementProxy::
      HalfOverallHeight ()
      {
        return this->HalfOverallHeight_;
      }

      void SimBuildingElementProxy::
      HalfOverallHeight (const HalfOverallHeight_type& x)
      {
        this->HalfOverallHeight_.set (x);
      }

      void SimBuildingElementProxy::
      HalfOverallHeight (const HalfOverallHeight_optional& x)
      {
        this->HalfOverallHeight_ = x;
      }

      const SimBuildingElementProxy::HalfOverallWidth_optional& SimBuildingElementProxy::
      HalfOverallWidth () const
      {
        return this->HalfOverallWidth_;
      }

      SimBuildingElementProxy::HalfOverallWidth_optional& SimBuildingElementProxy::
      HalfOverallWidth ()
      {
        return this->HalfOverallWidth_;
      }

      void SimBuildingElementProxy::
      HalfOverallWidth (const HalfOverallWidth_type& x)
      {
        this->HalfOverallWidth_.set (x);
      }

      void SimBuildingElementProxy::
      HalfOverallWidth (const HalfOverallWidth_optional& x)
      {
        this->HalfOverallWidth_ = x;
      }

      const SimBuildingElementProxy::HalfWidth4_optional& SimBuildingElementProxy::
      HalfWidth4 () const
      {
        return this->HalfWidth4_;
      }

      SimBuildingElementProxy::HalfWidth4_optional& SimBuildingElementProxy::
      HalfWidth4 ()
      {
        return this->HalfWidth4_;
      }

      void SimBuildingElementProxy::
      HalfWidth4 (const HalfWidth4_type& x)
      {
        this->HalfWidth4_.set (x);
      }

      void SimBuildingElementProxy::
      HalfWidth4 (const HalfWidth4_optional& x)
      {
        this->HalfWidth4_ = x;
      }

      const SimBuildingElementProxy::HeatAirFlow_optional& SimBuildingElementProxy::
      HeatAirFlow () const
      {
        return this->HeatAirFlow_;
      }

      SimBuildingElementProxy::HeatAirFlow_optional& SimBuildingElementProxy::
      HeatAirFlow ()
      {
        return this->HeatAirFlow_;
      }

      void SimBuildingElementProxy::
      HeatAirFlow (const HeatAirFlow_type& x)
      {
        this->HeatAirFlow_.set (x);
      }

      void SimBuildingElementProxy::
      HeatAirFlow (const HeatAirFlow_optional& x)
      {
        this->HeatAirFlow_ = x;
      }

      const SimBuildingElementProxy::HeatAirInletDiameter_optional& SimBuildingElementProxy::
      HeatAirInletDiameter () const
      {
        return this->HeatAirInletDiameter_;
      }

      SimBuildingElementProxy::HeatAirInletDiameter_optional& SimBuildingElementProxy::
      HeatAirInletDiameter ()
      {
        return this->HeatAirInletDiameter_;
      }

      void SimBuildingElementProxy::
      HeatAirInletDiameter (const HeatAirInletDiameter_type& x)
      {
        this->HeatAirInletDiameter_.set (x);
      }

      void SimBuildingElementProxy::
      HeatAirInletDiameter (const HeatAirInletDiameter_optional& x)
      {
        this->HeatAirInletDiameter_ = x;
      }

      const SimBuildingElementProxy::HeatAirInletRadius_optional& SimBuildingElementProxy::
      HeatAirInletRadius () const
      {
        return this->HeatAirInletRadius_;
      }

      SimBuildingElementProxy::HeatAirInletRadius_optional& SimBuildingElementProxy::
      HeatAirInletRadius ()
      {
        return this->HeatAirInletRadius_;
      }

      void SimBuildingElementProxy::
      HeatAirInletRadius (const HeatAirInletRadius_type& x)
      {
        this->HeatAirInletRadius_.set (x);
      }

      void SimBuildingElementProxy::
      HeatAirInletRadius (const HeatAirInletRadius_optional& x)
      {
        this->HeatAirInletRadius_ = x;
      }

      const SimBuildingElementProxy::HeatAirPressureDrop_optional& SimBuildingElementProxy::
      HeatAirPressureDrop () const
      {
        return this->HeatAirPressureDrop_;
      }

      SimBuildingElementProxy::HeatAirPressureDrop_optional& SimBuildingElementProxy::
      HeatAirPressureDrop ()
      {
        return this->HeatAirPressureDrop_;
      }

      void SimBuildingElementProxy::
      HeatAirPressureDrop (const HeatAirPressureDrop_type& x)
      {
        this->HeatAirPressureDrop_.set (x);
      }

      void SimBuildingElementProxy::
      HeatAirPressureDrop (const HeatAirPressureDrop_optional& x)
      {
        this->HeatAirPressureDrop_ = x;
      }

      const SimBuildingElementProxy::HeatLoss_optional& SimBuildingElementProxy::
      HeatLoss () const
      {
        return this->HeatLoss_;
      }

      SimBuildingElementProxy::HeatLoss_optional& SimBuildingElementProxy::
      HeatLoss ()
      {
        return this->HeatLoss_;
      }

      void SimBuildingElementProxy::
      HeatLoss (const HeatLoss_type& x)
      {
        this->HeatLoss_.set (x);
      }

      void SimBuildingElementProxy::
      HeatLoss (const HeatLoss_optional& x)
      {
        this->HeatLoss_ = x;
      }

      const SimBuildingElementProxy::HeatingCoilInletRadius_optional& SimBuildingElementProxy::
      HeatingCoilInletRadius () const
      {
        return this->HeatingCoilInletRadius_;
      }

      SimBuildingElementProxy::HeatingCoilInletRadius_optional& SimBuildingElementProxy::
      HeatingCoilInletRadius ()
      {
        return this->HeatingCoilInletRadius_;
      }

      void SimBuildingElementProxy::
      HeatingCoilInletRadius (const HeatingCoilInletRadius_type& x)
      {
        this->HeatingCoilInletRadius_.set (x);
      }

      void SimBuildingElementProxy::
      HeatingCoilInletRadius (const HeatingCoilInletRadius_optional& x)
      {
        this->HeatingCoilInletRadius_ = x;
      }

      const SimBuildingElementProxy::HeatingCoilOutletRadius_optional& SimBuildingElementProxy::
      HeatingCoilOutletRadius () const
      {
        return this->HeatingCoilOutletRadius_;
      }

      SimBuildingElementProxy::HeatingCoilOutletRadius_optional& SimBuildingElementProxy::
      HeatingCoilOutletRadius ()
      {
        return this->HeatingCoilOutletRadius_;
      }

      void SimBuildingElementProxy::
      HeatingCoilOutletRadius (const HeatingCoilOutletRadius_type& x)
      {
        this->HeatingCoilOutletRadius_.set (x);
      }

      void SimBuildingElementProxy::
      HeatingCoilOutletRadius (const HeatingCoilOutletRadius_optional& x)
      {
        this->HeatingCoilOutletRadius_ = x;
      }

      const SimBuildingElementProxy::Height1_optional& SimBuildingElementProxy::
      Height1 () const
      {
        return this->Height1_;
      }

      SimBuildingElementProxy::Height1_optional& SimBuildingElementProxy::
      Height1 ()
      {
        return this->Height1_;
      }

      void SimBuildingElementProxy::
      Height1 (const Height1_type& x)
      {
        this->Height1_.set (x);
      }

      void SimBuildingElementProxy::
      Height1 (const Height1_optional& x)
      {
        this->Height1_ = x;
      }

      const SimBuildingElementProxy::Height2_optional& SimBuildingElementProxy::
      Height2 () const
      {
        return this->Height2_;
      }

      SimBuildingElementProxy::Height2_optional& SimBuildingElementProxy::
      Height2 ()
      {
        return this->Height2_;
      }

      void SimBuildingElementProxy::
      Height2 (const Height2_type& x)
      {
        this->Height2_.set (x);
      }

      void SimBuildingElementProxy::
      Height2 (const Height2_optional& x)
      {
        this->Height2_ = x;
      }

      const SimBuildingElementProxy::Height3_optional& SimBuildingElementProxy::
      Height3 () const
      {
        return this->Height3_;
      }

      SimBuildingElementProxy::Height3_optional& SimBuildingElementProxy::
      Height3 ()
      {
        return this->Height3_;
      }

      void SimBuildingElementProxy::
      Height3 (const Height3_type& x)
      {
        this->Height3_.set (x);
      }

      void SimBuildingElementProxy::
      Height3 (const Height3_optional& x)
      {
        this->Height3_ = x;
      }

      const SimBuildingElementProxy::Height4_optional& SimBuildingElementProxy::
      Height4 () const
      {
        return this->Height4_;
      }

      SimBuildingElementProxy::Height4_optional& SimBuildingElementProxy::
      Height4 ()
      {
        return this->Height4_;
      }

      void SimBuildingElementProxy::
      Height4 (const Height4_type& x)
      {
        this->Height4_.set (x);
      }

      void SimBuildingElementProxy::
      Height4 (const Height4_optional& x)
      {
        this->Height4_ = x;
      }

      const SimBuildingElementProxy::Height5_optional& SimBuildingElementProxy::
      Height5 () const
      {
        return this->Height5_;
      }

      SimBuildingElementProxy::Height5_optional& SimBuildingElementProxy::
      Height5 ()
      {
        return this->Height5_;
      }

      void SimBuildingElementProxy::
      Height5 (const Height5_type& x)
      {
        this->Height5_.set (x);
      }

      void SimBuildingElementProxy::
      Height5 (const Height5_optional& x)
      {
        this->Height5_ = x;
      }

      const SimBuildingElementProxy::Height6_optional& SimBuildingElementProxy::
      Height6 () const
      {
        return this->Height6_;
      }

      SimBuildingElementProxy::Height6_optional& SimBuildingElementProxy::
      Height6 ()
      {
        return this->Height6_;
      }

      void SimBuildingElementProxy::
      Height6 (const Height6_type& x)
      {
        this->Height6_.set (x);
      }

      void SimBuildingElementProxy::
      Height6 (const Height6_optional& x)
      {
        this->Height6_ = x;
      }

      const SimBuildingElementProxy::Height7_optional& SimBuildingElementProxy::
      Height7 () const
      {
        return this->Height7_;
      }

      SimBuildingElementProxy::Height7_optional& SimBuildingElementProxy::
      Height7 ()
      {
        return this->Height7_;
      }

      void SimBuildingElementProxy::
      Height7 (const Height7_type& x)
      {
        this->Height7_.set (x);
      }

      void SimBuildingElementProxy::
      Height7 (const Height7_optional& x)
      {
        this->Height7_ = x;
      }

      const SimBuildingElementProxy::Height8_optional& SimBuildingElementProxy::
      Height8 () const
      {
        return this->Height8_;
      }

      SimBuildingElementProxy::Height8_optional& SimBuildingElementProxy::
      Height8 ()
      {
        return this->Height8_;
      }

      void SimBuildingElementProxy::
      Height8 (const Height8_type& x)
      {
        this->Height8_.set (x);
      }

      void SimBuildingElementProxy::
      Height8 (const Height8_optional& x)
      {
        this->Height8_ = x;
      }

      const SimBuildingElementProxy::Height9_optional& SimBuildingElementProxy::
      Height9 () const
      {
        return this->Height9_;
      }

      SimBuildingElementProxy::Height9_optional& SimBuildingElementProxy::
      Height9 ()
      {
        return this->Height9_;
      }

      void SimBuildingElementProxy::
      Height9 (const Height9_type& x)
      {
        this->Height9_.set (x);
      }

      void SimBuildingElementProxy::
      Height9 (const Height9_optional& x)
      {
        this->Height9_ = x;
      }

      const SimBuildingElementProxy::Host_optional& SimBuildingElementProxy::
      Host () const
      {
        return this->Host_;
      }

      SimBuildingElementProxy::Host_optional& SimBuildingElementProxy::
      Host ()
      {
        return this->Host_;
      }

      void SimBuildingElementProxy::
      Host (const Host_type& x)
      {
        this->Host_.set (x);
      }

      void SimBuildingElementProxy::
      Host (const Host_optional& x)
      {
        this->Host_ = x;
      }

      void SimBuildingElementProxy::
      Host (::std::auto_ptr< Host_type > x)
      {
        this->Host_.set (x);
      }

      const SimBuildingElementProxy::HotWaterFlow_optional& SimBuildingElementProxy::
      HotWaterFlow () const
      {
        return this->HotWaterFlow_;
      }

      SimBuildingElementProxy::HotWaterFlow_optional& SimBuildingElementProxy::
      HotWaterFlow ()
      {
        return this->HotWaterFlow_;
      }

      void SimBuildingElementProxy::
      HotWaterFlow (const HotWaterFlow_type& x)
      {
        this->HotWaterFlow_.set (x);
      }

      void SimBuildingElementProxy::
      HotWaterFlow (const HotWaterFlow_optional& x)
      {
        this->HotWaterFlow_ = x;
      }

      const SimBuildingElementProxy::HotWaterPressureDrop_optional& SimBuildingElementProxy::
      HotWaterPressureDrop () const
      {
        return this->HotWaterPressureDrop_;
      }

      SimBuildingElementProxy::HotWaterPressureDrop_optional& SimBuildingElementProxy::
      HotWaterPressureDrop ()
      {
        return this->HotWaterPressureDrop_;
      }

      void SimBuildingElementProxy::
      HotWaterPressureDrop (const HotWaterPressureDrop_type& x)
      {
        this->HotWaterPressureDrop_.set (x);
      }

      void SimBuildingElementProxy::
      HotWaterPressureDrop (const HotWaterPressureDrop_optional& x)
      {
        this->HotWaterPressureDrop_ = x;
      }

      const SimBuildingElementProxy::Inclination_optional& SimBuildingElementProxy::
      Inclination () const
      {
        return this->Inclination_;
      }

      SimBuildingElementProxy::Inclination_optional& SimBuildingElementProxy::
      Inclination ()
      {
        return this->Inclination_;
      }

      void SimBuildingElementProxy::
      Inclination (const Inclination_type& x)
      {
        this->Inclination_.set (x);
      }

      void SimBuildingElementProxy::
      Inclination (const Inclination_optional& x)
      {
        this->Inclination_ = x;
      }

      const SimBuildingElementProxy::InletDiameter_optional& SimBuildingElementProxy::
      InletDiameter () const
      {
        return this->InletDiameter_;
      }

      SimBuildingElementProxy::InletDiameter_optional& SimBuildingElementProxy::
      InletDiameter ()
      {
        return this->InletDiameter_;
      }

      void SimBuildingElementProxy::
      InletDiameter (const InletDiameter_type& x)
      {
        this->InletDiameter_.set (x);
      }

      void SimBuildingElementProxy::
      InletDiameter (const InletDiameter_optional& x)
      {
        this->InletDiameter_ = x;
      }

      const SimBuildingElementProxy::InletRadius_optional& SimBuildingElementProxy::
      InletRadius () const
      {
        return this->InletRadius_;
      }

      SimBuildingElementProxy::InletRadius_optional& SimBuildingElementProxy::
      InletRadius ()
      {
        return this->InletRadius_;
      }

      void SimBuildingElementProxy::
      InletRadius (const InletRadius_type& x)
      {
        this->InletRadius_.set (x);
      }

      void SimBuildingElementProxy::
      InletRadius (const InletRadius_optional& x)
      {
        this->InletRadius_ = x;
      }

      const SimBuildingElementProxy::Length1_optional& SimBuildingElementProxy::
      Length1 () const
      {
        return this->Length1_;
      }

      SimBuildingElementProxy::Length1_optional& SimBuildingElementProxy::
      Length1 ()
      {
        return this->Length1_;
      }

      void SimBuildingElementProxy::
      Length1 (const Length1_type& x)
      {
        this->Length1_.set (x);
      }

      void SimBuildingElementProxy::
      Length1 (const Length1_optional& x)
      {
        this->Length1_ = x;
      }

      const SimBuildingElementProxy::Length2_optional& SimBuildingElementProxy::
      Length2 () const
      {
        return this->Length2_;
      }

      SimBuildingElementProxy::Length2_optional& SimBuildingElementProxy::
      Length2 ()
      {
        return this->Length2_;
      }

      void SimBuildingElementProxy::
      Length2 (const Length2_type& x)
      {
        this->Length2_.set (x);
      }

      void SimBuildingElementProxy::
      Length2 (const Length2_optional& x)
      {
        this->Length2_ = x;
      }

      const SimBuildingElementProxy::Length3_optional& SimBuildingElementProxy::
      Length3 () const
      {
        return this->Length3_;
      }

      SimBuildingElementProxy::Length3_optional& SimBuildingElementProxy::
      Length3 ()
      {
        return this->Length3_;
      }

      void SimBuildingElementProxy::
      Length3 (const Length3_type& x)
      {
        this->Length3_.set (x);
      }

      void SimBuildingElementProxy::
      Length3 (const Length3_optional& x)
      {
        this->Length3_ = x;
      }

      const SimBuildingElementProxy::Length4_optional& SimBuildingElementProxy::
      Length4 () const
      {
        return this->Length4_;
      }

      SimBuildingElementProxy::Length4_optional& SimBuildingElementProxy::
      Length4 ()
      {
        return this->Length4_;
      }

      void SimBuildingElementProxy::
      Length4 (const Length4_type& x)
      {
        this->Length4_.set (x);
      }

      void SimBuildingElementProxy::
      Length4 (const Length4_optional& x)
      {
        this->Length4_ = x;
      }

      const SimBuildingElementProxy::Length5_optional& SimBuildingElementProxy::
      Length5 () const
      {
        return this->Length5_;
      }

      SimBuildingElementProxy::Length5_optional& SimBuildingElementProxy::
      Length5 ()
      {
        return this->Length5_;
      }

      void SimBuildingElementProxy::
      Length5 (const Length5_type& x)
      {
        this->Length5_.set (x);
      }

      void SimBuildingElementProxy::
      Length5 (const Length5_optional& x)
      {
        this->Length5_ = x;
      }

      const SimBuildingElementProxy::Length6_optional& SimBuildingElementProxy::
      Length6 () const
      {
        return this->Length6_;
      }

      SimBuildingElementProxy::Length6_optional& SimBuildingElementProxy::
      Length6 ()
      {
        return this->Length6_;
      }

      void SimBuildingElementProxy::
      Length6 (const Length6_type& x)
      {
        this->Length6_.set (x);
      }

      void SimBuildingElementProxy::
      Length6 (const Length6_optional& x)
      {
        this->Length6_ = x;
      }

      const SimBuildingElementProxy::Length7_optional& SimBuildingElementProxy::
      Length7 () const
      {
        return this->Length7_;
      }

      SimBuildingElementProxy::Length7_optional& SimBuildingElementProxy::
      Length7 ()
      {
        return this->Length7_;
      }

      void SimBuildingElementProxy::
      Length7 (const Length7_type& x)
      {
        this->Length7_.set (x);
      }

      void SimBuildingElementProxy::
      Length7 (const Length7_optional& x)
      {
        this->Length7_ = x;
      }

      const SimBuildingElementProxy::Length8_optional& SimBuildingElementProxy::
      Length8 () const
      {
        return this->Length8_;
      }

      SimBuildingElementProxy::Length8_optional& SimBuildingElementProxy::
      Length8 ()
      {
        return this->Length8_;
      }

      void SimBuildingElementProxy::
      Length8 (const Length8_type& x)
      {
        this->Length8_.set (x);
      }

      void SimBuildingElementProxy::
      Length8 (const Length8_optional& x)
      {
        this->Length8_ = x;
      }

      const SimBuildingElementProxy::Length9_optional& SimBuildingElementProxy::
      Length9 () const
      {
        return this->Length9_;
      }

      SimBuildingElementProxy::Length9_optional& SimBuildingElementProxy::
      Length9 ()
      {
        return this->Length9_;
      }

      void SimBuildingElementProxy::
      Length9 (const Length9_type& x)
      {
        this->Length9_.set (x);
      }

      void SimBuildingElementProxy::
      Length9 (const Length9_optional& x)
      {
        this->Length9_ = x;
      }

      const SimBuildingElementProxy::Length10_optional& SimBuildingElementProxy::
      Length10 () const
      {
        return this->Length10_;
      }

      SimBuildingElementProxy::Length10_optional& SimBuildingElementProxy::
      Length10 ()
      {
        return this->Length10_;
      }

      void SimBuildingElementProxy::
      Length10 (const Length10_type& x)
      {
        this->Length10_.set (x);
      }

      void SimBuildingElementProxy::
      Length10 (const Length10_optional& x)
      {
        this->Length10_ = x;
      }

      const SimBuildingElementProxy::Length11_optional& SimBuildingElementProxy::
      Length11 () const
      {
        return this->Length11_;
      }

      SimBuildingElementProxy::Length11_optional& SimBuildingElementProxy::
      Length11 ()
      {
        return this->Length11_;
      }

      void SimBuildingElementProxy::
      Length11 (const Length11_type& x)
      {
        this->Length11_.set (x);
      }

      void SimBuildingElementProxy::
      Length11 (const Length11_optional& x)
      {
        this->Length11_ = x;
      }

      const SimBuildingElementProxy::Length12_optional& SimBuildingElementProxy::
      Length12 () const
      {
        return this->Length12_;
      }

      SimBuildingElementProxy::Length12_optional& SimBuildingElementProxy::
      Length12 ()
      {
        return this->Length12_;
      }

      void SimBuildingElementProxy::
      Length12 (const Length12_type& x)
      {
        this->Length12_.set (x);
      }

      void SimBuildingElementProxy::
      Length12 (const Length12_optional& x)
      {
        this->Length12_ = x;
      }

      const SimBuildingElementProxy::Length13_optional& SimBuildingElementProxy::
      Length13 () const
      {
        return this->Length13_;
      }

      SimBuildingElementProxy::Length13_optional& SimBuildingElementProxy::
      Length13 ()
      {
        return this->Length13_;
      }

      void SimBuildingElementProxy::
      Length13 (const Length13_type& x)
      {
        this->Length13_.set (x);
      }

      void SimBuildingElementProxy::
      Length13 (const Length13_optional& x)
      {
        this->Length13_ = x;
      }

      const SimBuildingElementProxy::Level_optional& SimBuildingElementProxy::
      Level () const
      {
        return this->Level_;
      }

      SimBuildingElementProxy::Level_optional& SimBuildingElementProxy::
      Level ()
      {
        return this->Level_;
      }

      void SimBuildingElementProxy::
      Level (const Level_type& x)
      {
        this->Level_.set (x);
      }

      void SimBuildingElementProxy::
      Level (const Level_optional& x)
      {
        this->Level_ = x;
      }

      void SimBuildingElementProxy::
      Level (::std::auto_ptr< Level_type > x)
      {
        this->Level_.set (x);
      }

      const SimBuildingElementProxy::LoadClassification_optional& SimBuildingElementProxy::
      LoadClassification () const
      {
        return this->LoadClassification_;
      }

      SimBuildingElementProxy::LoadClassification_optional& SimBuildingElementProxy::
      LoadClassification ()
      {
        return this->LoadClassification_;
      }

      void SimBuildingElementProxy::
      LoadClassification (const LoadClassification_type& x)
      {
        this->LoadClassification_.set (x);
      }

      void SimBuildingElementProxy::
      LoadClassification (const LoadClassification_optional& x)
      {
        this->LoadClassification_ = x;
      }

      void SimBuildingElementProxy::
      LoadClassification (::std::auto_ptr< LoadClassification_type > x)
      {
        this->LoadClassification_.set (x);
      }

      const SimBuildingElementProxy::MakeUpWaterFlow_optional& SimBuildingElementProxy::
      MakeUpWaterFlow () const
      {
        return this->MakeUpWaterFlow_;
      }

      SimBuildingElementProxy::MakeUpWaterFlow_optional& SimBuildingElementProxy::
      MakeUpWaterFlow ()
      {
        return this->MakeUpWaterFlow_;
      }

      void SimBuildingElementProxy::
      MakeUpWaterFlow (const MakeUpWaterFlow_type& x)
      {
        this->MakeUpWaterFlow_.set (x);
      }

      void SimBuildingElementProxy::
      MakeUpWaterFlow (const MakeUpWaterFlow_optional& x)
      {
        this->MakeUpWaterFlow_ = x;
      }

      const SimBuildingElementProxy::MakeUpWaterPressureDrop_optional& SimBuildingElementProxy::
      MakeUpWaterPressureDrop () const
      {
        return this->MakeUpWaterPressureDrop_;
      }

      SimBuildingElementProxy::MakeUpWaterPressureDrop_optional& SimBuildingElementProxy::
      MakeUpWaterPressureDrop ()
      {
        return this->MakeUpWaterPressureDrop_;
      }

      void SimBuildingElementProxy::
      MakeUpWaterPressureDrop (const MakeUpWaterPressureDrop_type& x)
      {
        this->MakeUpWaterPressureDrop_.set (x);
      }

      void SimBuildingElementProxy::
      MakeUpWaterPressureDrop (const MakeUpWaterPressureDrop_optional& x)
      {
        this->MakeUpWaterPressureDrop_ = x;
      }

      const SimBuildingElementProxy::MakeUpWaterRadius_optional& SimBuildingElementProxy::
      MakeUpWaterRadius () const
      {
        return this->MakeUpWaterRadius_;
      }

      SimBuildingElementProxy::MakeUpWaterRadius_optional& SimBuildingElementProxy::
      MakeUpWaterRadius ()
      {
        return this->MakeUpWaterRadius_;
      }

      void SimBuildingElementProxy::
      MakeUpWaterRadius (const MakeUpWaterRadius_type& x)
      {
        this->MakeUpWaterRadius_.set (x);
      }

      void SimBuildingElementProxy::
      MakeUpWaterRadius (const MakeUpWaterRadius_optional& x)
      {
        this->MakeUpWaterRadius_ = x;
      }

      const SimBuildingElementProxy::ManufacturerArticleNumber_optional& SimBuildingElementProxy::
      ManufacturerArticleNumber () const
      {
        return this->ManufacturerArticleNumber_;
      }

      SimBuildingElementProxy::ManufacturerArticleNumber_optional& SimBuildingElementProxy::
      ManufacturerArticleNumber ()
      {
        return this->ManufacturerArticleNumber_;
      }

      void SimBuildingElementProxy::
      ManufacturerArticleNumber (const ManufacturerArticleNumber_type& x)
      {
        this->ManufacturerArticleNumber_.set (x);
      }

      void SimBuildingElementProxy::
      ManufacturerArticleNumber (const ManufacturerArticleNumber_optional& x)
      {
        this->ManufacturerArticleNumber_ = x;
      }

      void SimBuildingElementProxy::
      ManufacturerArticleNumber (::std::auto_ptr< ManufacturerArticleNumber_type > x)
      {
        this->ManufacturerArticleNumber_.set (x);
      }

      const SimBuildingElementProxy::ManufacturerModelName_optional& SimBuildingElementProxy::
      ManufacturerModelName () const
      {
        return this->ManufacturerModelName_;
      }

      SimBuildingElementProxy::ManufacturerModelName_optional& SimBuildingElementProxy::
      ManufacturerModelName ()
      {
        return this->ManufacturerModelName_;
      }

      void SimBuildingElementProxy::
      ManufacturerModelName (const ManufacturerModelName_type& x)
      {
        this->ManufacturerModelName_.set (x);
      }

      void SimBuildingElementProxy::
      ManufacturerModelName (const ManufacturerModelName_optional& x)
      {
        this->ManufacturerModelName_ = x;
      }

      void SimBuildingElementProxy::
      ManufacturerModelName (::std::auto_ptr< ManufacturerModelName_type > x)
      {
        this->ManufacturerModelName_.set (x);
      }

      const SimBuildingElementProxy::ManufacturerModelNumber_optional& SimBuildingElementProxy::
      ManufacturerModelNumber () const
      {
        return this->ManufacturerModelNumber_;
      }

      SimBuildingElementProxy::ManufacturerModelNumber_optional& SimBuildingElementProxy::
      ManufacturerModelNumber ()
      {
        return this->ManufacturerModelNumber_;
      }

      void SimBuildingElementProxy::
      ManufacturerModelNumber (const ManufacturerModelNumber_type& x)
      {
        this->ManufacturerModelNumber_.set (x);
      }

      void SimBuildingElementProxy::
      ManufacturerModelNumber (const ManufacturerModelNumber_optional& x)
      {
        this->ManufacturerModelNumber_ = x;
      }

      void SimBuildingElementProxy::
      ManufacturerModelNumber (::std::auto_ptr< ManufacturerModelNumber_type > x)
      {
        this->ManufacturerModelNumber_.set (x);
      }

      const SimBuildingElementProxy::ManufacturerName_optional& SimBuildingElementProxy::
      ManufacturerName () const
      {
        return this->ManufacturerName_;
      }

      SimBuildingElementProxy::ManufacturerName_optional& SimBuildingElementProxy::
      ManufacturerName ()
      {
        return this->ManufacturerName_;
      }

      void SimBuildingElementProxy::
      ManufacturerName (const ManufacturerName_type& x)
      {
        this->ManufacturerName_.set (x);
      }

      void SimBuildingElementProxy::
      ManufacturerName (const ManufacturerName_optional& x)
      {
        this->ManufacturerName_ = x;
      }

      void SimBuildingElementProxy::
      ManufacturerName (::std::auto_ptr< ManufacturerName_type > x)
      {
        this->ManufacturerName_.set (x);
      }

      const SimBuildingElementProxy::ManufacturerYearofProduction_optional& SimBuildingElementProxy::
      ManufacturerYearofProduction () const
      {
        return this->ManufacturerYearofProduction_;
      }

      SimBuildingElementProxy::ManufacturerYearofProduction_optional& SimBuildingElementProxy::
      ManufacturerYearofProduction ()
      {
        return this->ManufacturerYearofProduction_;
      }

      void SimBuildingElementProxy::
      ManufacturerYearofProduction (const ManufacturerYearofProduction_type& x)
      {
        this->ManufacturerYearofProduction_.set (x);
      }

      void SimBuildingElementProxy::
      ManufacturerYearofProduction (const ManufacturerYearofProduction_optional& x)
      {
        this->ManufacturerYearofProduction_ = x;
      }

      void SimBuildingElementProxy::
      ManufacturerYearofProduction (::std::auto_ptr< ManufacturerYearofProduction_type > x)
      {
        this->ManufacturerYearofProduction_.set (x);
      }

      const SimBuildingElementProxy::Mark_optional& SimBuildingElementProxy::
      Mark () const
      {
        return this->Mark_;
      }

      SimBuildingElementProxy::Mark_optional& SimBuildingElementProxy::
      Mark ()
      {
        return this->Mark_;
      }

      void SimBuildingElementProxy::
      Mark (const Mark_type& x)
      {
        this->Mark_.set (x);
      }

      void SimBuildingElementProxy::
      Mark (const Mark_optional& x)
      {
        this->Mark_ = x;
      }

      void SimBuildingElementProxy::
      Mark (::std::auto_ptr< Mark_type > x)
      {
        this->Mark_.set (x);
      }

      const SimBuildingElementProxy::Material_optional& SimBuildingElementProxy::
      Material () const
      {
        return this->Material_;
      }

      SimBuildingElementProxy::Material_optional& SimBuildingElementProxy::
      Material ()
      {
        return this->Material_;
      }

      void SimBuildingElementProxy::
      Material (const Material_type& x)
      {
        this->Material_.set (x);
      }

      void SimBuildingElementProxy::
      Material (const Material_optional& x)
      {
        this->Material_ = x;
      }

      void SimBuildingElementProxy::
      Material (::std::auto_ptr< Material_type > x)
      {
        this->Material_.set (x);
      }

      const SimBuildingElementProxy::Max1PoleBreakers_optional& SimBuildingElementProxy::
      Max1PoleBreakers () const
      {
        return this->Max1PoleBreakers_;
      }

      SimBuildingElementProxy::Max1PoleBreakers_optional& SimBuildingElementProxy::
      Max1PoleBreakers ()
      {
        return this->Max1PoleBreakers_;
      }

      void SimBuildingElementProxy::
      Max1PoleBreakers (const Max1PoleBreakers_type& x)
      {
        this->Max1PoleBreakers_.set (x);
      }

      void SimBuildingElementProxy::
      Max1PoleBreakers (const Max1PoleBreakers_optional& x)
      {
        this->Max1PoleBreakers_ = x;
      }

      const SimBuildingElementProxy::MaxFlow_optional& SimBuildingElementProxy::
      MaxFlow () const
      {
        return this->MaxFlow_;
      }

      SimBuildingElementProxy::MaxFlow_optional& SimBuildingElementProxy::
      MaxFlow ()
      {
        return this->MaxFlow_;
      }

      void SimBuildingElementProxy::
      MaxFlow (const MaxFlow_type& x)
      {
        this->MaxFlow_.set (x);
      }

      void SimBuildingElementProxy::
      MaxFlow (const MaxFlow_optional& x)
      {
        this->MaxFlow_ = x;
      }

      const SimBuildingElementProxy::MinFlow_optional& SimBuildingElementProxy::
      MinFlow () const
      {
        return this->MinFlow_;
      }

      SimBuildingElementProxy::MinFlow_optional& SimBuildingElementProxy::
      MinFlow ()
      {
        return this->MinFlow_;
      }

      void SimBuildingElementProxy::
      MinFlow (const MinFlow_type& x)
      {
        this->MinFlow_.set (x);
      }

      void SimBuildingElementProxy::
      MinFlow (const MinFlow_optional& x)
      {
        this->MinFlow_ = x;
      }

      const SimBuildingElementProxy::Model_optional& SimBuildingElementProxy::
      Model () const
      {
        return this->Model_;
      }

      SimBuildingElementProxy::Model_optional& SimBuildingElementProxy::
      Model ()
      {
        return this->Model_;
      }

      void SimBuildingElementProxy::
      Model (const Model_type& x)
      {
        this->Model_.set (x);
      }

      void SimBuildingElementProxy::
      Model (const Model_optional& x)
      {
        this->Model_ = x;
      }

      void SimBuildingElementProxy::
      Model (::std::auto_ptr< Model_type > x)
      {
        this->Model_.set (x);
      }

      const SimBuildingElementProxy::MotorHP_optional& SimBuildingElementProxy::
      MotorHP () const
      {
        return this->MotorHP_;
      }

      SimBuildingElementProxy::MotorHP_optional& SimBuildingElementProxy::
      MotorHP ()
      {
        return this->MotorHP_;
      }

      void SimBuildingElementProxy::
      MotorHP (const MotorHP_type& x)
      {
        this->MotorHP_.set (x);
      }

      void SimBuildingElementProxy::
      MotorHP (const MotorHP_optional& x)
      {
        this->MotorHP_ = x;
      }

      const SimBuildingElementProxy::NumberOfFans_optional& SimBuildingElementProxy::
      NumberOfFans () const
      {
        return this->NumberOfFans_;
      }

      SimBuildingElementProxy::NumberOfFans_optional& SimBuildingElementProxy::
      NumberOfFans ()
      {
        return this->NumberOfFans_;
      }

      void SimBuildingElementProxy::
      NumberOfFans (const NumberOfFans_type& x)
      {
        this->NumberOfFans_.set (x);
      }

      void SimBuildingElementProxy::
      NumberOfFans (const NumberOfFans_optional& x)
      {
        this->NumberOfFans_ = x;
      }

      const SimBuildingElementProxy::NumberOfPoles_optional& SimBuildingElementProxy::
      NumberOfPoles () const
      {
        return this->NumberOfPoles_;
      }

      SimBuildingElementProxy::NumberOfPoles_optional& SimBuildingElementProxy::
      NumberOfPoles ()
      {
        return this->NumberOfPoles_;
      }

      void SimBuildingElementProxy::
      NumberOfPoles (const NumberOfPoles_type& x)
      {
        this->NumberOfPoles_.set (x);
      }

      void SimBuildingElementProxy::
      NumberOfPoles (const NumberOfPoles_optional& x)
      {
        this->NumberOfPoles_ = x;
      }

      const SimBuildingElementProxy::ObjectClassName_optional& SimBuildingElementProxy::
      ObjectClassName () const
      {
        return this->ObjectClassName_;
      }

      SimBuildingElementProxy::ObjectClassName_optional& SimBuildingElementProxy::
      ObjectClassName ()
      {
        return this->ObjectClassName_;
      }

      void SimBuildingElementProxy::
      ObjectClassName (const ObjectClassName_type& x)
      {
        this->ObjectClassName_.set (x);
      }

      void SimBuildingElementProxy::
      ObjectClassName (const ObjectClassName_optional& x)
      {
        this->ObjectClassName_ = x;
      }

      void SimBuildingElementProxy::
      ObjectClassName (::std::auto_ptr< ObjectClassName_type > x)
      {
        this->ObjectClassName_.set (x);
      }

      const SimBuildingElementProxy::Offset_optional& SimBuildingElementProxy::
      Offset () const
      {
        return this->Offset_;
      }

      SimBuildingElementProxy::Offset_optional& SimBuildingElementProxy::
      Offset ()
      {
        return this->Offset_;
      }

      void SimBuildingElementProxy::
      Offset (const Offset_type& x)
      {
        this->Offset_.set (x);
      }

      void SimBuildingElementProxy::
      Offset (const Offset_optional& x)
      {
        this->Offset_ = x;
      }

      const SimBuildingElementProxy::OmniclassNumber_optional& SimBuildingElementProxy::
      OmniclassNumber () const
      {
        return this->OmniclassNumber_;
      }

      SimBuildingElementProxy::OmniclassNumber_optional& SimBuildingElementProxy::
      OmniclassNumber ()
      {
        return this->OmniclassNumber_;
      }

      void SimBuildingElementProxy::
      OmniclassNumber (const OmniclassNumber_type& x)
      {
        this->OmniclassNumber_.set (x);
      }

      void SimBuildingElementProxy::
      OmniclassNumber (const OmniclassNumber_optional& x)
      {
        this->OmniclassNumber_ = x;
      }

      void SimBuildingElementProxy::
      OmniclassNumber (::std::auto_ptr< OmniclassNumber_type > x)
      {
        this->OmniclassNumber_.set (x);
      }

      const SimBuildingElementProxy::OmniclassTitle_optional& SimBuildingElementProxy::
      OmniclassTitle () const
      {
        return this->OmniclassTitle_;
      }

      SimBuildingElementProxy::OmniclassTitle_optional& SimBuildingElementProxy::
      OmniclassTitle ()
      {
        return this->OmniclassTitle_;
      }

      void SimBuildingElementProxy::
      OmniclassTitle (const OmniclassTitle_type& x)
      {
        this->OmniclassTitle_.set (x);
      }

      void SimBuildingElementProxy::
      OmniclassTitle (const OmniclassTitle_optional& x)
      {
        this->OmniclassTitle_ = x;
      }

      void SimBuildingElementProxy::
      OmniclassTitle (::std::auto_ptr< OmniclassTitle_type > x)
      {
        this->OmniclassTitle_.set (x);
      }

      const SimBuildingElementProxy::OutletDiameter_optional& SimBuildingElementProxy::
      OutletDiameter () const
      {
        return this->OutletDiameter_;
      }

      SimBuildingElementProxy::OutletDiameter_optional& SimBuildingElementProxy::
      OutletDiameter ()
      {
        return this->OutletDiameter_;
      }

      void SimBuildingElementProxy::
      OutletDiameter (const OutletDiameter_type& x)
      {
        this->OutletDiameter_.set (x);
      }

      void SimBuildingElementProxy::
      OutletDiameter (const OutletDiameter_optional& x)
      {
        this->OutletDiameter_ = x;
      }

      const SimBuildingElementProxy::OutletRadius_optional& SimBuildingElementProxy::
      OutletRadius () const
      {
        return this->OutletRadius_;
      }

      SimBuildingElementProxy::OutletRadius_optional& SimBuildingElementProxy::
      OutletRadius ()
      {
        return this->OutletRadius_;
      }

      void SimBuildingElementProxy::
      OutletRadius (const OutletRadius_type& x)
      {
        this->OutletRadius_.set (x);
      }

      void SimBuildingElementProxy::
      OutletRadius (const OutletRadius_optional& x)
      {
        this->OutletRadius_ = x;
      }

      const SimBuildingElementProxy::OverallHeight_optional& SimBuildingElementProxy::
      OverallHeight () const
      {
        return this->OverallHeight_;
      }

      SimBuildingElementProxy::OverallHeight_optional& SimBuildingElementProxy::
      OverallHeight ()
      {
        return this->OverallHeight_;
      }

      void SimBuildingElementProxy::
      OverallHeight (const OverallHeight_type& x)
      {
        this->OverallHeight_.set (x);
      }

      void SimBuildingElementProxy::
      OverallHeight (const OverallHeight_optional& x)
      {
        this->OverallHeight_ = x;
      }

      const SimBuildingElementProxy::OverallLength_optional& SimBuildingElementProxy::
      OverallLength () const
      {
        return this->OverallLength_;
      }

      SimBuildingElementProxy::OverallLength_optional& SimBuildingElementProxy::
      OverallLength ()
      {
        return this->OverallLength_;
      }

      void SimBuildingElementProxy::
      OverallLength (const OverallLength_type& x)
      {
        this->OverallLength_.set (x);
      }

      void SimBuildingElementProxy::
      OverallLength (const OverallLength_optional& x)
      {
        this->OverallLength_ = x;
      }

      const SimBuildingElementProxy::OverallWidth_optional& SimBuildingElementProxy::
      OverallWidth () const
      {
        return this->OverallWidth_;
      }

      SimBuildingElementProxy::OverallWidth_optional& SimBuildingElementProxy::
      OverallWidth ()
      {
        return this->OverallWidth_;
      }

      void SimBuildingElementProxy::
      OverallWidth (const OverallWidth_type& x)
      {
        this->OverallWidth_.set (x);
      }

      void SimBuildingElementProxy::
      OverallWidth (const OverallWidth_optional& x)
      {
        this->OverallWidth_ = x;
      }

      const SimBuildingElementProxy::PanelHeight_optional& SimBuildingElementProxy::
      PanelHeight () const
      {
        return this->PanelHeight_;
      }

      SimBuildingElementProxy::PanelHeight_optional& SimBuildingElementProxy::
      PanelHeight ()
      {
        return this->PanelHeight_;
      }

      void SimBuildingElementProxy::
      PanelHeight (const PanelHeight_type& x)
      {
        this->PanelHeight_.set (x);
      }

      void SimBuildingElementProxy::
      PanelHeight (const PanelHeight_optional& x)
      {
        this->PanelHeight_ = x;
      }

      const SimBuildingElementProxy::Partshape_optional& SimBuildingElementProxy::
      Partshape () const
      {
        return this->Partshape_;
      }

      SimBuildingElementProxy::Partshape_optional& SimBuildingElementProxy::
      Partshape ()
      {
        return this->Partshape_;
      }

      void SimBuildingElementProxy::
      Partshape (const Partshape_type& x)
      {
        this->Partshape_.set (x);
      }

      void SimBuildingElementProxy::
      Partshape (const Partshape_optional& x)
      {
        this->Partshape_ = x;
      }

      void SimBuildingElementProxy::
      Partshape (::std::auto_ptr< Partshape_type > x)
      {
        this->Partshape_.set (x);
      }

      const SimBuildingElementProxy::PhaseCreated_optional& SimBuildingElementProxy::
      PhaseCreated () const
      {
        return this->PhaseCreated_;
      }

      SimBuildingElementProxy::PhaseCreated_optional& SimBuildingElementProxy::
      PhaseCreated ()
      {
        return this->PhaseCreated_;
      }

      void SimBuildingElementProxy::
      PhaseCreated (const PhaseCreated_type& x)
      {
        this->PhaseCreated_.set (x);
      }

      void SimBuildingElementProxy::
      PhaseCreated (const PhaseCreated_optional& x)
      {
        this->PhaseCreated_ = x;
      }

      void SimBuildingElementProxy::
      PhaseCreated (::std::auto_ptr< PhaseCreated_type > x)
      {
        this->PhaseCreated_.set (x);
      }

      const SimBuildingElementProxy::PipeRadius_optional& SimBuildingElementProxy::
      PipeRadius () const
      {
        return this->PipeRadius_;
      }

      SimBuildingElementProxy::PipeRadius_optional& SimBuildingElementProxy::
      PipeRadius ()
      {
        return this->PipeRadius_;
      }

      void SimBuildingElementProxy::
      PipeRadius (const PipeRadius_type& x)
      {
        this->PipeRadius_.set (x);
      }

      void SimBuildingElementProxy::
      PipeRadius (const PipeRadius_optional& x)
      {
        this->PipeRadius_ = x;
      }

      const SimBuildingElementProxy::PrimaryNumberofPoles_optional& SimBuildingElementProxy::
      PrimaryNumberofPoles () const
      {
        return this->PrimaryNumberofPoles_;
      }

      SimBuildingElementProxy::PrimaryNumberofPoles_optional& SimBuildingElementProxy::
      PrimaryNumberofPoles ()
      {
        return this->PrimaryNumberofPoles_;
      }

      void SimBuildingElementProxy::
      PrimaryNumberofPoles (const PrimaryNumberofPoles_type& x)
      {
        this->PrimaryNumberofPoles_.set (x);
      }

      void SimBuildingElementProxy::
      PrimaryNumberofPoles (const PrimaryNumberofPoles_optional& x)
      {
        this->PrimaryNumberofPoles_ = x;
      }

      const SimBuildingElementProxy::PrimaryVoltage_optional& SimBuildingElementProxy::
      PrimaryVoltage () const
      {
        return this->PrimaryVoltage_;
      }

      SimBuildingElementProxy::PrimaryVoltage_optional& SimBuildingElementProxy::
      PrimaryVoltage ()
      {
        return this->PrimaryVoltage_;
      }

      void SimBuildingElementProxy::
      PrimaryVoltage (const PrimaryVoltage_type& x)
      {
        this->PrimaryVoltage_.set (x);
      }

      void SimBuildingElementProxy::
      PrimaryVoltage (const PrimaryVoltage_optional& x)
      {
        this->PrimaryVoltage_ = x;
      }

      const SimBuildingElementProxy::PumpHeight_optional& SimBuildingElementProxy::
      PumpHeight () const
      {
        return this->PumpHeight_;
      }

      SimBuildingElementProxy::PumpHeight_optional& SimBuildingElementProxy::
      PumpHeight ()
      {
        return this->PumpHeight_;
      }

      void SimBuildingElementProxy::
      PumpHeight (const PumpHeight_type& x)
      {
        this->PumpHeight_.set (x);
      }

      void SimBuildingElementProxy::
      PumpHeight (const PumpHeight_optional& x)
      {
        this->PumpHeight_ = x;
      }

      const SimBuildingElementProxy::PumpLength_optional& SimBuildingElementProxy::
      PumpLength () const
      {
        return this->PumpLength_;
      }

      SimBuildingElementProxy::PumpLength_optional& SimBuildingElementProxy::
      PumpLength ()
      {
        return this->PumpLength_;
      }

      void SimBuildingElementProxy::
      PumpLength (const PumpLength_type& x)
      {
        this->PumpLength_.set (x);
      }

      void SimBuildingElementProxy::
      PumpLength (const PumpLength_optional& x)
      {
        this->PumpLength_ = x;
      }

      const SimBuildingElementProxy::PumpWidth_optional& SimBuildingElementProxy::
      PumpWidth () const
      {
        return this->PumpWidth_;
      }

      SimBuildingElementProxy::PumpWidth_optional& SimBuildingElementProxy::
      PumpWidth ()
      {
        return this->PumpWidth_;
      }

      void SimBuildingElementProxy::
      PumpWidth (const PumpWidth_type& x)
      {
        this->PumpWidth_.set (x);
      }

      void SimBuildingElementProxy::
      PumpWidth (const PumpWidth_optional& x)
      {
        this->PumpWidth_ = x;
      }

      const SimBuildingElementProxy::Radius1_optional& SimBuildingElementProxy::
      Radius1 () const
      {
        return this->Radius1_;
      }

      SimBuildingElementProxy::Radius1_optional& SimBuildingElementProxy::
      Radius1 ()
      {
        return this->Radius1_;
      }

      void SimBuildingElementProxy::
      Radius1 (const Radius1_type& x)
      {
        this->Radius1_.set (x);
      }

      void SimBuildingElementProxy::
      Radius1 (const Radius1_optional& x)
      {
        this->Radius1_ = x;
      }

      const SimBuildingElementProxy::Radius2_optional& SimBuildingElementProxy::
      Radius2 () const
      {
        return this->Radius2_;
      }

      SimBuildingElementProxy::Radius2_optional& SimBuildingElementProxy::
      Radius2 ()
      {
        return this->Radius2_;
      }

      void SimBuildingElementProxy::
      Radius2 (const Radius2_type& x)
      {
        this->Radius2_.set (x);
      }

      void SimBuildingElementProxy::
      Radius2 (const Radius2_optional& x)
      {
        this->Radius2_ = x;
      }

      const SimBuildingElementProxy::Radius3_optional& SimBuildingElementProxy::
      Radius3 () const
      {
        return this->Radius3_;
      }

      SimBuildingElementProxy::Radius3_optional& SimBuildingElementProxy::
      Radius3 ()
      {
        return this->Radius3_;
      }

      void SimBuildingElementProxy::
      Radius3 (const Radius3_type& x)
      {
        this->Radius3_.set (x);
      }

      void SimBuildingElementProxy::
      Radius3 (const Radius3_optional& x)
      {
        this->Radius3_ = x;
      }

      const SimBuildingElementProxy::Radius4_optional& SimBuildingElementProxy::
      Radius4 () const
      {
        return this->Radius4_;
      }

      SimBuildingElementProxy::Radius4_optional& SimBuildingElementProxy::
      Radius4 ()
      {
        return this->Radius4_;
      }

      void SimBuildingElementProxy::
      Radius4 (const Radius4_type& x)
      {
        this->Radius4_.set (x);
      }

      void SimBuildingElementProxy::
      Radius4 (const Radius4_optional& x)
      {
        this->Radius4_ = x;
      }

      const SimBuildingElementProxy::Radius5_optional& SimBuildingElementProxy::
      Radius5 () const
      {
        return this->Radius5_;
      }

      SimBuildingElementProxy::Radius5_optional& SimBuildingElementProxy::
      Radius5 ()
      {
        return this->Radius5_;
      }

      void SimBuildingElementProxy::
      Radius5 (const Radius5_type& x)
      {
        this->Radius5_.set (x);
      }

      void SimBuildingElementProxy::
      Radius5 (const Radius5_optional& x)
      {
        this->Radius5_ = x;
      }

      const SimBuildingElementProxy::Radius6_optional& SimBuildingElementProxy::
      Radius6 () const
      {
        return this->Radius6_;
      }

      SimBuildingElementProxy::Radius6_optional& SimBuildingElementProxy::
      Radius6 ()
      {
        return this->Radius6_;
      }

      void SimBuildingElementProxy::
      Radius6 (const Radius6_type& x)
      {
        this->Radius6_.set (x);
      }

      void SimBuildingElementProxy::
      Radius6 (const Radius6_optional& x)
      {
        this->Radius6_ = x;
      }

      const SimBuildingElementProxy::Reference_optional& SimBuildingElementProxy::
      Reference () const
      {
        return this->Reference_;
      }

      SimBuildingElementProxy::Reference_optional& SimBuildingElementProxy::
      Reference ()
      {
        return this->Reference_;
      }

      void SimBuildingElementProxy::
      Reference (const Reference_type& x)
      {
        this->Reference_.set (x);
      }

      void SimBuildingElementProxy::
      Reference (const Reference_optional& x)
      {
        this->Reference_ = x;
      }

      void SimBuildingElementProxy::
      Reference (::std::auto_ptr< Reference_type > x)
      {
        this->Reference_.set (x);
      }

      const SimBuildingElementProxy::Reflectance_optional& SimBuildingElementProxy::
      Reflectance () const
      {
        return this->Reflectance_;
      }

      SimBuildingElementProxy::Reflectance_optional& SimBuildingElementProxy::
      Reflectance ()
      {
        return this->Reflectance_;
      }

      void SimBuildingElementProxy::
      Reflectance (const Reflectance_type& x)
      {
        this->Reflectance_.set (x);
      }

      void SimBuildingElementProxy::
      Reflectance (const Reflectance_optional& x)
      {
        this->Reflectance_ = x;
      }

      const SimBuildingElementProxy::ReturnAirInletFlow_optional& SimBuildingElementProxy::
      ReturnAirInletFlow () const
      {
        return this->ReturnAirInletFlow_;
      }

      SimBuildingElementProxy::ReturnAirInletFlow_optional& SimBuildingElementProxy::
      ReturnAirInletFlow ()
      {
        return this->ReturnAirInletFlow_;
      }

      void SimBuildingElementProxy::
      ReturnAirInletFlow (const ReturnAirInletFlow_type& x)
      {
        this->ReturnAirInletFlow_.set (x);
      }

      void SimBuildingElementProxy::
      ReturnAirInletFlow (const ReturnAirInletFlow_optional& x)
      {
        this->ReturnAirInletFlow_ = x;
      }

      const SimBuildingElementProxy::ReturnAirInletHeight_optional& SimBuildingElementProxy::
      ReturnAirInletHeight () const
      {
        return this->ReturnAirInletHeight_;
      }

      SimBuildingElementProxy::ReturnAirInletHeight_optional& SimBuildingElementProxy::
      ReturnAirInletHeight ()
      {
        return this->ReturnAirInletHeight_;
      }

      void SimBuildingElementProxy::
      ReturnAirInletHeight (const ReturnAirInletHeight_type& x)
      {
        this->ReturnAirInletHeight_.set (x);
      }

      void SimBuildingElementProxy::
      ReturnAirInletHeight (const ReturnAirInletHeight_optional& x)
      {
        this->ReturnAirInletHeight_ = x;
      }

      const SimBuildingElementProxy::ReturnAirInletWidth_optional& SimBuildingElementProxy::
      ReturnAirInletWidth () const
      {
        return this->ReturnAirInletWidth_;
      }

      SimBuildingElementProxy::ReturnAirInletWidth_optional& SimBuildingElementProxy::
      ReturnAirInletWidth ()
      {
        return this->ReturnAirInletWidth_;
      }

      void SimBuildingElementProxy::
      ReturnAirInletWidth (const ReturnAirInletWidth_type& x)
      {
        this->ReturnAirInletWidth_.set (x);
      }

      void SimBuildingElementProxy::
      ReturnAirInletWidth (const ReturnAirInletWidth_optional& x)
      {
        this->ReturnAirInletWidth_ = x;
      }

      const SimBuildingElementProxy::ReturnDuctHeight_optional& SimBuildingElementProxy::
      ReturnDuctHeight () const
      {
        return this->ReturnDuctHeight_;
      }

      SimBuildingElementProxy::ReturnDuctHeight_optional& SimBuildingElementProxy::
      ReturnDuctHeight ()
      {
        return this->ReturnDuctHeight_;
      }

      void SimBuildingElementProxy::
      ReturnDuctHeight (const ReturnDuctHeight_type& x)
      {
        this->ReturnDuctHeight_.set (x);
      }

      void SimBuildingElementProxy::
      ReturnDuctHeight (const ReturnDuctHeight_optional& x)
      {
        this->ReturnDuctHeight_ = x;
      }

      const SimBuildingElementProxy::ReturnDuctWidth_optional& SimBuildingElementProxy::
      ReturnDuctWidth () const
      {
        return this->ReturnDuctWidth_;
      }

      SimBuildingElementProxy::ReturnDuctWidth_optional& SimBuildingElementProxy::
      ReturnDuctWidth ()
      {
        return this->ReturnDuctWidth_;
      }

      void SimBuildingElementProxy::
      ReturnDuctWidth (const ReturnDuctWidth_type& x)
      {
        this->ReturnDuctWidth_.set (x);
      }

      void SimBuildingElementProxy::
      ReturnDuctWidth (const ReturnDuctWidth_optional& x)
      {
        this->ReturnDuctWidth_ = x;
      }

      const SimBuildingElementProxy::Returnheight_optional& SimBuildingElementProxy::
      Returnheight () const
      {
        return this->Returnheight_;
      }

      SimBuildingElementProxy::Returnheight_optional& SimBuildingElementProxy::
      Returnheight ()
      {
        return this->Returnheight_;
      }

      void SimBuildingElementProxy::
      Returnheight (const Returnheight_type& x)
      {
        this->Returnheight_.set (x);
      }

      void SimBuildingElementProxy::
      Returnheight (const Returnheight_optional& x)
      {
        this->Returnheight_ = x;
      }

      const SimBuildingElementProxy::Returnwidth_optional& SimBuildingElementProxy::
      Returnwidth () const
      {
        return this->Returnwidth_;
      }

      SimBuildingElementProxy::Returnwidth_optional& SimBuildingElementProxy::
      Returnwidth ()
      {
        return this->Returnwidth_;
      }

      void SimBuildingElementProxy::
      Returnwidth (const Returnwidth_type& x)
      {
        this->Returnwidth_.set (x);
      }

      void SimBuildingElementProxy::
      Returnwidth (const Returnwidth_optional& x)
      {
        this->Returnwidth_ = x;
      }

      const SimBuildingElementProxy::ReturnY_Offset_optional& SimBuildingElementProxy::
      ReturnY_Offset () const
      {
        return this->ReturnY_Offset_;
      }

      SimBuildingElementProxy::ReturnY_Offset_optional& SimBuildingElementProxy::
      ReturnY_Offset ()
      {
        return this->ReturnY_Offset_;
      }

      void SimBuildingElementProxy::
      ReturnY_Offset (const ReturnY_Offset_type& x)
      {
        this->ReturnY_Offset_.set (x);
      }

      void SimBuildingElementProxy::
      ReturnY_Offset (const ReturnY_Offset_optional& x)
      {
        this->ReturnY_Offset_ = x;
      }

      const SimBuildingElementProxy::ReturnZ_Offset_optional& SimBuildingElementProxy::
      ReturnZ_Offset () const
      {
        return this->ReturnZ_Offset_;
      }

      SimBuildingElementProxy::ReturnZ_Offset_optional& SimBuildingElementProxy::
      ReturnZ_Offset ()
      {
        return this->ReturnZ_Offset_;
      }

      void SimBuildingElementProxy::
      ReturnZ_Offset (const ReturnZ_Offset_type& x)
      {
        this->ReturnZ_Offset_.set (x);
      }

      void SimBuildingElementProxy::
      ReturnZ_Offset (const ReturnZ_Offset_optional& x)
      {
        this->ReturnZ_Offset_ = x;
      }

      const SimBuildingElementProxy::Roughness_optional& SimBuildingElementProxy::
      Roughness () const
      {
        return this->Roughness_;
      }

      SimBuildingElementProxy::Roughness_optional& SimBuildingElementProxy::
      Roughness ()
      {
        return this->Roughness_;
      }

      void SimBuildingElementProxy::
      Roughness (const Roughness_type& x)
      {
        this->Roughness_.set (x);
      }

      void SimBuildingElementProxy::
      Roughness (const Roughness_optional& x)
      {
        this->Roughness_ = x;
      }

      const SimBuildingElementProxy::ShadingDeviceType_optional& SimBuildingElementProxy::
      ShadingDeviceType () const
      {
        return this->ShadingDeviceType_;
      }

      SimBuildingElementProxy::ShadingDeviceType_optional& SimBuildingElementProxy::
      ShadingDeviceType ()
      {
        return this->ShadingDeviceType_;
      }

      void SimBuildingElementProxy::
      ShadingDeviceType (const ShadingDeviceType_type& x)
      {
        this->ShadingDeviceType_.set (x);
      }

      void SimBuildingElementProxy::
      ShadingDeviceType (const ShadingDeviceType_optional& x)
      {
        this->ShadingDeviceType_ = x;
      }

      void SimBuildingElementProxy::
      ShadingDeviceType (::std::auto_ptr< ShadingDeviceType_type > x)
      {
        this->ShadingDeviceType_.set (x);
      }

      const SimBuildingElementProxy::SupplyAirInletDiameter_optional& SimBuildingElementProxy::
      SupplyAirInletDiameter () const
      {
        return this->SupplyAirInletDiameter_;
      }

      SimBuildingElementProxy::SupplyAirInletDiameter_optional& SimBuildingElementProxy::
      SupplyAirInletDiameter ()
      {
        return this->SupplyAirInletDiameter_;
      }

      void SimBuildingElementProxy::
      SupplyAirInletDiameter (const SupplyAirInletDiameter_type& x)
      {
        this->SupplyAirInletDiameter_.set (x);
      }

      void SimBuildingElementProxy::
      SupplyAirInletDiameter (const SupplyAirInletDiameter_optional& x)
      {
        this->SupplyAirInletDiameter_ = x;
      }

      const SimBuildingElementProxy::SupplyAirInletFlow_optional& SimBuildingElementProxy::
      SupplyAirInletFlow () const
      {
        return this->SupplyAirInletFlow_;
      }

      SimBuildingElementProxy::SupplyAirInletFlow_optional& SimBuildingElementProxy::
      SupplyAirInletFlow ()
      {
        return this->SupplyAirInletFlow_;
      }

      void SimBuildingElementProxy::
      SupplyAirInletFlow (const SupplyAirInletFlow_type& x)
      {
        this->SupplyAirInletFlow_.set (x);
      }

      void SimBuildingElementProxy::
      SupplyAirInletFlow (const SupplyAirInletFlow_optional& x)
      {
        this->SupplyAirInletFlow_ = x;
      }

      const SimBuildingElementProxy::SupplyAirInletHeight_optional& SimBuildingElementProxy::
      SupplyAirInletHeight () const
      {
        return this->SupplyAirInletHeight_;
      }

      SimBuildingElementProxy::SupplyAirInletHeight_optional& SimBuildingElementProxy::
      SupplyAirInletHeight ()
      {
        return this->SupplyAirInletHeight_;
      }

      void SimBuildingElementProxy::
      SupplyAirInletHeight (const SupplyAirInletHeight_type& x)
      {
        this->SupplyAirInletHeight_.set (x);
      }

      void SimBuildingElementProxy::
      SupplyAirInletHeight (const SupplyAirInletHeight_optional& x)
      {
        this->SupplyAirInletHeight_ = x;
      }

      const SimBuildingElementProxy::SupplyAirInletRadius_optional& SimBuildingElementProxy::
      SupplyAirInletRadius () const
      {
        return this->SupplyAirInletRadius_;
      }

      SimBuildingElementProxy::SupplyAirInletRadius_optional& SimBuildingElementProxy::
      SupplyAirInletRadius ()
      {
        return this->SupplyAirInletRadius_;
      }

      void SimBuildingElementProxy::
      SupplyAirInletRadius (const SupplyAirInletRadius_type& x)
      {
        this->SupplyAirInletRadius_.set (x);
      }

      void SimBuildingElementProxy::
      SupplyAirInletRadius (const SupplyAirInletRadius_optional& x)
      {
        this->SupplyAirInletRadius_ = x;
      }

      const SimBuildingElementProxy::SupplyAirInletWidth_optional& SimBuildingElementProxy::
      SupplyAirInletWidth () const
      {
        return this->SupplyAirInletWidth_;
      }

      SimBuildingElementProxy::SupplyAirInletWidth_optional& SimBuildingElementProxy::
      SupplyAirInletWidth ()
      {
        return this->SupplyAirInletWidth_;
      }

      void SimBuildingElementProxy::
      SupplyAirInletWidth (const SupplyAirInletWidth_type& x)
      {
        this->SupplyAirInletWidth_.set (x);
      }

      void SimBuildingElementProxy::
      SupplyAirInletWidth (const SupplyAirInletWidth_optional& x)
      {
        this->SupplyAirInletWidth_ = x;
      }

      const SimBuildingElementProxy::SupplyAirOutletFlow_optional& SimBuildingElementProxy::
      SupplyAirOutletFlow () const
      {
        return this->SupplyAirOutletFlow_;
      }

      SimBuildingElementProxy::SupplyAirOutletFlow_optional& SimBuildingElementProxy::
      SupplyAirOutletFlow ()
      {
        return this->SupplyAirOutletFlow_;
      }

      void SimBuildingElementProxy::
      SupplyAirOutletFlow (const SupplyAirOutletFlow_type& x)
      {
        this->SupplyAirOutletFlow_.set (x);
      }

      void SimBuildingElementProxy::
      SupplyAirOutletFlow (const SupplyAirOutletFlow_optional& x)
      {
        this->SupplyAirOutletFlow_ = x;
      }

      const SimBuildingElementProxy::SupplyAirOutletHeight_optional& SimBuildingElementProxy::
      SupplyAirOutletHeight () const
      {
        return this->SupplyAirOutletHeight_;
      }

      SimBuildingElementProxy::SupplyAirOutletHeight_optional& SimBuildingElementProxy::
      SupplyAirOutletHeight ()
      {
        return this->SupplyAirOutletHeight_;
      }

      void SimBuildingElementProxy::
      SupplyAirOutletHeight (const SupplyAirOutletHeight_type& x)
      {
        this->SupplyAirOutletHeight_.set (x);
      }

      void SimBuildingElementProxy::
      SupplyAirOutletHeight (const SupplyAirOutletHeight_optional& x)
      {
        this->SupplyAirOutletHeight_ = x;
      }

      const SimBuildingElementProxy::SupplyAirOutletWidth_optional& SimBuildingElementProxy::
      SupplyAirOutletWidth () const
      {
        return this->SupplyAirOutletWidth_;
      }

      SimBuildingElementProxy::SupplyAirOutletWidth_optional& SimBuildingElementProxy::
      SupplyAirOutletWidth ()
      {
        return this->SupplyAirOutletWidth_;
      }

      void SimBuildingElementProxy::
      SupplyAirOutletWidth (const SupplyAirOutletWidth_type& x)
      {
        this->SupplyAirOutletWidth_.set (x);
      }

      void SimBuildingElementProxy::
      SupplyAirOutletWidth (const SupplyAirOutletWidth_optional& x)
      {
        this->SupplyAirOutletWidth_ = x;
      }

      const SimBuildingElementProxy::SupplyAirPressureDrop_optional& SimBuildingElementProxy::
      SupplyAirPressureDrop () const
      {
        return this->SupplyAirPressureDrop_;
      }

      SimBuildingElementProxy::SupplyAirPressureDrop_optional& SimBuildingElementProxy::
      SupplyAirPressureDrop ()
      {
        return this->SupplyAirPressureDrop_;
      }

      void SimBuildingElementProxy::
      SupplyAirPressureDrop (const SupplyAirPressureDrop_type& x)
      {
        this->SupplyAirPressureDrop_.set (x);
      }

      void SimBuildingElementProxy::
      SupplyAirPressureDrop (const SupplyAirPressureDrop_optional& x)
      {
        this->SupplyAirPressureDrop_ = x;
      }

      const SimBuildingElementProxy::SupplyDuctHeight_optional& SimBuildingElementProxy::
      SupplyDuctHeight () const
      {
        return this->SupplyDuctHeight_;
      }

      SimBuildingElementProxy::SupplyDuctHeight_optional& SimBuildingElementProxy::
      SupplyDuctHeight ()
      {
        return this->SupplyDuctHeight_;
      }

      void SimBuildingElementProxy::
      SupplyDuctHeight (const SupplyDuctHeight_type& x)
      {
        this->SupplyDuctHeight_.set (x);
      }

      void SimBuildingElementProxy::
      SupplyDuctHeight (const SupplyDuctHeight_optional& x)
      {
        this->SupplyDuctHeight_ = x;
      }

      const SimBuildingElementProxy::SupplyDuctWidth_optional& SimBuildingElementProxy::
      SupplyDuctWidth () const
      {
        return this->SupplyDuctWidth_;
      }

      SimBuildingElementProxy::SupplyDuctWidth_optional& SimBuildingElementProxy::
      SupplyDuctWidth ()
      {
        return this->SupplyDuctWidth_;
      }

      void SimBuildingElementProxy::
      SupplyDuctWidth (const SupplyDuctWidth_type& x)
      {
        this->SupplyDuctWidth_.set (x);
      }

      void SimBuildingElementProxy::
      SupplyDuctWidth (const SupplyDuctWidth_optional& x)
      {
        this->SupplyDuctWidth_ = x;
      }

      const SimBuildingElementProxy::Supplyheight_optional& SimBuildingElementProxy::
      Supplyheight () const
      {
        return this->Supplyheight_;
      }

      SimBuildingElementProxy::Supplyheight_optional& SimBuildingElementProxy::
      Supplyheight ()
      {
        return this->Supplyheight_;
      }

      void SimBuildingElementProxy::
      Supplyheight (const Supplyheight_type& x)
      {
        this->Supplyheight_.set (x);
      }

      void SimBuildingElementProxy::
      Supplyheight (const Supplyheight_optional& x)
      {
        this->Supplyheight_ = x;
      }

      const SimBuildingElementProxy::Supplywidth_optional& SimBuildingElementProxy::
      Supplywidth () const
      {
        return this->Supplywidth_;
      }

      SimBuildingElementProxy::Supplywidth_optional& SimBuildingElementProxy::
      Supplywidth ()
      {
        return this->Supplywidth_;
      }

      void SimBuildingElementProxy::
      Supplywidth (const Supplywidth_type& x)
      {
        this->Supplywidth_.set (x);
      }

      void SimBuildingElementProxy::
      Supplywidth (const Supplywidth_optional& x)
      {
        this->Supplywidth_ = x;
      }

      const SimBuildingElementProxy::Supply_ReturnSymbols_optional& SimBuildingElementProxy::
      Supply_ReturnSymbols () const
      {
        return this->Supply_ReturnSymbols_;
      }

      SimBuildingElementProxy::Supply_ReturnSymbols_optional& SimBuildingElementProxy::
      Supply_ReturnSymbols ()
      {
        return this->Supply_ReturnSymbols_;
      }

      void SimBuildingElementProxy::
      Supply_ReturnSymbols (const Supply_ReturnSymbols_type& x)
      {
        this->Supply_ReturnSymbols_.set (x);
      }

      void SimBuildingElementProxy::
      Supply_ReturnSymbols (const Supply_ReturnSymbols_optional& x)
      {
        this->Supply_ReturnSymbols_ = x;
      }

      const SimBuildingElementProxy::SupplyY_Offset_optional& SimBuildingElementProxy::
      SupplyY_Offset () const
      {
        return this->SupplyY_Offset_;
      }

      SimBuildingElementProxy::SupplyY_Offset_optional& SimBuildingElementProxy::
      SupplyY_Offset ()
      {
        return this->SupplyY_Offset_;
      }

      void SimBuildingElementProxy::
      SupplyY_Offset (const SupplyY_Offset_type& x)
      {
        this->SupplyY_Offset_.set (x);
      }

      void SimBuildingElementProxy::
      SupplyY_Offset (const SupplyY_Offset_optional& x)
      {
        this->SupplyY_Offset_ = x;
      }

      const SimBuildingElementProxy::SupplyZ_Offset_optional& SimBuildingElementProxy::
      SupplyZ_Offset () const
      {
        return this->SupplyZ_Offset_;
      }

      SimBuildingElementProxy::SupplyZ_Offset_optional& SimBuildingElementProxy::
      SupplyZ_Offset ()
      {
        return this->SupplyZ_Offset_;
      }

      void SimBuildingElementProxy::
      SupplyZ_Offset (const SupplyZ_Offset_type& x)
      {
        this->SupplyZ_Offset_.set (x);
      }

      void SimBuildingElementProxy::
      SupplyZ_Offset (const SupplyZ_Offset_optional& x)
      {
        this->SupplyZ_Offset_ = x;
      }

      const SimBuildingElementProxy::SystemClassification_optional& SimBuildingElementProxy::
      SystemClassification () const
      {
        return this->SystemClassification_;
      }

      SimBuildingElementProxy::SystemClassification_optional& SimBuildingElementProxy::
      SystemClassification ()
      {
        return this->SystemClassification_;
      }

      void SimBuildingElementProxy::
      SystemClassification (const SystemClassification_type& x)
      {
        this->SystemClassification_.set (x);
      }

      void SimBuildingElementProxy::
      SystemClassification (const SystemClassification_optional& x)
      {
        this->SystemClassification_ = x;
      }

      void SimBuildingElementProxy::
      SystemClassification (::std::auto_ptr< SystemClassification_type > x)
      {
        this->SystemClassification_.set (x);
      }

      const SimBuildingElementProxy::SystemName_optional& SimBuildingElementProxy::
      SystemName () const
      {
        return this->SystemName_;
      }

      SimBuildingElementProxy::SystemName_optional& SimBuildingElementProxy::
      SystemName ()
      {
        return this->SystemName_;
      }

      void SimBuildingElementProxy::
      SystemName (const SystemName_type& x)
      {
        this->SystemName_.set (x);
      }

      void SimBuildingElementProxy::
      SystemName (const SystemName_optional& x)
      {
        this->SystemName_ = x;
      }

      void SimBuildingElementProxy::
      SystemName (::std::auto_ptr< SystemName_type > x)
      {
        this->SystemName_.set (x);
      }

      const SimBuildingElementProxy::TiltRange_optional& SimBuildingElementProxy::
      TiltRange () const
      {
        return this->TiltRange_;
      }

      SimBuildingElementProxy::TiltRange_optional& SimBuildingElementProxy::
      TiltRange ()
      {
        return this->TiltRange_;
      }

      void SimBuildingElementProxy::
      TiltRange (const TiltRange_type& x)
      {
        this->TiltRange_.set (x);
      }

      void SimBuildingElementProxy::
      TiltRange (const TiltRange_optional& x)
      {
        this->TiltRange_ = x;
      }

      const SimBuildingElementProxy::TotalConnected_optional& SimBuildingElementProxy::
      TotalConnected () const
      {
        return this->TotalConnected_;
      }

      SimBuildingElementProxy::TotalConnected_optional& SimBuildingElementProxy::
      TotalConnected ()
      {
        return this->TotalConnected_;
      }

      void SimBuildingElementProxy::
      TotalConnected (const TotalConnected_type& x)
      {
        this->TotalConnected_.set (x);
      }

      void SimBuildingElementProxy::
      TotalConnected (const TotalConnected_optional& x)
      {
        this->TotalConnected_ = x;
      }

      const SimBuildingElementProxy::TotalDemandFactor_optional& SimBuildingElementProxy::
      TotalDemandFactor () const
      {
        return this->TotalDemandFactor_;
      }

      SimBuildingElementProxy::TotalDemandFactor_optional& SimBuildingElementProxy::
      TotalDemandFactor ()
      {
        return this->TotalDemandFactor_;
      }

      void SimBuildingElementProxy::
      TotalDemandFactor (const TotalDemandFactor_type& x)
      {
        this->TotalDemandFactor_.set (x);
      }

      void SimBuildingElementProxy::
      TotalDemandFactor (const TotalDemandFactor_optional& x)
      {
        this->TotalDemandFactor_ = x;
      }

      const SimBuildingElementProxy::TotalEstimatedDemand_optional& SimBuildingElementProxy::
      TotalEstimatedDemand () const
      {
        return this->TotalEstimatedDemand_;
      }

      SimBuildingElementProxy::TotalEstimatedDemand_optional& SimBuildingElementProxy::
      TotalEstimatedDemand ()
      {
        return this->TotalEstimatedDemand_;
      }

      void SimBuildingElementProxy::
      TotalEstimatedDemand (const TotalEstimatedDemand_type& x)
      {
        this->TotalEstimatedDemand_.set (x);
      }

      void SimBuildingElementProxy::
      TotalEstimatedDemand (const TotalEstimatedDemand_optional& x)
      {
        this->TotalEstimatedDemand_ = x;
      }

      const SimBuildingElementProxy::TowerHeight_optional& SimBuildingElementProxy::
      TowerHeight () const
      {
        return this->TowerHeight_;
      }

      SimBuildingElementProxy::TowerHeight_optional& SimBuildingElementProxy::
      TowerHeight ()
      {
        return this->TowerHeight_;
      }

      void SimBuildingElementProxy::
      TowerHeight (const TowerHeight_type& x)
      {
        this->TowerHeight_.set (x);
      }

      void SimBuildingElementProxy::
      TowerHeight (const TowerHeight_optional& x)
      {
        this->TowerHeight_ = x;
      }

      const SimBuildingElementProxy::TowerLength_optional& SimBuildingElementProxy::
      TowerLength () const
      {
        return this->TowerLength_;
      }

      SimBuildingElementProxy::TowerLength_optional& SimBuildingElementProxy::
      TowerLength ()
      {
        return this->TowerLength_;
      }

      void SimBuildingElementProxy::
      TowerLength (const TowerLength_type& x)
      {
        this->TowerLength_.set (x);
      }

      void SimBuildingElementProxy::
      TowerLength (const TowerLength_optional& x)
      {
        this->TowerLength_ = x;
      }

      const SimBuildingElementProxy::TowerWidth_optional& SimBuildingElementProxy::
      TowerWidth () const
      {
        return this->TowerWidth_;
      }

      SimBuildingElementProxy::TowerWidth_optional& SimBuildingElementProxy::
      TowerWidth ()
      {
        return this->TowerWidth_;
      }

      void SimBuildingElementProxy::
      TowerWidth (const TowerWidth_type& x)
      {
        this->TowerWidth_.set (x);
      }

      void SimBuildingElementProxy::
      TowerWidth (const TowerWidth_optional& x)
      {
        this->TowerWidth_ = x;
      }

      const SimBuildingElementProxy::TransformerHeight_optional& SimBuildingElementProxy::
      TransformerHeight () const
      {
        return this->TransformerHeight_;
      }

      SimBuildingElementProxy::TransformerHeight_optional& SimBuildingElementProxy::
      TransformerHeight ()
      {
        return this->TransformerHeight_;
      }

      void SimBuildingElementProxy::
      TransformerHeight (const TransformerHeight_type& x)
      {
        this->TransformerHeight_.set (x);
      }

      void SimBuildingElementProxy::
      TransformerHeight (const TransformerHeight_optional& x)
      {
        this->TransformerHeight_ = x;
      }

      const SimBuildingElementProxy::TransformerLength_optional& SimBuildingElementProxy::
      TransformerLength () const
      {
        return this->TransformerLength_;
      }

      SimBuildingElementProxy::TransformerLength_optional& SimBuildingElementProxy::
      TransformerLength ()
      {
        return this->TransformerLength_;
      }

      void SimBuildingElementProxy::
      TransformerLength (const TransformerLength_type& x)
      {
        this->TransformerLength_.set (x);
      }

      void SimBuildingElementProxy::
      TransformerLength (const TransformerLength_optional& x)
      {
        this->TransformerLength_ = x;
      }

      const SimBuildingElementProxy::TransformerWidth_optional& SimBuildingElementProxy::
      TransformerWidth () const
      {
        return this->TransformerWidth_;
      }

      SimBuildingElementProxy::TransformerWidth_optional& SimBuildingElementProxy::
      TransformerWidth ()
      {
        return this->TransformerWidth_;
      }

      void SimBuildingElementProxy::
      TransformerWidth (const TransformerWidth_type& x)
      {
        this->TransformerWidth_.set (x);
      }

      void SimBuildingElementProxy::
      TransformerWidth (const TransformerWidth_optional& x)
      {
        this->TransformerWidth_ = x;
      }

      const SimBuildingElementProxy::UniformatClassification_optional& SimBuildingElementProxy::
      UniformatClassification () const
      {
        return this->UniformatClassification_;
      }

      SimBuildingElementProxy::UniformatClassification_optional& SimBuildingElementProxy::
      UniformatClassification ()
      {
        return this->UniformatClassification_;
      }

      void SimBuildingElementProxy::
      UniformatClassification (const UniformatClassification_type& x)
      {
        this->UniformatClassification_.set (x);
      }

      void SimBuildingElementProxy::
      UniformatClassification (const UniformatClassification_optional& x)
      {
        this->UniformatClassification_ = x;
      }

      void SimBuildingElementProxy::
      UniformatClassification (::std::auto_ptr< UniformatClassification_type > x)
      {
        this->UniformatClassification_.set (x);
      }

      const SimBuildingElementProxy::Unitdepth_optional& SimBuildingElementProxy::
      Unitdepth () const
      {
        return this->Unitdepth_;
      }

      SimBuildingElementProxy::Unitdepth_optional& SimBuildingElementProxy::
      Unitdepth ()
      {
        return this->Unitdepth_;
      }

      void SimBuildingElementProxy::
      Unitdepth (const Unitdepth_type& x)
      {
        this->Unitdepth_.set (x);
      }

      void SimBuildingElementProxy::
      Unitdepth (const Unitdepth_optional& x)
      {
        this->Unitdepth_ = x;
      }

      const SimBuildingElementProxy::UnitHeight_optional& SimBuildingElementProxy::
      UnitHeight () const
      {
        return this->UnitHeight_;
      }

      SimBuildingElementProxy::UnitHeight_optional& SimBuildingElementProxy::
      UnitHeight ()
      {
        return this->UnitHeight_;
      }

      void SimBuildingElementProxy::
      UnitHeight (const UnitHeight_type& x)
      {
        this->UnitHeight_.set (x);
      }

      void SimBuildingElementProxy::
      UnitHeight (const UnitHeight_optional& x)
      {
        this->UnitHeight_ = x;
      }

      const SimBuildingElementProxy::UnitLength_optional& SimBuildingElementProxy::
      UnitLength () const
      {
        return this->UnitLength_;
      }

      SimBuildingElementProxy::UnitLength_optional& SimBuildingElementProxy::
      UnitLength ()
      {
        return this->UnitLength_;
      }

      void SimBuildingElementProxy::
      UnitLength (const UnitLength_type& x)
      {
        this->UnitLength_.set (x);
      }

      void SimBuildingElementProxy::
      UnitLength (const UnitLength_optional& x)
      {
        this->UnitLength_ = x;
      }

      const SimBuildingElementProxy::UnitWidth_optional& SimBuildingElementProxy::
      UnitWidth () const
      {
        return this->UnitWidth_;
      }

      SimBuildingElementProxy::UnitWidth_optional& SimBuildingElementProxy::
      UnitWidth ()
      {
        return this->UnitWidth_;
      }

      void SimBuildingElementProxy::
      UnitWidth (const UnitWidth_type& x)
      {
        this->UnitWidth_.set (x);
      }

      void SimBuildingElementProxy::
      UnitWidth (const UnitWidth_optional& x)
      {
        this->UnitWidth_ = x;
      }

      const SimBuildingElementProxy::Visible1_optional& SimBuildingElementProxy::
      Visible1 () const
      {
        return this->Visible1_;
      }

      SimBuildingElementProxy::Visible1_optional& SimBuildingElementProxy::
      Visible1 ()
      {
        return this->Visible1_;
      }

      void SimBuildingElementProxy::
      Visible1 (const Visible1_type& x)
      {
        this->Visible1_.set (x);
      }

      void SimBuildingElementProxy::
      Visible1 (const Visible1_optional& x)
      {
        this->Visible1_ = x;
      }

      const SimBuildingElementProxy::Visible2_optional& SimBuildingElementProxy::
      Visible2 () const
      {
        return this->Visible2_;
      }

      SimBuildingElementProxy::Visible2_optional& SimBuildingElementProxy::
      Visible2 ()
      {
        return this->Visible2_;
      }

      void SimBuildingElementProxy::
      Visible2 (const Visible2_type& x)
      {
        this->Visible2_.set (x);
      }

      void SimBuildingElementProxy::
      Visible2 (const Visible2_optional& x)
      {
        this->Visible2_ = x;
      }

      const SimBuildingElementProxy::Voltage_optional& SimBuildingElementProxy::
      Voltage () const
      {
        return this->Voltage_;
      }

      SimBuildingElementProxy::Voltage_optional& SimBuildingElementProxy::
      Voltage ()
      {
        return this->Voltage_;
      }

      void SimBuildingElementProxy::
      Voltage (const Voltage_type& x)
      {
        this->Voltage_.set (x);
      }

      void SimBuildingElementProxy::
      Voltage (const Voltage_optional& x)
      {
        this->Voltage_ = x;
      }

      const SimBuildingElementProxy::WaterFlow_optional& SimBuildingElementProxy::
      WaterFlow () const
      {
        return this->WaterFlow_;
      }

      SimBuildingElementProxy::WaterFlow_optional& SimBuildingElementProxy::
      WaterFlow ()
      {
        return this->WaterFlow_;
      }

      void SimBuildingElementProxy::
      WaterFlow (const WaterFlow_type& x)
      {
        this->WaterFlow_.set (x);
      }

      void SimBuildingElementProxy::
      WaterFlow (const WaterFlow_optional& x)
      {
        this->WaterFlow_ = x;
      }

      const SimBuildingElementProxy::WaterPressure_optional& SimBuildingElementProxy::
      WaterPressure () const
      {
        return this->WaterPressure_;
      }

      SimBuildingElementProxy::WaterPressure_optional& SimBuildingElementProxy::
      WaterPressure ()
      {
        return this->WaterPressure_;
      }

      void SimBuildingElementProxy::
      WaterPressure (const WaterPressure_type& x)
      {
        this->WaterPressure_.set (x);
      }

      void SimBuildingElementProxy::
      WaterPressure (const WaterPressure_optional& x)
      {
        this->WaterPressure_ = x;
      }

      const SimBuildingElementProxy::Width1_optional& SimBuildingElementProxy::
      Width1 () const
      {
        return this->Width1_;
      }

      SimBuildingElementProxy::Width1_optional& SimBuildingElementProxy::
      Width1 ()
      {
        return this->Width1_;
      }

      void SimBuildingElementProxy::
      Width1 (const Width1_type& x)
      {
        this->Width1_.set (x);
      }

      void SimBuildingElementProxy::
      Width1 (const Width1_optional& x)
      {
        this->Width1_ = x;
      }

      const SimBuildingElementProxy::Width2_optional& SimBuildingElementProxy::
      Width2 () const
      {
        return this->Width2_;
      }

      SimBuildingElementProxy::Width2_optional& SimBuildingElementProxy::
      Width2 ()
      {
        return this->Width2_;
      }

      void SimBuildingElementProxy::
      Width2 (const Width2_type& x)
      {
        this->Width2_.set (x);
      }

      void SimBuildingElementProxy::
      Width2 (const Width2_optional& x)
      {
        this->Width2_ = x;
      }

      const SimBuildingElementProxy::Width3_optional& SimBuildingElementProxy::
      Width3 () const
      {
        return this->Width3_;
      }

      SimBuildingElementProxy::Width3_optional& SimBuildingElementProxy::
      Width3 ()
      {
        return this->Width3_;
      }

      void SimBuildingElementProxy::
      Width3 (const Width3_type& x)
      {
        this->Width3_.set (x);
      }

      void SimBuildingElementProxy::
      Width3 (const Width3_optional& x)
      {
        this->Width3_ = x;
      }

      const SimBuildingElementProxy::Width4_optional& SimBuildingElementProxy::
      Width4 () const
      {
        return this->Width4_;
      }

      SimBuildingElementProxy::Width4_optional& SimBuildingElementProxy::
      Width4 ()
      {
        return this->Width4_;
      }

      void SimBuildingElementProxy::
      Width4 (const Width4_type& x)
      {
        this->Width4_.set (x);
      }

      void SimBuildingElementProxy::
      Width4 (const Width4_optional& x)
      {
        this->Width4_ = x;
      }

      const SimBuildingElementProxy::Width5_optional& SimBuildingElementProxy::
      Width5 () const
      {
        return this->Width5_;
      }

      SimBuildingElementProxy::Width5_optional& SimBuildingElementProxy::
      Width5 ()
      {
        return this->Width5_;
      }

      void SimBuildingElementProxy::
      Width5 (const Width5_type& x)
      {
        this->Width5_.set (x);
      }

      void SimBuildingElementProxy::
      Width5 (const Width5_optional& x)
      {
        this->Width5_ = x;
      }

      const SimBuildingElementProxy::Width6_optional& SimBuildingElementProxy::
      Width6 () const
      {
        return this->Width6_;
      }

      SimBuildingElementProxy::Width6_optional& SimBuildingElementProxy::
      Width6 ()
      {
        return this->Width6_;
      }

      void SimBuildingElementProxy::
      Width6 (const Width6_type& x)
      {
        this->Width6_.set (x);
      }

      void SimBuildingElementProxy::
      Width6 (const Width6_optional& x)
      {
        this->Width6_ = x;
      }

      const SimBuildingElementProxy::Width7_optional& SimBuildingElementProxy::
      Width7 () const
      {
        return this->Width7_;
      }

      SimBuildingElementProxy::Width7_optional& SimBuildingElementProxy::
      Width7 ()
      {
        return this->Width7_;
      }

      void SimBuildingElementProxy::
      Width7 (const Width7_type& x)
      {
        this->Width7_.set (x);
      }

      void SimBuildingElementProxy::
      Width7 (const Width7_optional& x)
      {
        this->Width7_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimBuildingElementProxy
      //

      SimBuildingElementProxy::
      SimBuildingElementProxy ()
      : ::schema::simxml::SimModelCore::SimBuildingElement (),
        Name_ (this),
        Representation_ (this),
        CompositionType_ (this),
        AHUHeight_ (this),
        AHUWidth_ (this),
        AirFlow_ (this),
        AirflowReturn_ (this),
        AirflowSupply_ (this),
        AirPressure_ (this),
        AirwayLength_ (this),
        AlternatorVoltage_ (this),
        Ang_ (this),
        ApparentLoad_ (this),
        ApparentLoadPhaseA_ (this),
        ApparentLoadPhaseB_ (this),
        ApparentLoadPhaseC_ (this),
        AverageSolarTransmittance_ (this),
        AverageVisibleTransmittance_ (this),
        Azimuth_ (this),
        BaseHeight_ (this),
        BaseLength_ (this),
        Buildingstoreyname_ (this),
        C1Offset1_ (this),
        C1Offset2_ (this),
        C2Offset1_ (this),
        C2Offset2_ (this),
        C3Offset1_ (this),
        C4Offset2_ (this),
        C5Offset1_ (this),
        C5Offset2_ (this),
        C6Offset1_ (this),
        C6Offset2_ (this),
        ChilledWaterFlow_ (this),
        ChilledWaterPressureDrop_ (this),
        CircuitNaming_ (this),
        Color_ (this),
        Connectionoffset_ (this),
        ContainerName_ (this),
        ContainerType_ (this),
        CoolAirFlow_ (this),
        CoolAirInletDiameter_ (this),
        CoolAirInletRadius_ (this),
        CoolAirPressureDrop_ (this),
        CoolingCoilInletRadius_ (this),
        CoolingCoilOutletRadius_ (this),
        CoolingWaterDiameter_ (this),
        CoolingWaterFlow_ (this),
        CoolingWaterPressureDrop_ (this),
        CoolingWaterRadius_ (this),
        Diameter1_ (this),
        Distance_ (this),
        Distance1_ (this),
        Distance2_ (this),
        DrainFlow_ (this),
        DrainOffset1_ (this),
        DrainRadius_ (this),
        DuctHeight_ (this),
        DuctWidth_ (this),
        ElectricalCircuitName_ (this),
        ElectricalData_ (this),
        Enclosure_ (this),
        ExternalStaticPressure_ (this),
        ExternalTotalPressure_ (this),
        FanAirFlow_ (this),
        FanDiameter_ (this),
        FanRadius_ (this),
        GeneratorHeight_ (this),
        GeneratorLength_ (this),
        GeneratorWidth_ (this),
        GroupName_ (this),
        HalfAirOutletHeight_ (this),
        HalfAirOutletWidth_ (this),
        HalfOverallHeight_ (this),
        HalfOverallWidth_ (this),
        HalfWidth4_ (this),
        HeatAirFlow_ (this),
        HeatAirInletDiameter_ (this),
        HeatAirInletRadius_ (this),
        HeatAirPressureDrop_ (this),
        HeatLoss_ (this),
        HeatingCoilInletRadius_ (this),
        HeatingCoilOutletRadius_ (this),
        Height1_ (this),
        Height2_ (this),
        Height3_ (this),
        Height4_ (this),
        Height5_ (this),
        Height6_ (this),
        Height7_ (this),
        Height8_ (this),
        Height9_ (this),
        Host_ (this),
        HotWaterFlow_ (this),
        HotWaterPressureDrop_ (this),
        Inclination_ (this),
        InletDiameter_ (this),
        InletRadius_ (this),
        Length1_ (this),
        Length2_ (this),
        Length3_ (this),
        Length4_ (this),
        Length5_ (this),
        Length6_ (this),
        Length7_ (this),
        Length8_ (this),
        Length9_ (this),
        Length10_ (this),
        Length11_ (this),
        Length12_ (this),
        Length13_ (this),
        Level_ (this),
        LoadClassification_ (this),
        MakeUpWaterFlow_ (this),
        MakeUpWaterPressureDrop_ (this),
        MakeUpWaterRadius_ (this),
        ManufacturerArticleNumber_ (this),
        ManufacturerModelName_ (this),
        ManufacturerModelNumber_ (this),
        ManufacturerName_ (this),
        ManufacturerYearofProduction_ (this),
        Mark_ (this),
        Material_ (this),
        Max1PoleBreakers_ (this),
        MaxFlow_ (this),
        MinFlow_ (this),
        Model_ (this),
        MotorHP_ (this),
        NumberOfFans_ (this),
        NumberOfPoles_ (this),
        ObjectClassName_ (this),
        Offset_ (this),
        OmniclassNumber_ (this),
        OmniclassTitle_ (this),
        OutletDiameter_ (this),
        OutletRadius_ (this),
        OverallHeight_ (this),
        OverallLength_ (this),
        OverallWidth_ (this),
        PanelHeight_ (this),
        Partshape_ (this),
        PhaseCreated_ (this),
        PipeRadius_ (this),
        PrimaryNumberofPoles_ (this),
        PrimaryVoltage_ (this),
        PumpHeight_ (this),
        PumpLength_ (this),
        PumpWidth_ (this),
        Radius1_ (this),
        Radius2_ (this),
        Radius3_ (this),
        Radius4_ (this),
        Radius5_ (this),
        Radius6_ (this),
        Reference_ (this),
        Reflectance_ (this),
        ReturnAirInletFlow_ (this),
        ReturnAirInletHeight_ (this),
        ReturnAirInletWidth_ (this),
        ReturnDuctHeight_ (this),
        ReturnDuctWidth_ (this),
        Returnheight_ (this),
        Returnwidth_ (this),
        ReturnY_Offset_ (this),
        ReturnZ_Offset_ (this),
        Roughness_ (this),
        ShadingDeviceType_ (this),
        SupplyAirInletDiameter_ (this),
        SupplyAirInletFlow_ (this),
        SupplyAirInletHeight_ (this),
        SupplyAirInletRadius_ (this),
        SupplyAirInletWidth_ (this),
        SupplyAirOutletFlow_ (this),
        SupplyAirOutletHeight_ (this),
        SupplyAirOutletWidth_ (this),
        SupplyAirPressureDrop_ (this),
        SupplyDuctHeight_ (this),
        SupplyDuctWidth_ (this),
        Supplyheight_ (this),
        Supplywidth_ (this),
        Supply_ReturnSymbols_ (this),
        SupplyY_Offset_ (this),
        SupplyZ_Offset_ (this),
        SystemClassification_ (this),
        SystemName_ (this),
        TiltRange_ (this),
        TotalConnected_ (this),
        TotalDemandFactor_ (this),
        TotalEstimatedDemand_ (this),
        TowerHeight_ (this),
        TowerLength_ (this),
        TowerWidth_ (this),
        TransformerHeight_ (this),
        TransformerLength_ (this),
        TransformerWidth_ (this),
        UniformatClassification_ (this),
        Unitdepth_ (this),
        UnitHeight_ (this),
        UnitLength_ (this),
        UnitWidth_ (this),
        Visible1_ (this),
        Visible2_ (this),
        Voltage_ (this),
        WaterFlow_ (this),
        WaterPressure_ (this),
        Width1_ (this),
        Width2_ (this),
        Width3_ (this),
        Width4_ (this),
        Width5_ (this),
        Width6_ (this),
        Width7_ (this)
      {
      }

      SimBuildingElementProxy::
      SimBuildingElementProxy (const RefId_type& RefId)
      : ::schema::simxml::SimModelCore::SimBuildingElement (RefId),
        Name_ (this),
        Representation_ (this),
        CompositionType_ (this),
        AHUHeight_ (this),
        AHUWidth_ (this),
        AirFlow_ (this),
        AirflowReturn_ (this),
        AirflowSupply_ (this),
        AirPressure_ (this),
        AirwayLength_ (this),
        AlternatorVoltage_ (this),
        Ang_ (this),
        ApparentLoad_ (this),
        ApparentLoadPhaseA_ (this),
        ApparentLoadPhaseB_ (this),
        ApparentLoadPhaseC_ (this),
        AverageSolarTransmittance_ (this),
        AverageVisibleTransmittance_ (this),
        Azimuth_ (this),
        BaseHeight_ (this),
        BaseLength_ (this),
        Buildingstoreyname_ (this),
        C1Offset1_ (this),
        C1Offset2_ (this),
        C2Offset1_ (this),
        C2Offset2_ (this),
        C3Offset1_ (this),
        C4Offset2_ (this),
        C5Offset1_ (this),
        C5Offset2_ (this),
        C6Offset1_ (this),
        C6Offset2_ (this),
        ChilledWaterFlow_ (this),
        ChilledWaterPressureDrop_ (this),
        CircuitNaming_ (this),
        Color_ (this),
        Connectionoffset_ (this),
        ContainerName_ (this),
        ContainerType_ (this),
        CoolAirFlow_ (this),
        CoolAirInletDiameter_ (this),
        CoolAirInletRadius_ (this),
        CoolAirPressureDrop_ (this),
        CoolingCoilInletRadius_ (this),
        CoolingCoilOutletRadius_ (this),
        CoolingWaterDiameter_ (this),
        CoolingWaterFlow_ (this),
        CoolingWaterPressureDrop_ (this),
        CoolingWaterRadius_ (this),
        Diameter1_ (this),
        Distance_ (this),
        Distance1_ (this),
        Distance2_ (this),
        DrainFlow_ (this),
        DrainOffset1_ (this),
        DrainRadius_ (this),
        DuctHeight_ (this),
        DuctWidth_ (this),
        ElectricalCircuitName_ (this),
        ElectricalData_ (this),
        Enclosure_ (this),
        ExternalStaticPressure_ (this),
        ExternalTotalPressure_ (this),
        FanAirFlow_ (this),
        FanDiameter_ (this),
        FanRadius_ (this),
        GeneratorHeight_ (this),
        GeneratorLength_ (this),
        GeneratorWidth_ (this),
        GroupName_ (this),
        HalfAirOutletHeight_ (this),
        HalfAirOutletWidth_ (this),
        HalfOverallHeight_ (this),
        HalfOverallWidth_ (this),
        HalfWidth4_ (this),
        HeatAirFlow_ (this),
        HeatAirInletDiameter_ (this),
        HeatAirInletRadius_ (this),
        HeatAirPressureDrop_ (this),
        HeatLoss_ (this),
        HeatingCoilInletRadius_ (this),
        HeatingCoilOutletRadius_ (this),
        Height1_ (this),
        Height2_ (this),
        Height3_ (this),
        Height4_ (this),
        Height5_ (this),
        Height6_ (this),
        Height7_ (this),
        Height8_ (this),
        Height9_ (this),
        Host_ (this),
        HotWaterFlow_ (this),
        HotWaterPressureDrop_ (this),
        Inclination_ (this),
        InletDiameter_ (this),
        InletRadius_ (this),
        Length1_ (this),
        Length2_ (this),
        Length3_ (this),
        Length4_ (this),
        Length5_ (this),
        Length6_ (this),
        Length7_ (this),
        Length8_ (this),
        Length9_ (this),
        Length10_ (this),
        Length11_ (this),
        Length12_ (this),
        Length13_ (this),
        Level_ (this),
        LoadClassification_ (this),
        MakeUpWaterFlow_ (this),
        MakeUpWaterPressureDrop_ (this),
        MakeUpWaterRadius_ (this),
        ManufacturerArticleNumber_ (this),
        ManufacturerModelName_ (this),
        ManufacturerModelNumber_ (this),
        ManufacturerName_ (this),
        ManufacturerYearofProduction_ (this),
        Mark_ (this),
        Material_ (this),
        Max1PoleBreakers_ (this),
        MaxFlow_ (this),
        MinFlow_ (this),
        Model_ (this),
        MotorHP_ (this),
        NumberOfFans_ (this),
        NumberOfPoles_ (this),
        ObjectClassName_ (this),
        Offset_ (this),
        OmniclassNumber_ (this),
        OmniclassTitle_ (this),
        OutletDiameter_ (this),
        OutletRadius_ (this),
        OverallHeight_ (this),
        OverallLength_ (this),
        OverallWidth_ (this),
        PanelHeight_ (this),
        Partshape_ (this),
        PhaseCreated_ (this),
        PipeRadius_ (this),
        PrimaryNumberofPoles_ (this),
        PrimaryVoltage_ (this),
        PumpHeight_ (this),
        PumpLength_ (this),
        PumpWidth_ (this),
        Radius1_ (this),
        Radius2_ (this),
        Radius3_ (this),
        Radius4_ (this),
        Radius5_ (this),
        Radius6_ (this),
        Reference_ (this),
        Reflectance_ (this),
        ReturnAirInletFlow_ (this),
        ReturnAirInletHeight_ (this),
        ReturnAirInletWidth_ (this),
        ReturnDuctHeight_ (this),
        ReturnDuctWidth_ (this),
        Returnheight_ (this),
        Returnwidth_ (this),
        ReturnY_Offset_ (this),
        ReturnZ_Offset_ (this),
        Roughness_ (this),
        ShadingDeviceType_ (this),
        SupplyAirInletDiameter_ (this),
        SupplyAirInletFlow_ (this),
        SupplyAirInletHeight_ (this),
        SupplyAirInletRadius_ (this),
        SupplyAirInletWidth_ (this),
        SupplyAirOutletFlow_ (this),
        SupplyAirOutletHeight_ (this),
        SupplyAirOutletWidth_ (this),
        SupplyAirPressureDrop_ (this),
        SupplyDuctHeight_ (this),
        SupplyDuctWidth_ (this),
        Supplyheight_ (this),
        Supplywidth_ (this),
        Supply_ReturnSymbols_ (this),
        SupplyY_Offset_ (this),
        SupplyZ_Offset_ (this),
        SystemClassification_ (this),
        SystemName_ (this),
        TiltRange_ (this),
        TotalConnected_ (this),
        TotalDemandFactor_ (this),
        TotalEstimatedDemand_ (this),
        TowerHeight_ (this),
        TowerLength_ (this),
        TowerWidth_ (this),
        TransformerHeight_ (this),
        TransformerLength_ (this),
        TransformerWidth_ (this),
        UniformatClassification_ (this),
        Unitdepth_ (this),
        UnitHeight_ (this),
        UnitLength_ (this),
        UnitWidth_ (this),
        Visible1_ (this),
        Visible2_ (this),
        Voltage_ (this),
        WaterFlow_ (this),
        WaterPressure_ (this),
        Width1_ (this),
        Width2_ (this),
        Width3_ (this),
        Width4_ (this),
        Width5_ (this),
        Width6_ (this),
        Width7_ (this)
      {
      }

      SimBuildingElementProxy::
      SimBuildingElementProxy (const SimBuildingElementProxy& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimBuildingElement (x, f, c),
        Name_ (x.Name_, f, this),
        Representation_ (x.Representation_, f, this),
        CompositionType_ (x.CompositionType_, f, this),
        AHUHeight_ (x.AHUHeight_, f, this),
        AHUWidth_ (x.AHUWidth_, f, this),
        AirFlow_ (x.AirFlow_, f, this),
        AirflowReturn_ (x.AirflowReturn_, f, this),
        AirflowSupply_ (x.AirflowSupply_, f, this),
        AirPressure_ (x.AirPressure_, f, this),
        AirwayLength_ (x.AirwayLength_, f, this),
        AlternatorVoltage_ (x.AlternatorVoltage_, f, this),
        Ang_ (x.Ang_, f, this),
        ApparentLoad_ (x.ApparentLoad_, f, this),
        ApparentLoadPhaseA_ (x.ApparentLoadPhaseA_, f, this),
        ApparentLoadPhaseB_ (x.ApparentLoadPhaseB_, f, this),
        ApparentLoadPhaseC_ (x.ApparentLoadPhaseC_, f, this),
        AverageSolarTransmittance_ (x.AverageSolarTransmittance_, f, this),
        AverageVisibleTransmittance_ (x.AverageVisibleTransmittance_, f, this),
        Azimuth_ (x.Azimuth_, f, this),
        BaseHeight_ (x.BaseHeight_, f, this),
        BaseLength_ (x.BaseLength_, f, this),
        Buildingstoreyname_ (x.Buildingstoreyname_, f, this),
        C1Offset1_ (x.C1Offset1_, f, this),
        C1Offset2_ (x.C1Offset2_, f, this),
        C2Offset1_ (x.C2Offset1_, f, this),
        C2Offset2_ (x.C2Offset2_, f, this),
        C3Offset1_ (x.C3Offset1_, f, this),
        C4Offset2_ (x.C4Offset2_, f, this),
        C5Offset1_ (x.C5Offset1_, f, this),
        C5Offset2_ (x.C5Offset2_, f, this),
        C6Offset1_ (x.C6Offset1_, f, this),
        C6Offset2_ (x.C6Offset2_, f, this),
        ChilledWaterFlow_ (x.ChilledWaterFlow_, f, this),
        ChilledWaterPressureDrop_ (x.ChilledWaterPressureDrop_, f, this),
        CircuitNaming_ (x.CircuitNaming_, f, this),
        Color_ (x.Color_, f, this),
        Connectionoffset_ (x.Connectionoffset_, f, this),
        ContainerName_ (x.ContainerName_, f, this),
        ContainerType_ (x.ContainerType_, f, this),
        CoolAirFlow_ (x.CoolAirFlow_, f, this),
        CoolAirInletDiameter_ (x.CoolAirInletDiameter_, f, this),
        CoolAirInletRadius_ (x.CoolAirInletRadius_, f, this),
        CoolAirPressureDrop_ (x.CoolAirPressureDrop_, f, this),
        CoolingCoilInletRadius_ (x.CoolingCoilInletRadius_, f, this),
        CoolingCoilOutletRadius_ (x.CoolingCoilOutletRadius_, f, this),
        CoolingWaterDiameter_ (x.CoolingWaterDiameter_, f, this),
        CoolingWaterFlow_ (x.CoolingWaterFlow_, f, this),
        CoolingWaterPressureDrop_ (x.CoolingWaterPressureDrop_, f, this),
        CoolingWaterRadius_ (x.CoolingWaterRadius_, f, this),
        Diameter1_ (x.Diameter1_, f, this),
        Distance_ (x.Distance_, f, this),
        Distance1_ (x.Distance1_, f, this),
        Distance2_ (x.Distance2_, f, this),
        DrainFlow_ (x.DrainFlow_, f, this),
        DrainOffset1_ (x.DrainOffset1_, f, this),
        DrainRadius_ (x.DrainRadius_, f, this),
        DuctHeight_ (x.DuctHeight_, f, this),
        DuctWidth_ (x.DuctWidth_, f, this),
        ElectricalCircuitName_ (x.ElectricalCircuitName_, f, this),
        ElectricalData_ (x.ElectricalData_, f, this),
        Enclosure_ (x.Enclosure_, f, this),
        ExternalStaticPressure_ (x.ExternalStaticPressure_, f, this),
        ExternalTotalPressure_ (x.ExternalTotalPressure_, f, this),
        FanAirFlow_ (x.FanAirFlow_, f, this),
        FanDiameter_ (x.FanDiameter_, f, this),
        FanRadius_ (x.FanRadius_, f, this),
        GeneratorHeight_ (x.GeneratorHeight_, f, this),
        GeneratorLength_ (x.GeneratorLength_, f, this),
        GeneratorWidth_ (x.GeneratorWidth_, f, this),
        GroupName_ (x.GroupName_, f, this),
        HalfAirOutletHeight_ (x.HalfAirOutletHeight_, f, this),
        HalfAirOutletWidth_ (x.HalfAirOutletWidth_, f, this),
        HalfOverallHeight_ (x.HalfOverallHeight_, f, this),
        HalfOverallWidth_ (x.HalfOverallWidth_, f, this),
        HalfWidth4_ (x.HalfWidth4_, f, this),
        HeatAirFlow_ (x.HeatAirFlow_, f, this),
        HeatAirInletDiameter_ (x.HeatAirInletDiameter_, f, this),
        HeatAirInletRadius_ (x.HeatAirInletRadius_, f, this),
        HeatAirPressureDrop_ (x.HeatAirPressureDrop_, f, this),
        HeatLoss_ (x.HeatLoss_, f, this),
        HeatingCoilInletRadius_ (x.HeatingCoilInletRadius_, f, this),
        HeatingCoilOutletRadius_ (x.HeatingCoilOutletRadius_, f, this),
        Height1_ (x.Height1_, f, this),
        Height2_ (x.Height2_, f, this),
        Height3_ (x.Height3_, f, this),
        Height4_ (x.Height4_, f, this),
        Height5_ (x.Height5_, f, this),
        Height6_ (x.Height6_, f, this),
        Height7_ (x.Height7_, f, this),
        Height8_ (x.Height8_, f, this),
        Height9_ (x.Height9_, f, this),
        Host_ (x.Host_, f, this),
        HotWaterFlow_ (x.HotWaterFlow_, f, this),
        HotWaterPressureDrop_ (x.HotWaterPressureDrop_, f, this),
        Inclination_ (x.Inclination_, f, this),
        InletDiameter_ (x.InletDiameter_, f, this),
        InletRadius_ (x.InletRadius_, f, this),
        Length1_ (x.Length1_, f, this),
        Length2_ (x.Length2_, f, this),
        Length3_ (x.Length3_, f, this),
        Length4_ (x.Length4_, f, this),
        Length5_ (x.Length5_, f, this),
        Length6_ (x.Length6_, f, this),
        Length7_ (x.Length7_, f, this),
        Length8_ (x.Length8_, f, this),
        Length9_ (x.Length9_, f, this),
        Length10_ (x.Length10_, f, this),
        Length11_ (x.Length11_, f, this),
        Length12_ (x.Length12_, f, this),
        Length13_ (x.Length13_, f, this),
        Level_ (x.Level_, f, this),
        LoadClassification_ (x.LoadClassification_, f, this),
        MakeUpWaterFlow_ (x.MakeUpWaterFlow_, f, this),
        MakeUpWaterPressureDrop_ (x.MakeUpWaterPressureDrop_, f, this),
        MakeUpWaterRadius_ (x.MakeUpWaterRadius_, f, this),
        ManufacturerArticleNumber_ (x.ManufacturerArticleNumber_, f, this),
        ManufacturerModelName_ (x.ManufacturerModelName_, f, this),
        ManufacturerModelNumber_ (x.ManufacturerModelNumber_, f, this),
        ManufacturerName_ (x.ManufacturerName_, f, this),
        ManufacturerYearofProduction_ (x.ManufacturerYearofProduction_, f, this),
        Mark_ (x.Mark_, f, this),
        Material_ (x.Material_, f, this),
        Max1PoleBreakers_ (x.Max1PoleBreakers_, f, this),
        MaxFlow_ (x.MaxFlow_, f, this),
        MinFlow_ (x.MinFlow_, f, this),
        Model_ (x.Model_, f, this),
        MotorHP_ (x.MotorHP_, f, this),
        NumberOfFans_ (x.NumberOfFans_, f, this),
        NumberOfPoles_ (x.NumberOfPoles_, f, this),
        ObjectClassName_ (x.ObjectClassName_, f, this),
        Offset_ (x.Offset_, f, this),
        OmniclassNumber_ (x.OmniclassNumber_, f, this),
        OmniclassTitle_ (x.OmniclassTitle_, f, this),
        OutletDiameter_ (x.OutletDiameter_, f, this),
        OutletRadius_ (x.OutletRadius_, f, this),
        OverallHeight_ (x.OverallHeight_, f, this),
        OverallLength_ (x.OverallLength_, f, this),
        OverallWidth_ (x.OverallWidth_, f, this),
        PanelHeight_ (x.PanelHeight_, f, this),
        Partshape_ (x.Partshape_, f, this),
        PhaseCreated_ (x.PhaseCreated_, f, this),
        PipeRadius_ (x.PipeRadius_, f, this),
        PrimaryNumberofPoles_ (x.PrimaryNumberofPoles_, f, this),
        PrimaryVoltage_ (x.PrimaryVoltage_, f, this),
        PumpHeight_ (x.PumpHeight_, f, this),
        PumpLength_ (x.PumpLength_, f, this),
        PumpWidth_ (x.PumpWidth_, f, this),
        Radius1_ (x.Radius1_, f, this),
        Radius2_ (x.Radius2_, f, this),
        Radius3_ (x.Radius3_, f, this),
        Radius4_ (x.Radius4_, f, this),
        Radius5_ (x.Radius5_, f, this),
        Radius6_ (x.Radius6_, f, this),
        Reference_ (x.Reference_, f, this),
        Reflectance_ (x.Reflectance_, f, this),
        ReturnAirInletFlow_ (x.ReturnAirInletFlow_, f, this),
        ReturnAirInletHeight_ (x.ReturnAirInletHeight_, f, this),
        ReturnAirInletWidth_ (x.ReturnAirInletWidth_, f, this),
        ReturnDuctHeight_ (x.ReturnDuctHeight_, f, this),
        ReturnDuctWidth_ (x.ReturnDuctWidth_, f, this),
        Returnheight_ (x.Returnheight_, f, this),
        Returnwidth_ (x.Returnwidth_, f, this),
        ReturnY_Offset_ (x.ReturnY_Offset_, f, this),
        ReturnZ_Offset_ (x.ReturnZ_Offset_, f, this),
        Roughness_ (x.Roughness_, f, this),
        ShadingDeviceType_ (x.ShadingDeviceType_, f, this),
        SupplyAirInletDiameter_ (x.SupplyAirInletDiameter_, f, this),
        SupplyAirInletFlow_ (x.SupplyAirInletFlow_, f, this),
        SupplyAirInletHeight_ (x.SupplyAirInletHeight_, f, this),
        SupplyAirInletRadius_ (x.SupplyAirInletRadius_, f, this),
        SupplyAirInletWidth_ (x.SupplyAirInletWidth_, f, this),
        SupplyAirOutletFlow_ (x.SupplyAirOutletFlow_, f, this),
        SupplyAirOutletHeight_ (x.SupplyAirOutletHeight_, f, this),
        SupplyAirOutletWidth_ (x.SupplyAirOutletWidth_, f, this),
        SupplyAirPressureDrop_ (x.SupplyAirPressureDrop_, f, this),
        SupplyDuctHeight_ (x.SupplyDuctHeight_, f, this),
        SupplyDuctWidth_ (x.SupplyDuctWidth_, f, this),
        Supplyheight_ (x.Supplyheight_, f, this),
        Supplywidth_ (x.Supplywidth_, f, this),
        Supply_ReturnSymbols_ (x.Supply_ReturnSymbols_, f, this),
        SupplyY_Offset_ (x.SupplyY_Offset_, f, this),
        SupplyZ_Offset_ (x.SupplyZ_Offset_, f, this),
        SystemClassification_ (x.SystemClassification_, f, this),
        SystemName_ (x.SystemName_, f, this),
        TiltRange_ (x.TiltRange_, f, this),
        TotalConnected_ (x.TotalConnected_, f, this),
        TotalDemandFactor_ (x.TotalDemandFactor_, f, this),
        TotalEstimatedDemand_ (x.TotalEstimatedDemand_, f, this),
        TowerHeight_ (x.TowerHeight_, f, this),
        TowerLength_ (x.TowerLength_, f, this),
        TowerWidth_ (x.TowerWidth_, f, this),
        TransformerHeight_ (x.TransformerHeight_, f, this),
        TransformerLength_ (x.TransformerLength_, f, this),
        TransformerWidth_ (x.TransformerWidth_, f, this),
        UniformatClassification_ (x.UniformatClassification_, f, this),
        Unitdepth_ (x.Unitdepth_, f, this),
        UnitHeight_ (x.UnitHeight_, f, this),
        UnitLength_ (x.UnitLength_, f, this),
        UnitWidth_ (x.UnitWidth_, f, this),
        Visible1_ (x.Visible1_, f, this),
        Visible2_ (x.Visible2_, f, this),
        Voltage_ (x.Voltage_, f, this),
        WaterFlow_ (x.WaterFlow_, f, this),
        WaterPressure_ (x.WaterPressure_, f, this),
        Width1_ (x.Width1_, f, this),
        Width2_ (x.Width2_, f, this),
        Width3_ (x.Width3_, f, this),
        Width4_ (x.Width4_, f, this),
        Width5_ (x.Width5_, f, this),
        Width6_ (x.Width6_, f, this),
        Width7_ (x.Width7_, f, this)
      {
      }

      SimBuildingElementProxy::
      SimBuildingElementProxy (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimBuildingElement (e, f | ::xml_schema::flags::base, c),
        Name_ (this),
        Representation_ (this),
        CompositionType_ (this),
        AHUHeight_ (this),
        AHUWidth_ (this),
        AirFlow_ (this),
        AirflowReturn_ (this),
        AirflowSupply_ (this),
        AirPressure_ (this),
        AirwayLength_ (this),
        AlternatorVoltage_ (this),
        Ang_ (this),
        ApparentLoad_ (this),
        ApparentLoadPhaseA_ (this),
        ApparentLoadPhaseB_ (this),
        ApparentLoadPhaseC_ (this),
        AverageSolarTransmittance_ (this),
        AverageVisibleTransmittance_ (this),
        Azimuth_ (this),
        BaseHeight_ (this),
        BaseLength_ (this),
        Buildingstoreyname_ (this),
        C1Offset1_ (this),
        C1Offset2_ (this),
        C2Offset1_ (this),
        C2Offset2_ (this),
        C3Offset1_ (this),
        C4Offset2_ (this),
        C5Offset1_ (this),
        C5Offset2_ (this),
        C6Offset1_ (this),
        C6Offset2_ (this),
        ChilledWaterFlow_ (this),
        ChilledWaterPressureDrop_ (this),
        CircuitNaming_ (this),
        Color_ (this),
        Connectionoffset_ (this),
        ContainerName_ (this),
        ContainerType_ (this),
        CoolAirFlow_ (this),
        CoolAirInletDiameter_ (this),
        CoolAirInletRadius_ (this),
        CoolAirPressureDrop_ (this),
        CoolingCoilInletRadius_ (this),
        CoolingCoilOutletRadius_ (this),
        CoolingWaterDiameter_ (this),
        CoolingWaterFlow_ (this),
        CoolingWaterPressureDrop_ (this),
        CoolingWaterRadius_ (this),
        Diameter1_ (this),
        Distance_ (this),
        Distance1_ (this),
        Distance2_ (this),
        DrainFlow_ (this),
        DrainOffset1_ (this),
        DrainRadius_ (this),
        DuctHeight_ (this),
        DuctWidth_ (this),
        ElectricalCircuitName_ (this),
        ElectricalData_ (this),
        Enclosure_ (this),
        ExternalStaticPressure_ (this),
        ExternalTotalPressure_ (this),
        FanAirFlow_ (this),
        FanDiameter_ (this),
        FanRadius_ (this),
        GeneratorHeight_ (this),
        GeneratorLength_ (this),
        GeneratorWidth_ (this),
        GroupName_ (this),
        HalfAirOutletHeight_ (this),
        HalfAirOutletWidth_ (this),
        HalfOverallHeight_ (this),
        HalfOverallWidth_ (this),
        HalfWidth4_ (this),
        HeatAirFlow_ (this),
        HeatAirInletDiameter_ (this),
        HeatAirInletRadius_ (this),
        HeatAirPressureDrop_ (this),
        HeatLoss_ (this),
        HeatingCoilInletRadius_ (this),
        HeatingCoilOutletRadius_ (this),
        Height1_ (this),
        Height2_ (this),
        Height3_ (this),
        Height4_ (this),
        Height5_ (this),
        Height6_ (this),
        Height7_ (this),
        Height8_ (this),
        Height9_ (this),
        Host_ (this),
        HotWaterFlow_ (this),
        HotWaterPressureDrop_ (this),
        Inclination_ (this),
        InletDiameter_ (this),
        InletRadius_ (this),
        Length1_ (this),
        Length2_ (this),
        Length3_ (this),
        Length4_ (this),
        Length5_ (this),
        Length6_ (this),
        Length7_ (this),
        Length8_ (this),
        Length9_ (this),
        Length10_ (this),
        Length11_ (this),
        Length12_ (this),
        Length13_ (this),
        Level_ (this),
        LoadClassification_ (this),
        MakeUpWaterFlow_ (this),
        MakeUpWaterPressureDrop_ (this),
        MakeUpWaterRadius_ (this),
        ManufacturerArticleNumber_ (this),
        ManufacturerModelName_ (this),
        ManufacturerModelNumber_ (this),
        ManufacturerName_ (this),
        ManufacturerYearofProduction_ (this),
        Mark_ (this),
        Material_ (this),
        Max1PoleBreakers_ (this),
        MaxFlow_ (this),
        MinFlow_ (this),
        Model_ (this),
        MotorHP_ (this),
        NumberOfFans_ (this),
        NumberOfPoles_ (this),
        ObjectClassName_ (this),
        Offset_ (this),
        OmniclassNumber_ (this),
        OmniclassTitle_ (this),
        OutletDiameter_ (this),
        OutletRadius_ (this),
        OverallHeight_ (this),
        OverallLength_ (this),
        OverallWidth_ (this),
        PanelHeight_ (this),
        Partshape_ (this),
        PhaseCreated_ (this),
        PipeRadius_ (this),
        PrimaryNumberofPoles_ (this),
        PrimaryVoltage_ (this),
        PumpHeight_ (this),
        PumpLength_ (this),
        PumpWidth_ (this),
        Radius1_ (this),
        Radius2_ (this),
        Radius3_ (this),
        Radius4_ (this),
        Radius5_ (this),
        Radius6_ (this),
        Reference_ (this),
        Reflectance_ (this),
        ReturnAirInletFlow_ (this),
        ReturnAirInletHeight_ (this),
        ReturnAirInletWidth_ (this),
        ReturnDuctHeight_ (this),
        ReturnDuctWidth_ (this),
        Returnheight_ (this),
        Returnwidth_ (this),
        ReturnY_Offset_ (this),
        ReturnZ_Offset_ (this),
        Roughness_ (this),
        ShadingDeviceType_ (this),
        SupplyAirInletDiameter_ (this),
        SupplyAirInletFlow_ (this),
        SupplyAirInletHeight_ (this),
        SupplyAirInletRadius_ (this),
        SupplyAirInletWidth_ (this),
        SupplyAirOutletFlow_ (this),
        SupplyAirOutletHeight_ (this),
        SupplyAirOutletWidth_ (this),
        SupplyAirPressureDrop_ (this),
        SupplyDuctHeight_ (this),
        SupplyDuctWidth_ (this),
        Supplyheight_ (this),
        Supplywidth_ (this),
        Supply_ReturnSymbols_ (this),
        SupplyY_Offset_ (this),
        SupplyZ_Offset_ (this),
        SystemClassification_ (this),
        SystemName_ (this),
        TiltRange_ (this),
        TotalConnected_ (this),
        TotalDemandFactor_ (this),
        TotalEstimatedDemand_ (this),
        TowerHeight_ (this),
        TowerLength_ (this),
        TowerWidth_ (this),
        TransformerHeight_ (this),
        TransformerLength_ (this),
        TransformerWidth_ (this),
        UniformatClassification_ (this),
        Unitdepth_ (this),
        UnitHeight_ (this),
        UnitLength_ (this),
        UnitWidth_ (this),
        Visible1_ (this),
        Visible2_ (this),
        Voltage_ (this),
        WaterFlow_ (this),
        WaterPressure_ (this),
        Width1_ (this),
        Width2_ (this),
        Width3_ (this),
        Width4_ (this),
        Width5_ (this),
        Width6_ (this),
        Width7_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimBuildingElementProxy::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::SimModelCore::SimBuildingElement::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Name
          //
          if (n.name () == "Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Name_type > r (
              Name_traits::create (i, f, this));

            if (!this->Name_)
            {
              this->Name_.set (r);
              continue;
            }
          }

          // Representation
          //
          if (n.name () == "Representation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Representation_type > r (
              Representation_traits::create (i, f, this));

            if (!this->Representation_)
            {
              this->Representation_.set (r);
              continue;
            }
          }

          // CompositionType
          //
          if (n.name () == "CompositionType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< CompositionType_type > r (
              CompositionType_traits::create (i, f, this));

            if (!this->CompositionType_)
            {
              this->CompositionType_.set (r);
              continue;
            }
          }

          // AHUHeight
          //
          if (n.name () == "AHUHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->AHUHeight_)
            {
              this->AHUHeight_.set (AHUHeight_traits::create (i, f, this));
              continue;
            }
          }

          // AHUWidth
          //
          if (n.name () == "AHUWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->AHUWidth_)
            {
              this->AHUWidth_.set (AHUWidth_traits::create (i, f, this));
              continue;
            }
          }

          // AirFlow
          //
          if (n.name () == "AirFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->AirFlow_)
            {
              this->AirFlow_.set (AirFlow_traits::create (i, f, this));
              continue;
            }
          }

          // AirflowReturn
          //
          if (n.name () == "AirflowReturn" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->AirflowReturn_)
            {
              this->AirflowReturn_.set (AirflowReturn_traits::create (i, f, this));
              continue;
            }
          }

          // AirflowSupply
          //
          if (n.name () == "AirflowSupply" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->AirflowSupply_)
            {
              this->AirflowSupply_.set (AirflowSupply_traits::create (i, f, this));
              continue;
            }
          }

          // AirPressure
          //
          if (n.name () == "AirPressure" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->AirPressure_)
            {
              this->AirPressure_.set (AirPressure_traits::create (i, f, this));
              continue;
            }
          }

          // AirwayLength
          //
          if (n.name () == "AirwayLength" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->AirwayLength_)
            {
              this->AirwayLength_.set (AirwayLength_traits::create (i, f, this));
              continue;
            }
          }

          // AlternatorVoltage
          //
          if (n.name () == "AlternatorVoltage" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->AlternatorVoltage_)
            {
              this->AlternatorVoltage_.set (AlternatorVoltage_traits::create (i, f, this));
              continue;
            }
          }

          // Ang
          //
          if (n.name () == "Ang" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Ang_)
            {
              this->Ang_.set (Ang_traits::create (i, f, this));
              continue;
            }
          }

          // ApparentLoad
          //
          if (n.name () == "ApparentLoad" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ApparentLoad_)
            {
              this->ApparentLoad_.set (ApparentLoad_traits::create (i, f, this));
              continue;
            }
          }

          // ApparentLoadPhaseA
          //
          if (n.name () == "ApparentLoadPhaseA" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ApparentLoadPhaseA_)
            {
              this->ApparentLoadPhaseA_.set (ApparentLoadPhaseA_traits::create (i, f, this));
              continue;
            }
          }

          // ApparentLoadPhaseB
          //
          if (n.name () == "ApparentLoadPhaseB" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ApparentLoadPhaseB_)
            {
              this->ApparentLoadPhaseB_.set (ApparentLoadPhaseB_traits::create (i, f, this));
              continue;
            }
          }

          // ApparentLoadPhaseC
          //
          if (n.name () == "ApparentLoadPhaseC" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ApparentLoadPhaseC_)
            {
              this->ApparentLoadPhaseC_.set (ApparentLoadPhaseC_traits::create (i, f, this));
              continue;
            }
          }

          // AverageSolarTransmittance
          //
          if (n.name () == "AverageSolarTransmittance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->AverageSolarTransmittance_)
            {
              this->AverageSolarTransmittance_.set (AverageSolarTransmittance_traits::create (i, f, this));
              continue;
            }
          }

          // AverageVisibleTransmittance
          //
          if (n.name () == "AverageVisibleTransmittance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->AverageVisibleTransmittance_)
            {
              this->AverageVisibleTransmittance_.set (AverageVisibleTransmittance_traits::create (i, f, this));
              continue;
            }
          }

          // Azimuth
          //
          if (n.name () == "Azimuth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Azimuth_)
            {
              this->Azimuth_.set (Azimuth_traits::create (i, f, this));
              continue;
            }
          }

          // BaseHeight
          //
          if (n.name () == "BaseHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->BaseHeight_)
            {
              this->BaseHeight_.set (BaseHeight_traits::create (i, f, this));
              continue;
            }
          }

          // BaseLength
          //
          if (n.name () == "BaseLength" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->BaseLength_)
            {
              this->BaseLength_.set (BaseLength_traits::create (i, f, this));
              continue;
            }
          }

          // Buildingstoreyname
          //
          if (n.name () == "Buildingstoreyname" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Buildingstoreyname_type > r (
              Buildingstoreyname_traits::create (i, f, this));

            if (!this->Buildingstoreyname_)
            {
              this->Buildingstoreyname_.set (r);
              continue;
            }
          }

          // C1Offset1
          //
          if (n.name () == "C1Offset1" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->C1Offset1_)
            {
              this->C1Offset1_.set (C1Offset1_traits::create (i, f, this));
              continue;
            }
          }

          // C1Offset2
          //
          if (n.name () == "C1Offset2" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->C1Offset2_)
            {
              this->C1Offset2_.set (C1Offset2_traits::create (i, f, this));
              continue;
            }
          }

          // C2Offset1
          //
          if (n.name () == "C2Offset1" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->C2Offset1_)
            {
              this->C2Offset1_.set (C2Offset1_traits::create (i, f, this));
              continue;
            }
          }

          // C2Offset2
          //
          if (n.name () == "C2Offset2" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->C2Offset2_)
            {
              this->C2Offset2_.set (C2Offset2_traits::create (i, f, this));
              continue;
            }
          }

          // C3Offset1
          //
          if (n.name () == "C3Offset1" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->C3Offset1_)
            {
              this->C3Offset1_.set (C3Offset1_traits::create (i, f, this));
              continue;
            }
          }

          // C4Offset2
          //
          if (n.name () == "C4Offset2" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->C4Offset2_)
            {
              this->C4Offset2_.set (C4Offset2_traits::create (i, f, this));
              continue;
            }
          }

          // C5Offset1
          //
          if (n.name () == "C5Offset1" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->C5Offset1_)
            {
              this->C5Offset1_.set (C5Offset1_traits::create (i, f, this));
              continue;
            }
          }

          // C5Offset2
          //
          if (n.name () == "C5Offset2" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->C5Offset2_)
            {
              this->C5Offset2_.set (C5Offset2_traits::create (i, f, this));
              continue;
            }
          }

          // C6Offset1
          //
          if (n.name () == "C6Offset1" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->C6Offset1_)
            {
              this->C6Offset1_.set (C6Offset1_traits::create (i, f, this));
              continue;
            }
          }

          // C6Offset2
          //
          if (n.name () == "C6Offset2" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->C6Offset2_)
            {
              this->C6Offset2_.set (C6Offset2_traits::create (i, f, this));
              continue;
            }
          }

          // ChilledWaterFlow
          //
          if (n.name () == "ChilledWaterFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ChilledWaterFlow_)
            {
              this->ChilledWaterFlow_.set (ChilledWaterFlow_traits::create (i, f, this));
              continue;
            }
          }

          // ChilledWaterPressureDrop
          //
          if (n.name () == "ChilledWaterPressureDrop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ChilledWaterPressureDrop_)
            {
              this->ChilledWaterPressureDrop_.set (ChilledWaterPressureDrop_traits::create (i, f, this));
              continue;
            }
          }

          // CircuitNaming
          //
          if (n.name () == "CircuitNaming" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< CircuitNaming_type > r (
              CircuitNaming_traits::create (i, f, this));

            if (!this->CircuitNaming_)
            {
              this->CircuitNaming_.set (r);
              continue;
            }
          }

          // Color
          //
          if (n.name () == "Color" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Color_type > r (
              Color_traits::create (i, f, this));

            if (!this->Color_)
            {
              this->Color_.set (r);
              continue;
            }
          }

          // Connectionoffset
          //
          if (n.name () == "Connectionoffset" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Connectionoffset_)
            {
              this->Connectionoffset_.set (Connectionoffset_traits::create (i, f, this));
              continue;
            }
          }

          // ContainerName
          //
          if (n.name () == "ContainerName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ContainerName_type > r (
              ContainerName_traits::create (i, f, this));

            if (!this->ContainerName_)
            {
              this->ContainerName_.set (r);
              continue;
            }
          }

          // ContainerType
          //
          if (n.name () == "ContainerType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ContainerType_type > r (
              ContainerType_traits::create (i, f, this));

            if (!this->ContainerType_)
            {
              this->ContainerType_.set (r);
              continue;
            }
          }

          // CoolAirFlow
          //
          if (n.name () == "CoolAirFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->CoolAirFlow_)
            {
              this->CoolAirFlow_.set (CoolAirFlow_traits::create (i, f, this));
              continue;
            }
          }

          // CoolAirInletDiameter
          //
          if (n.name () == "CoolAirInletDiameter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->CoolAirInletDiameter_)
            {
              this->CoolAirInletDiameter_.set (CoolAirInletDiameter_traits::create (i, f, this));
              continue;
            }
          }

          // CoolAirInletRadius
          //
          if (n.name () == "CoolAirInletRadius" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->CoolAirInletRadius_)
            {
              this->CoolAirInletRadius_.set (CoolAirInletRadius_traits::create (i, f, this));
              continue;
            }
          }

          // CoolAirPressureDrop
          //
          if (n.name () == "CoolAirPressureDrop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->CoolAirPressureDrop_)
            {
              this->CoolAirPressureDrop_.set (CoolAirPressureDrop_traits::create (i, f, this));
              continue;
            }
          }

          // CoolingCoilInletRadius
          //
          if (n.name () == "CoolingCoilInletRadius" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->CoolingCoilInletRadius_)
            {
              this->CoolingCoilInletRadius_.set (CoolingCoilInletRadius_traits::create (i, f, this));
              continue;
            }
          }

          // CoolingCoilOutletRadius
          //
          if (n.name () == "CoolingCoilOutletRadius" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->CoolingCoilOutletRadius_)
            {
              this->CoolingCoilOutletRadius_.set (CoolingCoilOutletRadius_traits::create (i, f, this));
              continue;
            }
          }

          // CoolingWaterDiameter
          //
          if (n.name () == "CoolingWaterDiameter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->CoolingWaterDiameter_)
            {
              this->CoolingWaterDiameter_.set (CoolingWaterDiameter_traits::create (i, f, this));
              continue;
            }
          }

          // CoolingWaterFlow
          //
          if (n.name () == "CoolingWaterFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->CoolingWaterFlow_)
            {
              this->CoolingWaterFlow_.set (CoolingWaterFlow_traits::create (i, f, this));
              continue;
            }
          }

          // CoolingWaterPressureDrop
          //
          if (n.name () == "CoolingWaterPressureDrop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->CoolingWaterPressureDrop_)
            {
              this->CoolingWaterPressureDrop_.set (CoolingWaterPressureDrop_traits::create (i, f, this));
              continue;
            }
          }

          // CoolingWaterRadius
          //
          if (n.name () == "CoolingWaterRadius" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->CoolingWaterRadius_)
            {
              this->CoolingWaterRadius_.set (CoolingWaterRadius_traits::create (i, f, this));
              continue;
            }
          }

          // Diameter1
          //
          if (n.name () == "Diameter1" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Diameter1_)
            {
              this->Diameter1_.set (Diameter1_traits::create (i, f, this));
              continue;
            }
          }

          // Distance
          //
          if (n.name () == "Distance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Distance_)
            {
              this->Distance_.set (Distance_traits::create (i, f, this));
              continue;
            }
          }

          // Distance1
          //
          if (n.name () == "Distance1" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Distance1_)
            {
              this->Distance1_.set (Distance1_traits::create (i, f, this));
              continue;
            }
          }

          // Distance2
          //
          if (n.name () == "Distance2" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Distance2_)
            {
              this->Distance2_.set (Distance2_traits::create (i, f, this));
              continue;
            }
          }

          // DrainFlow
          //
          if (n.name () == "DrainFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->DrainFlow_)
            {
              this->DrainFlow_.set (DrainFlow_traits::create (i, f, this));
              continue;
            }
          }

          // DrainOffset1
          //
          if (n.name () == "DrainOffset1" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->DrainOffset1_)
            {
              this->DrainOffset1_.set (DrainOffset1_traits::create (i, f, this));
              continue;
            }
          }

          // DrainRadius
          //
          if (n.name () == "DrainRadius" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->DrainRadius_)
            {
              this->DrainRadius_.set (DrainRadius_traits::create (i, f, this));
              continue;
            }
          }

          // DuctHeight
          //
          if (n.name () == "DuctHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->DuctHeight_)
            {
              this->DuctHeight_.set (DuctHeight_traits::create (i, f, this));
              continue;
            }
          }

          // DuctWidth
          //
          if (n.name () == "DuctWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->DuctWidth_)
            {
              this->DuctWidth_.set (DuctWidth_traits::create (i, f, this));
              continue;
            }
          }

          // ElectricalCircuitName
          //
          if (n.name () == "ElectricalCircuitName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ElectricalCircuitName_type > r (
              ElectricalCircuitName_traits::create (i, f, this));

            if (!this->ElectricalCircuitName_)
            {
              this->ElectricalCircuitName_.set (r);
              continue;
            }
          }

          // ElectricalData
          //
          if (n.name () == "ElectricalData" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ElectricalData_type > r (
              ElectricalData_traits::create (i, f, this));

            if (!this->ElectricalData_)
            {
              this->ElectricalData_.set (r);
              continue;
            }
          }

          // Enclosure
          //
          if (n.name () == "Enclosure" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Enclosure_type > r (
              Enclosure_traits::create (i, f, this));

            if (!this->Enclosure_)
            {
              this->Enclosure_.set (r);
              continue;
            }
          }

          // ExternalStaticPressure
          //
          if (n.name () == "ExternalStaticPressure" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ExternalStaticPressure_)
            {
              this->ExternalStaticPressure_.set (ExternalStaticPressure_traits::create (i, f, this));
              continue;
            }
          }

          // ExternalTotalPressure
          //
          if (n.name () == "ExternalTotalPressure" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ExternalTotalPressure_)
            {
              this->ExternalTotalPressure_.set (ExternalTotalPressure_traits::create (i, f, this));
              continue;
            }
          }

          // FanAirFlow
          //
          if (n.name () == "FanAirFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->FanAirFlow_)
            {
              this->FanAirFlow_.set (FanAirFlow_traits::create (i, f, this));
              continue;
            }
          }

          // FanDiameter
          //
          if (n.name () == "FanDiameter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->FanDiameter_)
            {
              this->FanDiameter_.set (FanDiameter_traits::create (i, f, this));
              continue;
            }
          }

          // FanRadius
          //
          if (n.name () == "FanRadius" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->FanRadius_)
            {
              this->FanRadius_.set (FanRadius_traits::create (i, f, this));
              continue;
            }
          }

          // GeneratorHeight
          //
          if (n.name () == "GeneratorHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->GeneratorHeight_)
            {
              this->GeneratorHeight_.set (GeneratorHeight_traits::create (i, f, this));
              continue;
            }
          }

          // GeneratorLength
          //
          if (n.name () == "GeneratorLength" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->GeneratorLength_)
            {
              this->GeneratorLength_.set (GeneratorLength_traits::create (i, f, this));
              continue;
            }
          }

          // GeneratorWidth
          //
          if (n.name () == "GeneratorWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->GeneratorWidth_)
            {
              this->GeneratorWidth_.set (GeneratorWidth_traits::create (i, f, this));
              continue;
            }
          }

          // GroupName
          //
          if (n.name () == "GroupName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< GroupName_type > r (
              GroupName_traits::create (i, f, this));

            if (!this->GroupName_)
            {
              this->GroupName_.set (r);
              continue;
            }
          }

          // HalfAirOutletHeight
          //
          if (n.name () == "HalfAirOutletHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->HalfAirOutletHeight_)
            {
              this->HalfAirOutletHeight_.set (HalfAirOutletHeight_traits::create (i, f, this));
              continue;
            }
          }

          // HalfAirOutletWidth
          //
          if (n.name () == "HalfAirOutletWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->HalfAirOutletWidth_)
            {
              this->HalfAirOutletWidth_.set (HalfAirOutletWidth_traits::create (i, f, this));
              continue;
            }
          }

          // HalfOverallHeight
          //
          if (n.name () == "HalfOverallHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->HalfOverallHeight_)
            {
              this->HalfOverallHeight_.set (HalfOverallHeight_traits::create (i, f, this));
              continue;
            }
          }

          // HalfOverallWidth
          //
          if (n.name () == "HalfOverallWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->HalfOverallWidth_)
            {
              this->HalfOverallWidth_.set (HalfOverallWidth_traits::create (i, f, this));
              continue;
            }
          }

          // HalfWidth4
          //
          if (n.name () == "HalfWidth4" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->HalfWidth4_)
            {
              this->HalfWidth4_.set (HalfWidth4_traits::create (i, f, this));
              continue;
            }
          }

          // HeatAirFlow
          //
          if (n.name () == "HeatAirFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->HeatAirFlow_)
            {
              this->HeatAirFlow_.set (HeatAirFlow_traits::create (i, f, this));
              continue;
            }
          }

          // HeatAirInletDiameter
          //
          if (n.name () == "HeatAirInletDiameter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->HeatAirInletDiameter_)
            {
              this->HeatAirInletDiameter_.set (HeatAirInletDiameter_traits::create (i, f, this));
              continue;
            }
          }

          // HeatAirInletRadius
          //
          if (n.name () == "HeatAirInletRadius" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->HeatAirInletRadius_)
            {
              this->HeatAirInletRadius_.set (HeatAirInletRadius_traits::create (i, f, this));
              continue;
            }
          }

          // HeatAirPressureDrop
          //
          if (n.name () == "HeatAirPressureDrop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->HeatAirPressureDrop_)
            {
              this->HeatAirPressureDrop_.set (HeatAirPressureDrop_traits::create (i, f, this));
              continue;
            }
          }

          // HeatLoss
          //
          if (n.name () == "HeatLoss" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->HeatLoss_)
            {
              this->HeatLoss_.set (HeatLoss_traits::create (i, f, this));
              continue;
            }
          }

          // HeatingCoilInletRadius
          //
          if (n.name () == "HeatingCoilInletRadius" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->HeatingCoilInletRadius_)
            {
              this->HeatingCoilInletRadius_.set (HeatingCoilInletRadius_traits::create (i, f, this));
              continue;
            }
          }

          // HeatingCoilOutletRadius
          //
          if (n.name () == "HeatingCoilOutletRadius" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->HeatingCoilOutletRadius_)
            {
              this->HeatingCoilOutletRadius_.set (HeatingCoilOutletRadius_traits::create (i, f, this));
              continue;
            }
          }

          // Height1
          //
          if (n.name () == "Height1" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Height1_)
            {
              this->Height1_.set (Height1_traits::create (i, f, this));
              continue;
            }
          }

          // Height2
          //
          if (n.name () == "Height2" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Height2_)
            {
              this->Height2_.set (Height2_traits::create (i, f, this));
              continue;
            }
          }

          // Height3
          //
          if (n.name () == "Height3" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Height3_)
            {
              this->Height3_.set (Height3_traits::create (i, f, this));
              continue;
            }
          }

          // Height4
          //
          if (n.name () == "Height4" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Height4_)
            {
              this->Height4_.set (Height4_traits::create (i, f, this));
              continue;
            }
          }

          // Height5
          //
          if (n.name () == "Height5" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Height5_)
            {
              this->Height5_.set (Height5_traits::create (i, f, this));
              continue;
            }
          }

          // Height6
          //
          if (n.name () == "Height6" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Height6_)
            {
              this->Height6_.set (Height6_traits::create (i, f, this));
              continue;
            }
          }

          // Height7
          //
          if (n.name () == "Height7" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Height7_)
            {
              this->Height7_.set (Height7_traits::create (i, f, this));
              continue;
            }
          }

          // Height8
          //
          if (n.name () == "Height8" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Height8_)
            {
              this->Height8_.set (Height8_traits::create (i, f, this));
              continue;
            }
          }

          // Height9
          //
          if (n.name () == "Height9" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Height9_)
            {
              this->Height9_.set (Height9_traits::create (i, f, this));
              continue;
            }
          }

          // Host
          //
          if (n.name () == "Host" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Host_type > r (
              Host_traits::create (i, f, this));

            if (!this->Host_)
            {
              this->Host_.set (r);
              continue;
            }
          }

          // HotWaterFlow
          //
          if (n.name () == "HotWaterFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->HotWaterFlow_)
            {
              this->HotWaterFlow_.set (HotWaterFlow_traits::create (i, f, this));
              continue;
            }
          }

          // HotWaterPressureDrop
          //
          if (n.name () == "HotWaterPressureDrop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->HotWaterPressureDrop_)
            {
              this->HotWaterPressureDrop_.set (HotWaterPressureDrop_traits::create (i, f, this));
              continue;
            }
          }

          // Inclination
          //
          if (n.name () == "Inclination" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Inclination_)
            {
              this->Inclination_.set (Inclination_traits::create (i, f, this));
              continue;
            }
          }

          // InletDiameter
          //
          if (n.name () == "InletDiameter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->InletDiameter_)
            {
              this->InletDiameter_.set (InletDiameter_traits::create (i, f, this));
              continue;
            }
          }

          // InletRadius
          //
          if (n.name () == "InletRadius" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->InletRadius_)
            {
              this->InletRadius_.set (InletRadius_traits::create (i, f, this));
              continue;
            }
          }

          // Length1
          //
          if (n.name () == "Length1" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Length1_)
            {
              this->Length1_.set (Length1_traits::create (i, f, this));
              continue;
            }
          }

          // Length2
          //
          if (n.name () == "Length2" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Length2_)
            {
              this->Length2_.set (Length2_traits::create (i, f, this));
              continue;
            }
          }

          // Length3
          //
          if (n.name () == "Length3" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Length3_)
            {
              this->Length3_.set (Length3_traits::create (i, f, this));
              continue;
            }
          }

          // Length4
          //
          if (n.name () == "Length4" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Length4_)
            {
              this->Length4_.set (Length4_traits::create (i, f, this));
              continue;
            }
          }

          // Length5
          //
          if (n.name () == "Length5" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Length5_)
            {
              this->Length5_.set (Length5_traits::create (i, f, this));
              continue;
            }
          }

          // Length6
          //
          if (n.name () == "Length6" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Length6_)
            {
              this->Length6_.set (Length6_traits::create (i, f, this));
              continue;
            }
          }

          // Length7
          //
          if (n.name () == "Length7" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Length7_)
            {
              this->Length7_.set (Length7_traits::create (i, f, this));
              continue;
            }
          }

          // Length8
          //
          if (n.name () == "Length8" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Length8_)
            {
              this->Length8_.set (Length8_traits::create (i, f, this));
              continue;
            }
          }

          // Length9
          //
          if (n.name () == "Length9" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Length9_)
            {
              this->Length9_.set (Length9_traits::create (i, f, this));
              continue;
            }
          }

          // Length10
          //
          if (n.name () == "Length10" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Length10_)
            {
              this->Length10_.set (Length10_traits::create (i, f, this));
              continue;
            }
          }

          // Length11
          //
          if (n.name () == "Length11" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Length11_)
            {
              this->Length11_.set (Length11_traits::create (i, f, this));
              continue;
            }
          }

          // Length12
          //
          if (n.name () == "Length12" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Length12_)
            {
              this->Length12_.set (Length12_traits::create (i, f, this));
              continue;
            }
          }

          // Length13
          //
          if (n.name () == "Length13" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Length13_)
            {
              this->Length13_.set (Length13_traits::create (i, f, this));
              continue;
            }
          }

          // Level
          //
          if (n.name () == "Level" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Level_type > r (
              Level_traits::create (i, f, this));

            if (!this->Level_)
            {
              this->Level_.set (r);
              continue;
            }
          }

          // LoadClassification
          //
          if (n.name () == "LoadClassification" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< LoadClassification_type > r (
              LoadClassification_traits::create (i, f, this));

            if (!this->LoadClassification_)
            {
              this->LoadClassification_.set (r);
              continue;
            }
          }

          // MakeUpWaterFlow
          //
          if (n.name () == "MakeUpWaterFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->MakeUpWaterFlow_)
            {
              this->MakeUpWaterFlow_.set (MakeUpWaterFlow_traits::create (i, f, this));
              continue;
            }
          }

          // MakeUpWaterPressureDrop
          //
          if (n.name () == "MakeUpWaterPressureDrop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->MakeUpWaterPressureDrop_)
            {
              this->MakeUpWaterPressureDrop_.set (MakeUpWaterPressureDrop_traits::create (i, f, this));
              continue;
            }
          }

          // MakeUpWaterRadius
          //
          if (n.name () == "MakeUpWaterRadius" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->MakeUpWaterRadius_)
            {
              this->MakeUpWaterRadius_.set (MakeUpWaterRadius_traits::create (i, f, this));
              continue;
            }
          }

          // ManufacturerArticleNumber
          //
          if (n.name () == "ManufacturerArticleNumber" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ManufacturerArticleNumber_type > r (
              ManufacturerArticleNumber_traits::create (i, f, this));

            if (!this->ManufacturerArticleNumber_)
            {
              this->ManufacturerArticleNumber_.set (r);
              continue;
            }
          }

          // ManufacturerModelName
          //
          if (n.name () == "ManufacturerModelName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ManufacturerModelName_type > r (
              ManufacturerModelName_traits::create (i, f, this));

            if (!this->ManufacturerModelName_)
            {
              this->ManufacturerModelName_.set (r);
              continue;
            }
          }

          // ManufacturerModelNumber
          //
          if (n.name () == "ManufacturerModelNumber" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ManufacturerModelNumber_type > r (
              ManufacturerModelNumber_traits::create (i, f, this));

            if (!this->ManufacturerModelNumber_)
            {
              this->ManufacturerModelNumber_.set (r);
              continue;
            }
          }

          // ManufacturerName
          //
          if (n.name () == "ManufacturerName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ManufacturerName_type > r (
              ManufacturerName_traits::create (i, f, this));

            if (!this->ManufacturerName_)
            {
              this->ManufacturerName_.set (r);
              continue;
            }
          }

          // ManufacturerYearofProduction
          //
          if (n.name () == "ManufacturerYearofProduction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ManufacturerYearofProduction_type > r (
              ManufacturerYearofProduction_traits::create (i, f, this));

            if (!this->ManufacturerYearofProduction_)
            {
              this->ManufacturerYearofProduction_.set (r);
              continue;
            }
          }

          // Mark
          //
          if (n.name () == "Mark" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Mark_type > r (
              Mark_traits::create (i, f, this));

            if (!this->Mark_)
            {
              this->Mark_.set (r);
              continue;
            }
          }

          // Material
          //
          if (n.name () == "Material" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Material_type > r (
              Material_traits::create (i, f, this));

            if (!this->Material_)
            {
              this->Material_.set (r);
              continue;
            }
          }

          // Max1PoleBreakers
          //
          if (n.name () == "Max1PoleBreakers" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Max1PoleBreakers_)
            {
              this->Max1PoleBreakers_.set (Max1PoleBreakers_traits::create (i, f, this));
              continue;
            }
          }

          // MaxFlow
          //
          if (n.name () == "MaxFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->MaxFlow_)
            {
              this->MaxFlow_.set (MaxFlow_traits::create (i, f, this));
              continue;
            }
          }

          // MinFlow
          //
          if (n.name () == "MinFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->MinFlow_)
            {
              this->MinFlow_.set (MinFlow_traits::create (i, f, this));
              continue;
            }
          }

          // Model
          //
          if (n.name () == "Model" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Model_type > r (
              Model_traits::create (i, f, this));

            if (!this->Model_)
            {
              this->Model_.set (r);
              continue;
            }
          }

          // MotorHP
          //
          if (n.name () == "MotorHP" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->MotorHP_)
            {
              this->MotorHP_.set (MotorHP_traits::create (i, f, this));
              continue;
            }
          }

          // NumberOfFans
          //
          if (n.name () == "NumberOfFans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->NumberOfFans_)
            {
              this->NumberOfFans_.set (NumberOfFans_traits::create (i, f, this));
              continue;
            }
          }

          // NumberOfPoles
          //
          if (n.name () == "NumberOfPoles" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->NumberOfPoles_)
            {
              this->NumberOfPoles_.set (NumberOfPoles_traits::create (i, f, this));
              continue;
            }
          }

          // ObjectClassName
          //
          if (n.name () == "ObjectClassName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ObjectClassName_type > r (
              ObjectClassName_traits::create (i, f, this));

            if (!this->ObjectClassName_)
            {
              this->ObjectClassName_.set (r);
              continue;
            }
          }

          // Offset
          //
          if (n.name () == "Offset" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Offset_)
            {
              this->Offset_.set (Offset_traits::create (i, f, this));
              continue;
            }
          }

          // OmniclassNumber
          //
          if (n.name () == "OmniclassNumber" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< OmniclassNumber_type > r (
              OmniclassNumber_traits::create (i, f, this));

            if (!this->OmniclassNumber_)
            {
              this->OmniclassNumber_.set (r);
              continue;
            }
          }

          // OmniclassTitle
          //
          if (n.name () == "OmniclassTitle" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< OmniclassTitle_type > r (
              OmniclassTitle_traits::create (i, f, this));

            if (!this->OmniclassTitle_)
            {
              this->OmniclassTitle_.set (r);
              continue;
            }
          }

          // OutletDiameter
          //
          if (n.name () == "OutletDiameter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->OutletDiameter_)
            {
              this->OutletDiameter_.set (OutletDiameter_traits::create (i, f, this));
              continue;
            }
          }

          // OutletRadius
          //
          if (n.name () == "OutletRadius" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->OutletRadius_)
            {
              this->OutletRadius_.set (OutletRadius_traits::create (i, f, this));
              continue;
            }
          }

          // OverallHeight
          //
          if (n.name () == "OverallHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->OverallHeight_)
            {
              this->OverallHeight_.set (OverallHeight_traits::create (i, f, this));
              continue;
            }
          }

          // OverallLength
          //
          if (n.name () == "OverallLength" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->OverallLength_)
            {
              this->OverallLength_.set (OverallLength_traits::create (i, f, this));
              continue;
            }
          }

          // OverallWidth
          //
          if (n.name () == "OverallWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->OverallWidth_)
            {
              this->OverallWidth_.set (OverallWidth_traits::create (i, f, this));
              continue;
            }
          }

          // PanelHeight
          //
          if (n.name () == "PanelHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->PanelHeight_)
            {
              this->PanelHeight_.set (PanelHeight_traits::create (i, f, this));
              continue;
            }
          }

          // Partshape
          //
          if (n.name () == "Partshape" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Partshape_type > r (
              Partshape_traits::create (i, f, this));

            if (!this->Partshape_)
            {
              this->Partshape_.set (r);
              continue;
            }
          }

          // PhaseCreated
          //
          if (n.name () == "PhaseCreated" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< PhaseCreated_type > r (
              PhaseCreated_traits::create (i, f, this));

            if (!this->PhaseCreated_)
            {
              this->PhaseCreated_.set (r);
              continue;
            }
          }

          // PipeRadius
          //
          if (n.name () == "PipeRadius" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->PipeRadius_)
            {
              this->PipeRadius_.set (PipeRadius_traits::create (i, f, this));
              continue;
            }
          }

          // PrimaryNumberofPoles
          //
          if (n.name () == "PrimaryNumberofPoles" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->PrimaryNumberofPoles_)
            {
              this->PrimaryNumberofPoles_.set (PrimaryNumberofPoles_traits::create (i, f, this));
              continue;
            }
          }

          // PrimaryVoltage
          //
          if (n.name () == "PrimaryVoltage" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->PrimaryVoltage_)
            {
              this->PrimaryVoltage_.set (PrimaryVoltage_traits::create (i, f, this));
              continue;
            }
          }

          // PumpHeight
          //
          if (n.name () == "PumpHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->PumpHeight_)
            {
              this->PumpHeight_.set (PumpHeight_traits::create (i, f, this));
              continue;
            }
          }

          // PumpLength
          //
          if (n.name () == "PumpLength" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->PumpLength_)
            {
              this->PumpLength_.set (PumpLength_traits::create (i, f, this));
              continue;
            }
          }

          // PumpWidth
          //
          if (n.name () == "PumpWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->PumpWidth_)
            {
              this->PumpWidth_.set (PumpWidth_traits::create (i, f, this));
              continue;
            }
          }

          // Radius1
          //
          if (n.name () == "Radius1" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Radius1_)
            {
              this->Radius1_.set (Radius1_traits::create (i, f, this));
              continue;
            }
          }

          // Radius2
          //
          if (n.name () == "Radius2" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Radius2_)
            {
              this->Radius2_.set (Radius2_traits::create (i, f, this));
              continue;
            }
          }

          // Radius3
          //
          if (n.name () == "Radius3" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Radius3_)
            {
              this->Radius3_.set (Radius3_traits::create (i, f, this));
              continue;
            }
          }

          // Radius4
          //
          if (n.name () == "Radius4" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Radius4_)
            {
              this->Radius4_.set (Radius4_traits::create (i, f, this));
              continue;
            }
          }

          // Radius5
          //
          if (n.name () == "Radius5" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Radius5_)
            {
              this->Radius5_.set (Radius5_traits::create (i, f, this));
              continue;
            }
          }

          // Radius6
          //
          if (n.name () == "Radius6" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Radius6_)
            {
              this->Radius6_.set (Radius6_traits::create (i, f, this));
              continue;
            }
          }

          // Reference
          //
          if (n.name () == "Reference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Reference_type > r (
              Reference_traits::create (i, f, this));

            if (!this->Reference_)
            {
              this->Reference_.set (r);
              continue;
            }
          }

          // Reflectance
          //
          if (n.name () == "Reflectance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Reflectance_)
            {
              this->Reflectance_.set (Reflectance_traits::create (i, f, this));
              continue;
            }
          }

          // ReturnAirInletFlow
          //
          if (n.name () == "ReturnAirInletFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ReturnAirInletFlow_)
            {
              this->ReturnAirInletFlow_.set (ReturnAirInletFlow_traits::create (i, f, this));
              continue;
            }
          }

          // ReturnAirInletHeight
          //
          if (n.name () == "ReturnAirInletHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ReturnAirInletHeight_)
            {
              this->ReturnAirInletHeight_.set (ReturnAirInletHeight_traits::create (i, f, this));
              continue;
            }
          }

          // ReturnAirInletWidth
          //
          if (n.name () == "ReturnAirInletWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ReturnAirInletWidth_)
            {
              this->ReturnAirInletWidth_.set (ReturnAirInletWidth_traits::create (i, f, this));
              continue;
            }
          }

          // ReturnDuctHeight
          //
          if (n.name () == "ReturnDuctHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ReturnDuctHeight_)
            {
              this->ReturnDuctHeight_.set (ReturnDuctHeight_traits::create (i, f, this));
              continue;
            }
          }

          // ReturnDuctWidth
          //
          if (n.name () == "ReturnDuctWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ReturnDuctWidth_)
            {
              this->ReturnDuctWidth_.set (ReturnDuctWidth_traits::create (i, f, this));
              continue;
            }
          }

          // Returnheight
          //
          if (n.name () == "Returnheight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Returnheight_)
            {
              this->Returnheight_.set (Returnheight_traits::create (i, f, this));
              continue;
            }
          }

          // Returnwidth
          //
          if (n.name () == "Returnwidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Returnwidth_)
            {
              this->Returnwidth_.set (Returnwidth_traits::create (i, f, this));
              continue;
            }
          }

          // ReturnY_Offset
          //
          if (n.name () == "ReturnY_Offset" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ReturnY_Offset_)
            {
              this->ReturnY_Offset_.set (ReturnY_Offset_traits::create (i, f, this));
              continue;
            }
          }

          // ReturnZ_Offset
          //
          if (n.name () == "ReturnZ_Offset" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ReturnZ_Offset_)
            {
              this->ReturnZ_Offset_.set (ReturnZ_Offset_traits::create (i, f, this));
              continue;
            }
          }

          // Roughness
          //
          if (n.name () == "Roughness" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Roughness_)
            {
              this->Roughness_.set (Roughness_traits::create (i, f, this));
              continue;
            }
          }

          // ShadingDeviceType
          //
          if (n.name () == "ShadingDeviceType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ShadingDeviceType_type > r (
              ShadingDeviceType_traits::create (i, f, this));

            if (!this->ShadingDeviceType_)
            {
              this->ShadingDeviceType_.set (r);
              continue;
            }
          }

          // SupplyAirInletDiameter
          //
          if (n.name () == "SupplyAirInletDiameter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SupplyAirInletDiameter_)
            {
              this->SupplyAirInletDiameter_.set (SupplyAirInletDiameter_traits::create (i, f, this));
              continue;
            }
          }

          // SupplyAirInletFlow
          //
          if (n.name () == "SupplyAirInletFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SupplyAirInletFlow_)
            {
              this->SupplyAirInletFlow_.set (SupplyAirInletFlow_traits::create (i, f, this));
              continue;
            }
          }

          // SupplyAirInletHeight
          //
          if (n.name () == "SupplyAirInletHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SupplyAirInletHeight_)
            {
              this->SupplyAirInletHeight_.set (SupplyAirInletHeight_traits::create (i, f, this));
              continue;
            }
          }

          // SupplyAirInletRadius
          //
          if (n.name () == "SupplyAirInletRadius" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SupplyAirInletRadius_)
            {
              this->SupplyAirInletRadius_.set (SupplyAirInletRadius_traits::create (i, f, this));
              continue;
            }
          }

          // SupplyAirInletWidth
          //
          if (n.name () == "SupplyAirInletWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SupplyAirInletWidth_)
            {
              this->SupplyAirInletWidth_.set (SupplyAirInletWidth_traits::create (i, f, this));
              continue;
            }
          }

          // SupplyAirOutletFlow
          //
          if (n.name () == "SupplyAirOutletFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SupplyAirOutletFlow_)
            {
              this->SupplyAirOutletFlow_.set (SupplyAirOutletFlow_traits::create (i, f, this));
              continue;
            }
          }

          // SupplyAirOutletHeight
          //
          if (n.name () == "SupplyAirOutletHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SupplyAirOutletHeight_)
            {
              this->SupplyAirOutletHeight_.set (SupplyAirOutletHeight_traits::create (i, f, this));
              continue;
            }
          }

          // SupplyAirOutletWidth
          //
          if (n.name () == "SupplyAirOutletWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SupplyAirOutletWidth_)
            {
              this->SupplyAirOutletWidth_.set (SupplyAirOutletWidth_traits::create (i, f, this));
              continue;
            }
          }

          // SupplyAirPressureDrop
          //
          if (n.name () == "SupplyAirPressureDrop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SupplyAirPressureDrop_)
            {
              this->SupplyAirPressureDrop_.set (SupplyAirPressureDrop_traits::create (i, f, this));
              continue;
            }
          }

          // SupplyDuctHeight
          //
          if (n.name () == "SupplyDuctHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SupplyDuctHeight_)
            {
              this->SupplyDuctHeight_.set (SupplyDuctHeight_traits::create (i, f, this));
              continue;
            }
          }

          // SupplyDuctWidth
          //
          if (n.name () == "SupplyDuctWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SupplyDuctWidth_)
            {
              this->SupplyDuctWidth_.set (SupplyDuctWidth_traits::create (i, f, this));
              continue;
            }
          }

          // Supplyheight
          //
          if (n.name () == "Supplyheight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Supplyheight_)
            {
              this->Supplyheight_.set (Supplyheight_traits::create (i, f, this));
              continue;
            }
          }

          // Supplywidth
          //
          if (n.name () == "Supplywidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Supplywidth_)
            {
              this->Supplywidth_.set (Supplywidth_traits::create (i, f, this));
              continue;
            }
          }

          // Supply_ReturnSymbols
          //
          if (n.name () == "Supply_ReturnSymbols" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Supply_ReturnSymbols_)
            {
              this->Supply_ReturnSymbols_.set (Supply_ReturnSymbols_traits::create (i, f, this));
              continue;
            }
          }

          // SupplyY_Offset
          //
          if (n.name () == "SupplyY_Offset" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SupplyY_Offset_)
            {
              this->SupplyY_Offset_.set (SupplyY_Offset_traits::create (i, f, this));
              continue;
            }
          }

          // SupplyZ_Offset
          //
          if (n.name () == "SupplyZ_Offset" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SupplyZ_Offset_)
            {
              this->SupplyZ_Offset_.set (SupplyZ_Offset_traits::create (i, f, this));
              continue;
            }
          }

          // SystemClassification
          //
          if (n.name () == "SystemClassification" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SystemClassification_type > r (
              SystemClassification_traits::create (i, f, this));

            if (!this->SystemClassification_)
            {
              this->SystemClassification_.set (r);
              continue;
            }
          }

          // SystemName
          //
          if (n.name () == "SystemName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SystemName_type > r (
              SystemName_traits::create (i, f, this));

            if (!this->SystemName_)
            {
              this->SystemName_.set (r);
              continue;
            }
          }

          // TiltRange
          //
          if (n.name () == "TiltRange" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->TiltRange_)
            {
              this->TiltRange_.set (TiltRange_traits::create (i, f, this));
              continue;
            }
          }

          // TotalConnected
          //
          if (n.name () == "TotalConnected" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->TotalConnected_)
            {
              this->TotalConnected_.set (TotalConnected_traits::create (i, f, this));
              continue;
            }
          }

          // TotalDemandFactor
          //
          if (n.name () == "TotalDemandFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->TotalDemandFactor_)
            {
              this->TotalDemandFactor_.set (TotalDemandFactor_traits::create (i, f, this));
              continue;
            }
          }

          // TotalEstimatedDemand
          //
          if (n.name () == "TotalEstimatedDemand" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->TotalEstimatedDemand_)
            {
              this->TotalEstimatedDemand_.set (TotalEstimatedDemand_traits::create (i, f, this));
              continue;
            }
          }

          // TowerHeight
          //
          if (n.name () == "TowerHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->TowerHeight_)
            {
              this->TowerHeight_.set (TowerHeight_traits::create (i, f, this));
              continue;
            }
          }

          // TowerLength
          //
          if (n.name () == "TowerLength" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->TowerLength_)
            {
              this->TowerLength_.set (TowerLength_traits::create (i, f, this));
              continue;
            }
          }

          // TowerWidth
          //
          if (n.name () == "TowerWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->TowerWidth_)
            {
              this->TowerWidth_.set (TowerWidth_traits::create (i, f, this));
              continue;
            }
          }

          // TransformerHeight
          //
          if (n.name () == "TransformerHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->TransformerHeight_)
            {
              this->TransformerHeight_.set (TransformerHeight_traits::create (i, f, this));
              continue;
            }
          }

          // TransformerLength
          //
          if (n.name () == "TransformerLength" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->TransformerLength_)
            {
              this->TransformerLength_.set (TransformerLength_traits::create (i, f, this));
              continue;
            }
          }

          // TransformerWidth
          //
          if (n.name () == "TransformerWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->TransformerWidth_)
            {
              this->TransformerWidth_.set (TransformerWidth_traits::create (i, f, this));
              continue;
            }
          }

          // UniformatClassification
          //
          if (n.name () == "UniformatClassification" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< UniformatClassification_type > r (
              UniformatClassification_traits::create (i, f, this));

            if (!this->UniformatClassification_)
            {
              this->UniformatClassification_.set (r);
              continue;
            }
          }

          // Unitdepth
          //
          if (n.name () == "Unitdepth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Unitdepth_)
            {
              this->Unitdepth_.set (Unitdepth_traits::create (i, f, this));
              continue;
            }
          }

          // UnitHeight
          //
          if (n.name () == "UnitHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->UnitHeight_)
            {
              this->UnitHeight_.set (UnitHeight_traits::create (i, f, this));
              continue;
            }
          }

          // UnitLength
          //
          if (n.name () == "UnitLength" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->UnitLength_)
            {
              this->UnitLength_.set (UnitLength_traits::create (i, f, this));
              continue;
            }
          }

          // UnitWidth
          //
          if (n.name () == "UnitWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->UnitWidth_)
            {
              this->UnitWidth_.set (UnitWidth_traits::create (i, f, this));
              continue;
            }
          }

          // Visible1
          //
          if (n.name () == "Visible1" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Visible1_)
            {
              this->Visible1_.set (Visible1_traits::create (i, f, this));
              continue;
            }
          }

          // Visible2
          //
          if (n.name () == "Visible2" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Visible2_)
            {
              this->Visible2_.set (Visible2_traits::create (i, f, this));
              continue;
            }
          }

          // Voltage
          //
          if (n.name () == "Voltage" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Voltage_)
            {
              this->Voltage_.set (Voltage_traits::create (i, f, this));
              continue;
            }
          }

          // WaterFlow
          //
          if (n.name () == "WaterFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->WaterFlow_)
            {
              this->WaterFlow_.set (WaterFlow_traits::create (i, f, this));
              continue;
            }
          }

          // WaterPressure
          //
          if (n.name () == "WaterPressure" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->WaterPressure_)
            {
              this->WaterPressure_.set (WaterPressure_traits::create (i, f, this));
              continue;
            }
          }

          // Width1
          //
          if (n.name () == "Width1" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Width1_)
            {
              this->Width1_.set (Width1_traits::create (i, f, this));
              continue;
            }
          }

          // Width2
          //
          if (n.name () == "Width2" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Width2_)
            {
              this->Width2_.set (Width2_traits::create (i, f, this));
              continue;
            }
          }

          // Width3
          //
          if (n.name () == "Width3" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Width3_)
            {
              this->Width3_.set (Width3_traits::create (i, f, this));
              continue;
            }
          }

          // Width4
          //
          if (n.name () == "Width4" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Width4_)
            {
              this->Width4_.set (Width4_traits::create (i, f, this));
              continue;
            }
          }

          // Width5
          //
          if (n.name () == "Width5" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Width5_)
            {
              this->Width5_.set (Width5_traits::create (i, f, this));
              continue;
            }
          }

          // Width6
          //
          if (n.name () == "Width6" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Width6_)
            {
              this->Width6_.set (Width6_traits::create (i, f, this));
              continue;
            }
          }

          // Width7
          //
          if (n.name () == "Width7" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Width7_)
            {
              this->Width7_.set (Width7_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimBuildingElementProxy* SimBuildingElementProxy::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimBuildingElementProxy (*this, f, c);
      }

      SimBuildingElementProxy& SimBuildingElementProxy::
      operator= (const SimBuildingElementProxy& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::SimModelCore::SimBuildingElement& > (*this) = x;
          this->Name_ = x.Name_;
          this->Representation_ = x.Representation_;
          this->CompositionType_ = x.CompositionType_;
          this->AHUHeight_ = x.AHUHeight_;
          this->AHUWidth_ = x.AHUWidth_;
          this->AirFlow_ = x.AirFlow_;
          this->AirflowReturn_ = x.AirflowReturn_;
          this->AirflowSupply_ = x.AirflowSupply_;
          this->AirPressure_ = x.AirPressure_;
          this->AirwayLength_ = x.AirwayLength_;
          this->AlternatorVoltage_ = x.AlternatorVoltage_;
          this->Ang_ = x.Ang_;
          this->ApparentLoad_ = x.ApparentLoad_;
          this->ApparentLoadPhaseA_ = x.ApparentLoadPhaseA_;
          this->ApparentLoadPhaseB_ = x.ApparentLoadPhaseB_;
          this->ApparentLoadPhaseC_ = x.ApparentLoadPhaseC_;
          this->AverageSolarTransmittance_ = x.AverageSolarTransmittance_;
          this->AverageVisibleTransmittance_ = x.AverageVisibleTransmittance_;
          this->Azimuth_ = x.Azimuth_;
          this->BaseHeight_ = x.BaseHeight_;
          this->BaseLength_ = x.BaseLength_;
          this->Buildingstoreyname_ = x.Buildingstoreyname_;
          this->C1Offset1_ = x.C1Offset1_;
          this->C1Offset2_ = x.C1Offset2_;
          this->C2Offset1_ = x.C2Offset1_;
          this->C2Offset2_ = x.C2Offset2_;
          this->C3Offset1_ = x.C3Offset1_;
          this->C4Offset2_ = x.C4Offset2_;
          this->C5Offset1_ = x.C5Offset1_;
          this->C5Offset2_ = x.C5Offset2_;
          this->C6Offset1_ = x.C6Offset1_;
          this->C6Offset2_ = x.C6Offset2_;
          this->ChilledWaterFlow_ = x.ChilledWaterFlow_;
          this->ChilledWaterPressureDrop_ = x.ChilledWaterPressureDrop_;
          this->CircuitNaming_ = x.CircuitNaming_;
          this->Color_ = x.Color_;
          this->Connectionoffset_ = x.Connectionoffset_;
          this->ContainerName_ = x.ContainerName_;
          this->ContainerType_ = x.ContainerType_;
          this->CoolAirFlow_ = x.CoolAirFlow_;
          this->CoolAirInletDiameter_ = x.CoolAirInletDiameter_;
          this->CoolAirInletRadius_ = x.CoolAirInletRadius_;
          this->CoolAirPressureDrop_ = x.CoolAirPressureDrop_;
          this->CoolingCoilInletRadius_ = x.CoolingCoilInletRadius_;
          this->CoolingCoilOutletRadius_ = x.CoolingCoilOutletRadius_;
          this->CoolingWaterDiameter_ = x.CoolingWaterDiameter_;
          this->CoolingWaterFlow_ = x.CoolingWaterFlow_;
          this->CoolingWaterPressureDrop_ = x.CoolingWaterPressureDrop_;
          this->CoolingWaterRadius_ = x.CoolingWaterRadius_;
          this->Diameter1_ = x.Diameter1_;
          this->Distance_ = x.Distance_;
          this->Distance1_ = x.Distance1_;
          this->Distance2_ = x.Distance2_;
          this->DrainFlow_ = x.DrainFlow_;
          this->DrainOffset1_ = x.DrainOffset1_;
          this->DrainRadius_ = x.DrainRadius_;
          this->DuctHeight_ = x.DuctHeight_;
          this->DuctWidth_ = x.DuctWidth_;
          this->ElectricalCircuitName_ = x.ElectricalCircuitName_;
          this->ElectricalData_ = x.ElectricalData_;
          this->Enclosure_ = x.Enclosure_;
          this->ExternalStaticPressure_ = x.ExternalStaticPressure_;
          this->ExternalTotalPressure_ = x.ExternalTotalPressure_;
          this->FanAirFlow_ = x.FanAirFlow_;
          this->FanDiameter_ = x.FanDiameter_;
          this->FanRadius_ = x.FanRadius_;
          this->GeneratorHeight_ = x.GeneratorHeight_;
          this->GeneratorLength_ = x.GeneratorLength_;
          this->GeneratorWidth_ = x.GeneratorWidth_;
          this->GroupName_ = x.GroupName_;
          this->HalfAirOutletHeight_ = x.HalfAirOutletHeight_;
          this->HalfAirOutletWidth_ = x.HalfAirOutletWidth_;
          this->HalfOverallHeight_ = x.HalfOverallHeight_;
          this->HalfOverallWidth_ = x.HalfOverallWidth_;
          this->HalfWidth4_ = x.HalfWidth4_;
          this->HeatAirFlow_ = x.HeatAirFlow_;
          this->HeatAirInletDiameter_ = x.HeatAirInletDiameter_;
          this->HeatAirInletRadius_ = x.HeatAirInletRadius_;
          this->HeatAirPressureDrop_ = x.HeatAirPressureDrop_;
          this->HeatLoss_ = x.HeatLoss_;
          this->HeatingCoilInletRadius_ = x.HeatingCoilInletRadius_;
          this->HeatingCoilOutletRadius_ = x.HeatingCoilOutletRadius_;
          this->Height1_ = x.Height1_;
          this->Height2_ = x.Height2_;
          this->Height3_ = x.Height3_;
          this->Height4_ = x.Height4_;
          this->Height5_ = x.Height5_;
          this->Height6_ = x.Height6_;
          this->Height7_ = x.Height7_;
          this->Height8_ = x.Height8_;
          this->Height9_ = x.Height9_;
          this->Host_ = x.Host_;
          this->HotWaterFlow_ = x.HotWaterFlow_;
          this->HotWaterPressureDrop_ = x.HotWaterPressureDrop_;
          this->Inclination_ = x.Inclination_;
          this->InletDiameter_ = x.InletDiameter_;
          this->InletRadius_ = x.InletRadius_;
          this->Length1_ = x.Length1_;
          this->Length2_ = x.Length2_;
          this->Length3_ = x.Length3_;
          this->Length4_ = x.Length4_;
          this->Length5_ = x.Length5_;
          this->Length6_ = x.Length6_;
          this->Length7_ = x.Length7_;
          this->Length8_ = x.Length8_;
          this->Length9_ = x.Length9_;
          this->Length10_ = x.Length10_;
          this->Length11_ = x.Length11_;
          this->Length12_ = x.Length12_;
          this->Length13_ = x.Length13_;
          this->Level_ = x.Level_;
          this->LoadClassification_ = x.LoadClassification_;
          this->MakeUpWaterFlow_ = x.MakeUpWaterFlow_;
          this->MakeUpWaterPressureDrop_ = x.MakeUpWaterPressureDrop_;
          this->MakeUpWaterRadius_ = x.MakeUpWaterRadius_;
          this->ManufacturerArticleNumber_ = x.ManufacturerArticleNumber_;
          this->ManufacturerModelName_ = x.ManufacturerModelName_;
          this->ManufacturerModelNumber_ = x.ManufacturerModelNumber_;
          this->ManufacturerName_ = x.ManufacturerName_;
          this->ManufacturerYearofProduction_ = x.ManufacturerYearofProduction_;
          this->Mark_ = x.Mark_;
          this->Material_ = x.Material_;
          this->Max1PoleBreakers_ = x.Max1PoleBreakers_;
          this->MaxFlow_ = x.MaxFlow_;
          this->MinFlow_ = x.MinFlow_;
          this->Model_ = x.Model_;
          this->MotorHP_ = x.MotorHP_;
          this->NumberOfFans_ = x.NumberOfFans_;
          this->NumberOfPoles_ = x.NumberOfPoles_;
          this->ObjectClassName_ = x.ObjectClassName_;
          this->Offset_ = x.Offset_;
          this->OmniclassNumber_ = x.OmniclassNumber_;
          this->OmniclassTitle_ = x.OmniclassTitle_;
          this->OutletDiameter_ = x.OutletDiameter_;
          this->OutletRadius_ = x.OutletRadius_;
          this->OverallHeight_ = x.OverallHeight_;
          this->OverallLength_ = x.OverallLength_;
          this->OverallWidth_ = x.OverallWidth_;
          this->PanelHeight_ = x.PanelHeight_;
          this->Partshape_ = x.Partshape_;
          this->PhaseCreated_ = x.PhaseCreated_;
          this->PipeRadius_ = x.PipeRadius_;
          this->PrimaryNumberofPoles_ = x.PrimaryNumberofPoles_;
          this->PrimaryVoltage_ = x.PrimaryVoltage_;
          this->PumpHeight_ = x.PumpHeight_;
          this->PumpLength_ = x.PumpLength_;
          this->PumpWidth_ = x.PumpWidth_;
          this->Radius1_ = x.Radius1_;
          this->Radius2_ = x.Radius2_;
          this->Radius3_ = x.Radius3_;
          this->Radius4_ = x.Radius4_;
          this->Radius5_ = x.Radius5_;
          this->Radius6_ = x.Radius6_;
          this->Reference_ = x.Reference_;
          this->Reflectance_ = x.Reflectance_;
          this->ReturnAirInletFlow_ = x.ReturnAirInletFlow_;
          this->ReturnAirInletHeight_ = x.ReturnAirInletHeight_;
          this->ReturnAirInletWidth_ = x.ReturnAirInletWidth_;
          this->ReturnDuctHeight_ = x.ReturnDuctHeight_;
          this->ReturnDuctWidth_ = x.ReturnDuctWidth_;
          this->Returnheight_ = x.Returnheight_;
          this->Returnwidth_ = x.Returnwidth_;
          this->ReturnY_Offset_ = x.ReturnY_Offset_;
          this->ReturnZ_Offset_ = x.ReturnZ_Offset_;
          this->Roughness_ = x.Roughness_;
          this->ShadingDeviceType_ = x.ShadingDeviceType_;
          this->SupplyAirInletDiameter_ = x.SupplyAirInletDiameter_;
          this->SupplyAirInletFlow_ = x.SupplyAirInletFlow_;
          this->SupplyAirInletHeight_ = x.SupplyAirInletHeight_;
          this->SupplyAirInletRadius_ = x.SupplyAirInletRadius_;
          this->SupplyAirInletWidth_ = x.SupplyAirInletWidth_;
          this->SupplyAirOutletFlow_ = x.SupplyAirOutletFlow_;
          this->SupplyAirOutletHeight_ = x.SupplyAirOutletHeight_;
          this->SupplyAirOutletWidth_ = x.SupplyAirOutletWidth_;
          this->SupplyAirPressureDrop_ = x.SupplyAirPressureDrop_;
          this->SupplyDuctHeight_ = x.SupplyDuctHeight_;
          this->SupplyDuctWidth_ = x.SupplyDuctWidth_;
          this->Supplyheight_ = x.Supplyheight_;
          this->Supplywidth_ = x.Supplywidth_;
          this->Supply_ReturnSymbols_ = x.Supply_ReturnSymbols_;
          this->SupplyY_Offset_ = x.SupplyY_Offset_;
          this->SupplyZ_Offset_ = x.SupplyZ_Offset_;
          this->SystemClassification_ = x.SystemClassification_;
          this->SystemName_ = x.SystemName_;
          this->TiltRange_ = x.TiltRange_;
          this->TotalConnected_ = x.TotalConnected_;
          this->TotalDemandFactor_ = x.TotalDemandFactor_;
          this->TotalEstimatedDemand_ = x.TotalEstimatedDemand_;
          this->TowerHeight_ = x.TowerHeight_;
          this->TowerLength_ = x.TowerLength_;
          this->TowerWidth_ = x.TowerWidth_;
          this->TransformerHeight_ = x.TransformerHeight_;
          this->TransformerLength_ = x.TransformerLength_;
          this->TransformerWidth_ = x.TransformerWidth_;
          this->UniformatClassification_ = x.UniformatClassification_;
          this->Unitdepth_ = x.Unitdepth_;
          this->UnitHeight_ = x.UnitHeight_;
          this->UnitLength_ = x.UnitLength_;
          this->UnitWidth_ = x.UnitWidth_;
          this->Visible1_ = x.Visible1_;
          this->Visible2_ = x.Visible2_;
          this->Voltage_ = x.Voltage_;
          this->WaterFlow_ = x.WaterFlow_;
          this->WaterPressure_ = x.WaterPressure_;
          this->Width1_ = x.Width1_;
          this->Width2_ = x.Width2_;
          this->Width3_ = x.Width3_;
          this->Width4_ = x.Width4_;
          this->Width5_ = x.Width5_;
          this->Width6_ = x.Width6_;
          this->Width7_ = x.Width7_;
        }

        return *this;
      }

      SimBuildingElementProxy::
      ~SimBuildingElementProxy ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

