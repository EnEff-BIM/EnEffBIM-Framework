// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimCost_ComponentCost_Adjustments.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimCost_ComponentCost_Adjustments
      // 

      const SimCost_ComponentCost_Adjustments::SimCost_MiscellaneousCostperConditionedArea_optional& SimCost_ComponentCost_Adjustments::
      SimCost_MiscellaneousCostperConditionedArea () const
      {
        return this->SimCost_MiscellaneousCostperConditionedArea_;
      }

      SimCost_ComponentCost_Adjustments::SimCost_MiscellaneousCostperConditionedArea_optional& SimCost_ComponentCost_Adjustments::
      SimCost_MiscellaneousCostperConditionedArea ()
      {
        return this->SimCost_MiscellaneousCostperConditionedArea_;
      }

      void SimCost_ComponentCost_Adjustments::
      SimCost_MiscellaneousCostperConditionedArea (const SimCost_MiscellaneousCostperConditionedArea_type& x)
      {
        this->SimCost_MiscellaneousCostperConditionedArea_.set (x);
      }

      void SimCost_ComponentCost_Adjustments::
      SimCost_MiscellaneousCostperConditionedArea (const SimCost_MiscellaneousCostperConditionedArea_optional& x)
      {
        this->SimCost_MiscellaneousCostperConditionedArea_ = x;
      }

      const SimCost_ComponentCost_Adjustments::SimCost_DesignAndEngineeringFees_optional& SimCost_ComponentCost_Adjustments::
      SimCost_DesignAndEngineeringFees () const
      {
        return this->SimCost_DesignAndEngineeringFees_;
      }

      SimCost_ComponentCost_Adjustments::SimCost_DesignAndEngineeringFees_optional& SimCost_ComponentCost_Adjustments::
      SimCost_DesignAndEngineeringFees ()
      {
        return this->SimCost_DesignAndEngineeringFees_;
      }

      void SimCost_ComponentCost_Adjustments::
      SimCost_DesignAndEngineeringFees (const SimCost_DesignAndEngineeringFees_type& x)
      {
        this->SimCost_DesignAndEngineeringFees_.set (x);
      }

      void SimCost_ComponentCost_Adjustments::
      SimCost_DesignAndEngineeringFees (const SimCost_DesignAndEngineeringFees_optional& x)
      {
        this->SimCost_DesignAndEngineeringFees_ = x;
      }

      const SimCost_ComponentCost_Adjustments::SimCost_ContractorFee_optional& SimCost_ComponentCost_Adjustments::
      SimCost_ContractorFee () const
      {
        return this->SimCost_ContractorFee_;
      }

      SimCost_ComponentCost_Adjustments::SimCost_ContractorFee_optional& SimCost_ComponentCost_Adjustments::
      SimCost_ContractorFee ()
      {
        return this->SimCost_ContractorFee_;
      }

      void SimCost_ComponentCost_Adjustments::
      SimCost_ContractorFee (const SimCost_ContractorFee_type& x)
      {
        this->SimCost_ContractorFee_.set (x);
      }

      void SimCost_ComponentCost_Adjustments::
      SimCost_ContractorFee (const SimCost_ContractorFee_optional& x)
      {
        this->SimCost_ContractorFee_ = x;
      }

      const SimCost_ComponentCost_Adjustments::SimCost_Contingency_optional& SimCost_ComponentCost_Adjustments::
      SimCost_Contingency () const
      {
        return this->SimCost_Contingency_;
      }

      SimCost_ComponentCost_Adjustments::SimCost_Contingency_optional& SimCost_ComponentCost_Adjustments::
      SimCost_Contingency ()
      {
        return this->SimCost_Contingency_;
      }

      void SimCost_ComponentCost_Adjustments::
      SimCost_Contingency (const SimCost_Contingency_type& x)
      {
        this->SimCost_Contingency_.set (x);
      }

      void SimCost_ComponentCost_Adjustments::
      SimCost_Contingency (const SimCost_Contingency_optional& x)
      {
        this->SimCost_Contingency_ = x;
      }

      const SimCost_ComponentCost_Adjustments::SimCost_Permits_BondingAndInsurance_optional& SimCost_ComponentCost_Adjustments::
      SimCost_Permits_BondingAndInsurance () const
      {
        return this->SimCost_Permits_BondingAndInsurance_;
      }

      SimCost_ComponentCost_Adjustments::SimCost_Permits_BondingAndInsurance_optional& SimCost_ComponentCost_Adjustments::
      SimCost_Permits_BondingAndInsurance ()
      {
        return this->SimCost_Permits_BondingAndInsurance_;
      }

      void SimCost_ComponentCost_Adjustments::
      SimCost_Permits_BondingAndInsurance (const SimCost_Permits_BondingAndInsurance_type& x)
      {
        this->SimCost_Permits_BondingAndInsurance_.set (x);
      }

      void SimCost_ComponentCost_Adjustments::
      SimCost_Permits_BondingAndInsurance (const SimCost_Permits_BondingAndInsurance_optional& x)
      {
        this->SimCost_Permits_BondingAndInsurance_ = x;
      }

      const SimCost_ComponentCost_Adjustments::SimCost_CommissioningFee_optional& SimCost_ComponentCost_Adjustments::
      SimCost_CommissioningFee () const
      {
        return this->SimCost_CommissioningFee_;
      }

      SimCost_ComponentCost_Adjustments::SimCost_CommissioningFee_optional& SimCost_ComponentCost_Adjustments::
      SimCost_CommissioningFee ()
      {
        return this->SimCost_CommissioningFee_;
      }

      void SimCost_ComponentCost_Adjustments::
      SimCost_CommissioningFee (const SimCost_CommissioningFee_type& x)
      {
        this->SimCost_CommissioningFee_.set (x);
      }

      void SimCost_ComponentCost_Adjustments::
      SimCost_CommissioningFee (const SimCost_CommissioningFee_optional& x)
      {
        this->SimCost_CommissioningFee_ = x;
      }

      const SimCost_ComponentCost_Adjustments::SimCost_RegionalAdjustmentFactor_optional& SimCost_ComponentCost_Adjustments::
      SimCost_RegionalAdjustmentFactor () const
      {
        return this->SimCost_RegionalAdjustmentFactor_;
      }

      SimCost_ComponentCost_Adjustments::SimCost_RegionalAdjustmentFactor_optional& SimCost_ComponentCost_Adjustments::
      SimCost_RegionalAdjustmentFactor ()
      {
        return this->SimCost_RegionalAdjustmentFactor_;
      }

      void SimCost_ComponentCost_Adjustments::
      SimCost_RegionalAdjustmentFactor (const SimCost_RegionalAdjustmentFactor_type& x)
      {
        this->SimCost_RegionalAdjustmentFactor_.set (x);
      }

      void SimCost_ComponentCost_Adjustments::
      SimCost_RegionalAdjustmentFactor (const SimCost_RegionalAdjustmentFactor_optional& x)
      {
        this->SimCost_RegionalAdjustmentFactor_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimCost_ComponentCost_Adjustments
      //

      SimCost_ComponentCost_Adjustments::
      SimCost_ComponentCost_Adjustments ()
      : ::schema::simxml::ResourcesGeneral::SimCost_ComponentCost (),
        SimCost_MiscellaneousCostperConditionedArea_ (this),
        SimCost_DesignAndEngineeringFees_ (this),
        SimCost_ContractorFee_ (this),
        SimCost_Contingency_ (this),
        SimCost_Permits_BondingAndInsurance_ (this),
        SimCost_CommissioningFee_ (this),
        SimCost_RegionalAdjustmentFactor_ (this)
      {
      }

      SimCost_ComponentCost_Adjustments::
      SimCost_ComponentCost_Adjustments (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimCost_ComponentCost (RefId),
        SimCost_MiscellaneousCostperConditionedArea_ (this),
        SimCost_DesignAndEngineeringFees_ (this),
        SimCost_ContractorFee_ (this),
        SimCost_Contingency_ (this),
        SimCost_Permits_BondingAndInsurance_ (this),
        SimCost_CommissioningFee_ (this),
        SimCost_RegionalAdjustmentFactor_ (this)
      {
      }

      SimCost_ComponentCost_Adjustments::
      SimCost_ComponentCost_Adjustments (const SimCost_ComponentCost_Adjustments& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimCost_ComponentCost (x, f, c),
        SimCost_MiscellaneousCostperConditionedArea_ (x.SimCost_MiscellaneousCostperConditionedArea_, f, this),
        SimCost_DesignAndEngineeringFees_ (x.SimCost_DesignAndEngineeringFees_, f, this),
        SimCost_ContractorFee_ (x.SimCost_ContractorFee_, f, this),
        SimCost_Contingency_ (x.SimCost_Contingency_, f, this),
        SimCost_Permits_BondingAndInsurance_ (x.SimCost_Permits_BondingAndInsurance_, f, this),
        SimCost_CommissioningFee_ (x.SimCost_CommissioningFee_, f, this),
        SimCost_RegionalAdjustmentFactor_ (x.SimCost_RegionalAdjustmentFactor_, f, this)
      {
      }

      SimCost_ComponentCost_Adjustments::
      SimCost_ComponentCost_Adjustments (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimCost_ComponentCost (e, f | ::xml_schema::flags::base, c),
        SimCost_MiscellaneousCostperConditionedArea_ (this),
        SimCost_DesignAndEngineeringFees_ (this),
        SimCost_ContractorFee_ (this),
        SimCost_Contingency_ (this),
        SimCost_Permits_BondingAndInsurance_ (this),
        SimCost_CommissioningFee_ (this),
        SimCost_RegionalAdjustmentFactor_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimCost_ComponentCost_Adjustments::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimCost_ComponentCost::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimCost_MiscellaneousCostperConditionedArea
          //
          if (n.name () == "SimCost_MiscellaneousCostperConditionedArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCost_MiscellaneousCostperConditionedArea_)
            {
              this->SimCost_MiscellaneousCostperConditionedArea_.set (SimCost_MiscellaneousCostperConditionedArea_traits::create (i, f, this));
              continue;
            }
          }

          // SimCost_DesignAndEngineeringFees
          //
          if (n.name () == "SimCost_DesignAndEngineeringFees" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCost_DesignAndEngineeringFees_)
            {
              this->SimCost_DesignAndEngineeringFees_.set (SimCost_DesignAndEngineeringFees_traits::create (i, f, this));
              continue;
            }
          }

          // SimCost_ContractorFee
          //
          if (n.name () == "SimCost_ContractorFee" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCost_ContractorFee_)
            {
              this->SimCost_ContractorFee_.set (SimCost_ContractorFee_traits::create (i, f, this));
              continue;
            }
          }

          // SimCost_Contingency
          //
          if (n.name () == "SimCost_Contingency" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCost_Contingency_)
            {
              this->SimCost_Contingency_.set (SimCost_Contingency_traits::create (i, f, this));
              continue;
            }
          }

          // SimCost_Permits_BondingAndInsurance
          //
          if (n.name () == "SimCost_Permits_BondingAndInsurance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCost_Permits_BondingAndInsurance_)
            {
              this->SimCost_Permits_BondingAndInsurance_.set (SimCost_Permits_BondingAndInsurance_traits::create (i, f, this));
              continue;
            }
          }

          // SimCost_CommissioningFee
          //
          if (n.name () == "SimCost_CommissioningFee" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCost_CommissioningFee_)
            {
              this->SimCost_CommissioningFee_.set (SimCost_CommissioningFee_traits::create (i, f, this));
              continue;
            }
          }

          // SimCost_RegionalAdjustmentFactor
          //
          if (n.name () == "SimCost_RegionalAdjustmentFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimCost_RegionalAdjustmentFactor_)
            {
              this->SimCost_RegionalAdjustmentFactor_.set (SimCost_RegionalAdjustmentFactor_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimCost_ComponentCost_Adjustments* SimCost_ComponentCost_Adjustments::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimCost_ComponentCost_Adjustments (*this, f, c);
      }

      SimCost_ComponentCost_Adjustments& SimCost_ComponentCost_Adjustments::
      operator= (const SimCost_ComponentCost_Adjustments& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimCost_ComponentCost& > (*this) = x;
          this->SimCost_MiscellaneousCostperConditionedArea_ = x.SimCost_MiscellaneousCostperConditionedArea_;
          this->SimCost_DesignAndEngineeringFees_ = x.SimCost_DesignAndEngineeringFees_;
          this->SimCost_ContractorFee_ = x.SimCost_ContractorFee_;
          this->SimCost_Contingency_ = x.SimCost_Contingency_;
          this->SimCost_Permits_BondingAndInsurance_ = x.SimCost_Permits_BondingAndInsurance_;
          this->SimCost_CommissioningFee_ = x.SimCost_CommissioningFee_;
          this->SimCost_RegionalAdjustmentFactor_ = x.SimCost_RegionalAdjustmentFactor_;
        }

        return *this;
      }

      SimCost_ComponentCost_Adjustments::
      ~SimCost_ComponentCost_Adjustments ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

