// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimParameterizedProfileDef_ParameterizedProfile_T_Shape.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeometry
    {
      // SimParameterizedProfileDef_ParameterizedProfile_T_Shape
      // 

      const SimParameterizedProfileDef_ParameterizedProfile_T_Shape::Depth_optional& SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      Depth () const
      {
        return this->Depth_;
      }

      SimParameterizedProfileDef_ParameterizedProfile_T_Shape::Depth_optional& SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      Depth ()
      {
        return this->Depth_;
      }

      void SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      Depth (const Depth_type& x)
      {
        this->Depth_.set (x);
      }

      void SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      Depth (const Depth_optional& x)
      {
        this->Depth_ = x;
      }

      const SimParameterizedProfileDef_ParameterizedProfile_T_Shape::FlangeWidth_optional& SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      FlangeWidth () const
      {
        return this->FlangeWidth_;
      }

      SimParameterizedProfileDef_ParameterizedProfile_T_Shape::FlangeWidth_optional& SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      FlangeWidth ()
      {
        return this->FlangeWidth_;
      }

      void SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      FlangeWidth (const FlangeWidth_type& x)
      {
        this->FlangeWidth_.set (x);
      }

      void SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      FlangeWidth (const FlangeWidth_optional& x)
      {
        this->FlangeWidth_ = x;
      }

      const SimParameterizedProfileDef_ParameterizedProfile_T_Shape::WebThickness_optional& SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      WebThickness () const
      {
        return this->WebThickness_;
      }

      SimParameterizedProfileDef_ParameterizedProfile_T_Shape::WebThickness_optional& SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      WebThickness ()
      {
        return this->WebThickness_;
      }

      void SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      WebThickness (const WebThickness_type& x)
      {
        this->WebThickness_.set (x);
      }

      void SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      WebThickness (const WebThickness_optional& x)
      {
        this->WebThickness_ = x;
      }

      const SimParameterizedProfileDef_ParameterizedProfile_T_Shape::FlangeThickness_optional& SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      FlangeThickness () const
      {
        return this->FlangeThickness_;
      }

      SimParameterizedProfileDef_ParameterizedProfile_T_Shape::FlangeThickness_optional& SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      FlangeThickness ()
      {
        return this->FlangeThickness_;
      }

      void SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      FlangeThickness (const FlangeThickness_type& x)
      {
        this->FlangeThickness_.set (x);
      }

      void SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      FlangeThickness (const FlangeThickness_optional& x)
      {
        this->FlangeThickness_ = x;
      }

      const SimParameterizedProfileDef_ParameterizedProfile_T_Shape::FilletRadius_optional& SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      FilletRadius () const
      {
        return this->FilletRadius_;
      }

      SimParameterizedProfileDef_ParameterizedProfile_T_Shape::FilletRadius_optional& SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      FilletRadius ()
      {
        return this->FilletRadius_;
      }

      void SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      FilletRadius (const FilletRadius_type& x)
      {
        this->FilletRadius_.set (x);
      }

      void SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      FilletRadius (const FilletRadius_optional& x)
      {
        this->FilletRadius_ = x;
      }

      const SimParameterizedProfileDef_ParameterizedProfile_T_Shape::FlangeEdgeRadius_optional& SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      FlangeEdgeRadius () const
      {
        return this->FlangeEdgeRadius_;
      }

      SimParameterizedProfileDef_ParameterizedProfile_T_Shape::FlangeEdgeRadius_optional& SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      FlangeEdgeRadius ()
      {
        return this->FlangeEdgeRadius_;
      }

      void SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      FlangeEdgeRadius (const FlangeEdgeRadius_type& x)
      {
        this->FlangeEdgeRadius_.set (x);
      }

      void SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      FlangeEdgeRadius (const FlangeEdgeRadius_optional& x)
      {
        this->FlangeEdgeRadius_ = x;
      }

      const SimParameterizedProfileDef_ParameterizedProfile_T_Shape::WebEdgeRadius_optional& SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      WebEdgeRadius () const
      {
        return this->WebEdgeRadius_;
      }

      SimParameterizedProfileDef_ParameterizedProfile_T_Shape::WebEdgeRadius_optional& SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      WebEdgeRadius ()
      {
        return this->WebEdgeRadius_;
      }

      void SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      WebEdgeRadius (const WebEdgeRadius_type& x)
      {
        this->WebEdgeRadius_.set (x);
      }

      void SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      WebEdgeRadius (const WebEdgeRadius_optional& x)
      {
        this->WebEdgeRadius_ = x;
      }

      const SimParameterizedProfileDef_ParameterizedProfile_T_Shape::WebSlope_optional& SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      WebSlope () const
      {
        return this->WebSlope_;
      }

      SimParameterizedProfileDef_ParameterizedProfile_T_Shape::WebSlope_optional& SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      WebSlope ()
      {
        return this->WebSlope_;
      }

      void SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      WebSlope (const WebSlope_type& x)
      {
        this->WebSlope_.set (x);
      }

      void SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      WebSlope (const WebSlope_optional& x)
      {
        this->WebSlope_ = x;
      }

      const SimParameterizedProfileDef_ParameterizedProfile_T_Shape::FlangeSlope_optional& SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      FlangeSlope () const
      {
        return this->FlangeSlope_;
      }

      SimParameterizedProfileDef_ParameterizedProfile_T_Shape::FlangeSlope_optional& SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      FlangeSlope ()
      {
        return this->FlangeSlope_;
      }

      void SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      FlangeSlope (const FlangeSlope_type& x)
      {
        this->FlangeSlope_.set (x);
      }

      void SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      FlangeSlope (const FlangeSlope_optional& x)
      {
        this->FlangeSlope_ = x;
      }

      const SimParameterizedProfileDef_ParameterizedProfile_T_Shape::CentreOfGravityInY_optional& SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      CentreOfGravityInY () const
      {
        return this->CentreOfGravityInY_;
      }

      SimParameterizedProfileDef_ParameterizedProfile_T_Shape::CentreOfGravityInY_optional& SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      CentreOfGravityInY ()
      {
        return this->CentreOfGravityInY_;
      }

      void SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      CentreOfGravityInY (const CentreOfGravityInY_type& x)
      {
        this->CentreOfGravityInY_.set (x);
      }

      void SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      CentreOfGravityInY (const CentreOfGravityInY_optional& x)
      {
        this->CentreOfGravityInY_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeometry
    {
      // SimParameterizedProfileDef_ParameterizedProfile_T_Shape
      //

      SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      SimParameterizedProfileDef_ParameterizedProfile_T_Shape ()
      : ::schema::simxml::ResourcesGeometry::SimParameterizedProfileDef_ParameterizedProfile (),
        Depth_ (this),
        FlangeWidth_ (this),
        WebThickness_ (this),
        FlangeThickness_ (this),
        FilletRadius_ (this),
        FlangeEdgeRadius_ (this),
        WebEdgeRadius_ (this),
        WebSlope_ (this),
        FlangeSlope_ (this),
        CentreOfGravityInY_ (this)
      {
      }

      SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      SimParameterizedProfileDef_ParameterizedProfile_T_Shape (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeometry::SimParameterizedProfileDef_ParameterizedProfile (RefId),
        Depth_ (this),
        FlangeWidth_ (this),
        WebThickness_ (this),
        FlangeThickness_ (this),
        FilletRadius_ (this),
        FlangeEdgeRadius_ (this),
        WebEdgeRadius_ (this),
        WebSlope_ (this),
        FlangeSlope_ (this),
        CentreOfGravityInY_ (this)
      {
      }

      SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      SimParameterizedProfileDef_ParameterizedProfile_T_Shape (const SimParameterizedProfileDef_ParameterizedProfile_T_Shape& x,
                                                               ::xml_schema::flags f,
                                                               ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeometry::SimParameterizedProfileDef_ParameterizedProfile (x, f, c),
        Depth_ (x.Depth_, f, this),
        FlangeWidth_ (x.FlangeWidth_, f, this),
        WebThickness_ (x.WebThickness_, f, this),
        FlangeThickness_ (x.FlangeThickness_, f, this),
        FilletRadius_ (x.FilletRadius_, f, this),
        FlangeEdgeRadius_ (x.FlangeEdgeRadius_, f, this),
        WebEdgeRadius_ (x.WebEdgeRadius_, f, this),
        WebSlope_ (x.WebSlope_, f, this),
        FlangeSlope_ (x.FlangeSlope_, f, this),
        CentreOfGravityInY_ (x.CentreOfGravityInY_, f, this)
      {
      }

      SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      SimParameterizedProfileDef_ParameterizedProfile_T_Shape (const ::xercesc::DOMElement& e,
                                                               ::xml_schema::flags f,
                                                               ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeometry::SimParameterizedProfileDef_ParameterizedProfile (e, f | ::xml_schema::flags::base, c),
        Depth_ (this),
        FlangeWidth_ (this),
        WebThickness_ (this),
        FlangeThickness_ (this),
        FilletRadius_ (this),
        FlangeEdgeRadius_ (this),
        WebEdgeRadius_ (this),
        WebSlope_ (this),
        FlangeSlope_ (this),
        CentreOfGravityInY_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeometry::SimParameterizedProfileDef_ParameterizedProfile::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Depth
          //
          if (n.name () == "Depth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            if (!this->Depth_)
            {
              this->Depth_.set (Depth_traits::create (i, f, this));
              continue;
            }
          }

          // FlangeWidth
          //
          if (n.name () == "FlangeWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            if (!this->FlangeWidth_)
            {
              this->FlangeWidth_.set (FlangeWidth_traits::create (i, f, this));
              continue;
            }
          }

          // WebThickness
          //
          if (n.name () == "WebThickness" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            if (!this->WebThickness_)
            {
              this->WebThickness_.set (WebThickness_traits::create (i, f, this));
              continue;
            }
          }

          // FlangeThickness
          //
          if (n.name () == "FlangeThickness" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            if (!this->FlangeThickness_)
            {
              this->FlangeThickness_.set (FlangeThickness_traits::create (i, f, this));
              continue;
            }
          }

          // FilletRadius
          //
          if (n.name () == "FilletRadius" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            if (!this->FilletRadius_)
            {
              this->FilletRadius_.set (FilletRadius_traits::create (i, f, this));
              continue;
            }
          }

          // FlangeEdgeRadius
          //
          if (n.name () == "FlangeEdgeRadius" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            if (!this->FlangeEdgeRadius_)
            {
              this->FlangeEdgeRadius_.set (FlangeEdgeRadius_traits::create (i, f, this));
              continue;
            }
          }

          // WebEdgeRadius
          //
          if (n.name () == "WebEdgeRadius" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            if (!this->WebEdgeRadius_)
            {
              this->WebEdgeRadius_.set (WebEdgeRadius_traits::create (i, f, this));
              continue;
            }
          }

          // WebSlope
          //
          if (n.name () == "WebSlope" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            if (!this->WebSlope_)
            {
              this->WebSlope_.set (WebSlope_traits::create (i, f, this));
              continue;
            }
          }

          // FlangeSlope
          //
          if (n.name () == "FlangeSlope" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            if (!this->FlangeSlope_)
            {
              this->FlangeSlope_.set (FlangeSlope_traits::create (i, f, this));
              continue;
            }
          }

          // CentreOfGravityInY
          //
          if (n.name () == "CentreOfGravityInY" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            if (!this->CentreOfGravityInY_)
            {
              this->CentreOfGravityInY_.set (CentreOfGravityInY_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimParameterizedProfileDef_ParameterizedProfile_T_Shape* SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimParameterizedProfileDef_ParameterizedProfile_T_Shape (*this, f, c);
      }

      SimParameterizedProfileDef_ParameterizedProfile_T_Shape& SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      operator= (const SimParameterizedProfileDef_ParameterizedProfile_T_Shape& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeometry::SimParameterizedProfileDef_ParameterizedProfile& > (*this) = x;
          this->Depth_ = x.Depth_;
          this->FlangeWidth_ = x.FlangeWidth_;
          this->WebThickness_ = x.WebThickness_;
          this->FlangeThickness_ = x.FlangeThickness_;
          this->FilletRadius_ = x.FilletRadius_;
          this->FlangeEdgeRadius_ = x.FlangeEdgeRadius_;
          this->WebEdgeRadius_ = x.WebEdgeRadius_;
          this->WebSlope_ = x.WebSlope_;
          this->FlangeSlope_ = x.FlangeSlope_;
          this->CentreOfGravityInY_ = x.CentreOfGravityInY_;
        }

        return *this;
      }

      SimParameterizedProfileDef_ParameterizedProfile_T_Shape::
      ~SimParameterizedProfileDef_ParameterizedProfile_T_Shape ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeometry
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

