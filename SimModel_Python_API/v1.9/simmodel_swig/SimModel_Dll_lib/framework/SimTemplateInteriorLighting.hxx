// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_TEMPLATE_INTERIOR_LIGHTING_HXX
#define SIM_TEMPLATE_INTERIOR_LIGHTING_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      class SimTemplateInteriorLighting;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simtemplate.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      class SimTemplateInteriorLighting: public ::schema::simxml::SimModelCore::SimTemplate
      {
        public:
        // ContainingSpace
        //
        typedef ::xml_schema::idref ContainingSpace_type;
        typedef ::xsd::cxx::tree::optional< ContainingSpace_type > ContainingSpace_optional;
        typedef ::xsd::cxx::tree::traits< ContainingSpace_type, char > ContainingSpace_traits;

        const ContainingSpace_optional&
        ContainingSpace () const;

        ContainingSpace_optional&
        ContainingSpace ();

        void
        ContainingSpace (const ContainingSpace_type& x);

        void
        ContainingSpace (const ContainingSpace_optional& x);

        void
        ContainingSpace (::std::auto_ptr< ContainingSpace_type > p);

        // InteriorLightingSpecMethod
        //
        typedef ::xml_schema::string InteriorLightingSpecMethod_type;
        typedef ::xsd::cxx::tree::optional< InteriorLightingSpecMethod_type > InteriorLightingSpecMethod_optional;
        typedef ::xsd::cxx::tree::traits< InteriorLightingSpecMethod_type, char > InteriorLightingSpecMethod_traits;

        const InteriorLightingSpecMethod_optional&
        InteriorLightingSpecMethod () const;

        InteriorLightingSpecMethod_optional&
        InteriorLightingSpecMethod ();

        void
        InteriorLightingSpecMethod (const InteriorLightingSpecMethod_type& x);

        void
        InteriorLightingSpecMethod (const InteriorLightingSpecMethod_optional& x);

        void
        InteriorLightingSpecMethod (::std::auto_ptr< InteriorLightingSpecMethod_type > p);

        // T24Status
        //
        typedef ::xml_schema::string T24Status_type;
        typedef ::xsd::cxx::tree::optional< T24Status_type > T24Status_optional;
        typedef ::xsd::cxx::tree::traits< T24Status_type, char > T24Status_traits;

        const T24Status_optional&
        T24Status () const;

        T24Status_optional&
        T24Status ();

        void
        T24Status (const T24Status_type& x);

        void
        T24Status (const T24Status_optional& x);

        void
        T24Status (::std::auto_ptr< T24Status_type > p);

        // LumMountElevation
        //
        typedef ::xml_schema::double_ LumMountElevation_type;
        typedef ::xsd::cxx::tree::optional< LumMountElevation_type > LumMountElevation_optional;
        typedef ::xsd::cxx::tree::traits< LumMountElevation_type, char, ::xsd::cxx::tree::schema_type::double_ > LumMountElevation_traits;

        const LumMountElevation_optional&
        LumMountElevation () const;

        LumMountElevation_optional&
        LumMountElevation ();

        void
        LumMountElevation (const LumMountElevation_type& x);

        void
        LumMountElevation (const LumMountElevation_optional& x);

        // FractionHeatToSpace
        //
        typedef ::xml_schema::double_ FractionHeatToSpace_type;
        typedef ::xsd::cxx::tree::optional< FractionHeatToSpace_type > FractionHeatToSpace_optional;
        typedef ::xsd::cxx::tree::traits< FractionHeatToSpace_type, char, ::xsd::cxx::tree::schema_type::double_ > FractionHeatToSpace_traits;

        const FractionHeatToSpace_optional&
        FractionHeatToSpace () const;

        FractionHeatToSpace_optional&
        FractionHeatToSpace ();

        void
        FractionHeatToSpace (const FractionHeatToSpace_type& x);

        void
        FractionHeatToSpace (const FractionHeatToSpace_optional& x);

        // RadiantFractionOfSpaceHeat
        //
        typedef ::xml_schema::double_ RadiantFractionOfSpaceHeat_type;
        typedef ::xsd::cxx::tree::optional< RadiantFractionOfSpaceHeat_type > RadiantFractionOfSpaceHeat_optional;
        typedef ::xsd::cxx::tree::traits< RadiantFractionOfSpaceHeat_type, char, ::xsd::cxx::tree::schema_type::double_ > RadiantFractionOfSpaceHeat_traits;

        const RadiantFractionOfSpaceHeat_optional&
        RadiantFractionOfSpaceHeat () const;

        RadiantFractionOfSpaceHeat_optional&
        RadiantFractionOfSpaceHeat ();

        void
        RadiantFractionOfSpaceHeat (const RadiantFractionOfSpaceHeat_type& x);

        void
        RadiantFractionOfSpaceHeat (const RadiantFractionOfSpaceHeat_optional& x);

        // Luminaire1
        //
        typedef ::xml_schema::idref Luminaire1_type;
        typedef ::xsd::cxx::tree::optional< Luminaire1_type > Luminaire1_optional;
        typedef ::xsd::cxx::tree::traits< Luminaire1_type, char > Luminaire1_traits;

        const Luminaire1_optional&
        Luminaire1 () const;

        Luminaire1_optional&
        Luminaire1 ();

        void
        Luminaire1 (const Luminaire1_type& x);

        void
        Luminaire1 (const Luminaire1_optional& x);

        void
        Luminaire1 (::std::auto_ptr< Luminaire1_type > p);

        // Luminaire1Count
        //
        typedef ::xml_schema::int_ Luminaire1Count_type;
        typedef ::xsd::cxx::tree::optional< Luminaire1Count_type > Luminaire1Count_optional;
        typedef ::xsd::cxx::tree::traits< Luminaire1Count_type, char > Luminaire1Count_traits;

        const Luminaire1Count_optional&
        Luminaire1Count () const;

        Luminaire1Count_optional&
        Luminaire1Count ();

        void
        Luminaire1Count (const Luminaire1Count_type& x);

        void
        Luminaire1Count (const Luminaire1Count_optional& x);

        // Luminaire2
        //
        typedef ::xml_schema::idref Luminaire2_type;
        typedef ::xsd::cxx::tree::optional< Luminaire2_type > Luminaire2_optional;
        typedef ::xsd::cxx::tree::traits< Luminaire2_type, char > Luminaire2_traits;

        const Luminaire2_optional&
        Luminaire2 () const;

        Luminaire2_optional&
        Luminaire2 ();

        void
        Luminaire2 (const Luminaire2_type& x);

        void
        Luminaire2 (const Luminaire2_optional& x);

        void
        Luminaire2 (::std::auto_ptr< Luminaire2_type > p);

        // Luminaire2Count
        //
        typedef ::xml_schema::int_ Luminaire2Count_type;
        typedef ::xsd::cxx::tree::optional< Luminaire2Count_type > Luminaire2Count_optional;
        typedef ::xsd::cxx::tree::traits< Luminaire2Count_type, char > Luminaire2Count_traits;

        const Luminaire2Count_optional&
        Luminaire2Count () const;

        Luminaire2Count_optional&
        Luminaire2Count ();

        void
        Luminaire2Count (const Luminaire2Count_type& x);

        void
        Luminaire2Count (const Luminaire2Count_optional& x);

        // Luminaire3
        //
        typedef ::xml_schema::idref Luminaire3_type;
        typedef ::xsd::cxx::tree::optional< Luminaire3_type > Luminaire3_optional;
        typedef ::xsd::cxx::tree::traits< Luminaire3_type, char > Luminaire3_traits;

        const Luminaire3_optional&
        Luminaire3 () const;

        Luminaire3_optional&
        Luminaire3 ();

        void
        Luminaire3 (const Luminaire3_type& x);

        void
        Luminaire3 (const Luminaire3_optional& x);

        void
        Luminaire3 (::std::auto_ptr< Luminaire3_type > p);

        // Luminaire3Count
        //
        typedef ::xml_schema::int_ Luminaire3Count_type;
        typedef ::xsd::cxx::tree::optional< Luminaire3Count_type > Luminaire3Count_optional;
        typedef ::xsd::cxx::tree::traits< Luminaire3Count_type, char > Luminaire3Count_traits;

        const Luminaire3Count_optional&
        Luminaire3Count () const;

        Luminaire3Count_optional&
        Luminaire3Count ();

        void
        Luminaire3Count (const Luminaire3Count_type& x);

        void
        Luminaire3Count (const Luminaire3Count_optional& x);

        // Luminaire4
        //
        typedef ::xml_schema::idref Luminaire4_type;
        typedef ::xsd::cxx::tree::optional< Luminaire4_type > Luminaire4_optional;
        typedef ::xsd::cxx::tree::traits< Luminaire4_type, char > Luminaire4_traits;

        const Luminaire4_optional&
        Luminaire4 () const;

        Luminaire4_optional&
        Luminaire4 ();

        void
        Luminaire4 (const Luminaire4_type& x);

        void
        Luminaire4 (const Luminaire4_optional& x);

        void
        Luminaire4 (::std::auto_ptr< Luminaire4_type > p);

        // Luminaire4Count
        //
        typedef ::xml_schema::int_ Luminaire4Count_type;
        typedef ::xsd::cxx::tree::optional< Luminaire4Count_type > Luminaire4Count_optional;
        typedef ::xsd::cxx::tree::traits< Luminaire4Count_type, char > Luminaire4Count_traits;

        const Luminaire4Count_optional&
        Luminaire4Count () const;

        Luminaire4Count_optional&
        Luminaire4Count ();

        void
        Luminaire4Count (const Luminaire4Count_type& x);

        void
        Luminaire4Count (const Luminaire4Count_optional& x);

        // Luminaire5
        //
        typedef ::xml_schema::idref Luminaire5_type;
        typedef ::xsd::cxx::tree::optional< Luminaire5_type > Luminaire5_optional;
        typedef ::xsd::cxx::tree::traits< Luminaire5_type, char > Luminaire5_traits;

        const Luminaire5_optional&
        Luminaire5 () const;

        Luminaire5_optional&
        Luminaire5 ();

        void
        Luminaire5 (const Luminaire5_type& x);

        void
        Luminaire5 (const Luminaire5_optional& x);

        void
        Luminaire5 (::std::auto_ptr< Luminaire5_type > p);

        // Luminaire5Count
        //
        typedef ::xml_schema::int_ Luminaire5Count_type;
        typedef ::xsd::cxx::tree::optional< Luminaire5Count_type > Luminaire5Count_optional;
        typedef ::xsd::cxx::tree::traits< Luminaire5Count_type, char > Luminaire5Count_traits;

        const Luminaire5Count_optional&
        Luminaire5Count () const;

        Luminaire5Count_optional&
        Luminaire5Count ();

        void
        Luminaire5Count (const Luminaire5Count_type& x);

        void
        Luminaire5Count (const Luminaire5Count_optional& x);

        // AssignedDaylitZone
        //
        typedef ::xml_schema::string AssignedDaylitZone_type;
        typedef ::xsd::cxx::tree::optional< AssignedDaylitZone_type > AssignedDaylitZone_optional;
        typedef ::xsd::cxx::tree::traits< AssignedDaylitZone_type, char > AssignedDaylitZone_traits;

        const AssignedDaylitZone_optional&
        AssignedDaylitZone () const;

        AssignedDaylitZone_optional&
        AssignedDaylitZone ();

        void
        AssignedDaylitZone (const AssignedDaylitZone_type& x);

        void
        AssignedDaylitZone (const AssignedDaylitZone_optional& x);

        void
        AssignedDaylitZone (::std::auto_ptr< AssignedDaylitZone_type > p);

        // LightingControls
        //
        typedef ::xml_schema::string LightingControls_type;
        typedef ::xsd::cxx::tree::optional< LightingControls_type > LightingControls_optional;
        typedef ::xsd::cxx::tree::traits< LightingControls_type, char > LightingControls_traits;

        const LightingControls_optional&
        LightingControls () const;

        LightingControls_optional&
        LightingControls ();

        void
        LightingControls (const LightingControls_type& x);

        void
        LightingControls (const LightingControls_optional& x);

        void
        LightingControls (::std::auto_ptr< LightingControls_type > p);

        // PowerAdjustFactor
        //
        typedef ::xml_schema::double_ PowerAdjustFactor_type;
        typedef ::xsd::cxx::tree::optional< PowerAdjustFactor_type > PowerAdjustFactor_optional;
        typedef ::xsd::cxx::tree::traits< PowerAdjustFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > PowerAdjustFactor_traits;

        const PowerAdjustFactor_optional&
        PowerAdjustFactor () const;

        PowerAdjustFactor_optional&
        PowerAdjustFactor ();

        void
        PowerAdjustFactor (const PowerAdjustFactor_type& x);

        void
        PowerAdjustFactor (const PowerAdjustFactor_optional& x);

        // LightingControlCount
        //
        typedef ::xml_schema::int_ LightingControlCount_type;
        typedef ::xsd::cxx::tree::optional< LightingControlCount_type > LightingControlCount_optional;
        typedef ::xsd::cxx::tree::traits< LightingControlCount_type, char > LightingControlCount_traits;

        const LightingControlCount_optional&
        LightingControlCount () const;

        LightingControlCount_optional&
        LightingControlCount ();

        void
        LightingControlCount (const LightingControlCount_type& x);

        void
        LightingControlCount (const LightingControlCount_optional& x);

        // AcceptanceTestRequired
        //
        typedef ::xml_schema::boolean AcceptanceTestRequired_type;
        typedef ::xsd::cxx::tree::optional< AcceptanceTestRequired_type > AcceptanceTestRequired_optional;
        typedef ::xsd::cxx::tree::traits< AcceptanceTestRequired_type, char > AcceptanceTestRequired_traits;

        const AcceptanceTestRequired_optional&
        AcceptanceTestRequired () const;

        AcceptanceTestRequired_optional&
        AcceptanceTestRequired ();

        void
        AcceptanceTestRequired (const AcceptanceTestRequired_type& x);

        void
        AcceptanceTestRequired (const AcceptanceTestRequired_optional& x);

        // AllowanceType
        //
        typedef ::xml_schema::string AllowanceType_type;
        typedef ::xsd::cxx::tree::optional< AllowanceType_type > AllowanceType_optional;
        typedef ::xsd::cxx::tree::traits< AllowanceType_type, char > AllowanceType_traits;

        const AllowanceType_optional&
        AllowanceType () const;

        AllowanceType_optional&
        AllowanceType ();

        void
        AllowanceType (const AllowanceType_type& x);

        void
        AllowanceType (const AllowanceType_optional& x);

        void
        AllowanceType (::std::auto_ptr< AllowanceType_type > p);

        // AllowanceArea
        //
        typedef ::xml_schema::double_ AllowanceArea_type;
        typedef ::xsd::cxx::tree::optional< AllowanceArea_type > AllowanceArea_optional;
        typedef ::xsd::cxx::tree::traits< AllowanceArea_type, char, ::xsd::cxx::tree::schema_type::double_ > AllowanceArea_traits;

        const AllowanceArea_optional&
        AllowanceArea () const;

        AllowanceArea_optional&
        AllowanceArea ();

        void
        AllowanceArea (const AllowanceArea_type& x);

        void
        AllowanceArea (const AllowanceArea_optional& x);

        // Constructors.
        //
        SimTemplateInteriorLighting ();

        SimTemplateInteriorLighting (const RefId_type&);

        SimTemplateInteriorLighting (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

        SimTemplateInteriorLighting (const SimTemplateInteriorLighting& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

        virtual SimTemplateInteriorLighting*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimTemplateInteriorLighting&
        operator= (const SimTemplateInteriorLighting& x);

        virtual 
        ~SimTemplateInteriorLighting ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ContainingSpace_optional ContainingSpace_;
        InteriorLightingSpecMethod_optional InteriorLightingSpecMethod_;
        T24Status_optional T24Status_;
        LumMountElevation_optional LumMountElevation_;
        FractionHeatToSpace_optional FractionHeatToSpace_;
        RadiantFractionOfSpaceHeat_optional RadiantFractionOfSpaceHeat_;
        Luminaire1_optional Luminaire1_;
        Luminaire1Count_optional Luminaire1Count_;
        Luminaire2_optional Luminaire2_;
        Luminaire2Count_optional Luminaire2Count_;
        Luminaire3_optional Luminaire3_;
        Luminaire3Count_optional Luminaire3Count_;
        Luminaire4_optional Luminaire4_;
        Luminaire4Count_optional Luminaire4Count_;
        Luminaire5_optional Luminaire5_;
        Luminaire5Count_optional Luminaire5Count_;
        AssignedDaylitZone_optional AssignedDaylitZone_;
        LightingControls_optional LightingControls_;
        PowerAdjustFactor_optional PowerAdjustFactor_;
        LightingControlCount_optional LightingControlCount_;
        AcceptanceTestRequired_optional AcceptanceTestRequired_;
        AllowanceType_optional AllowanceType_;
        AllowanceArea_optional AllowanceArea_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_TEMPLATE_INTERIOR_LIGHTING_HXX
