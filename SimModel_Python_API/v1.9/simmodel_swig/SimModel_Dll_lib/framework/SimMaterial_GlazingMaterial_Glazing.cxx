// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimMaterial_GlazingMaterial_Glazing.hxx"

#include "doublelist.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimMaterial_GlazingMaterial_Glazing
      // 

      const SimMaterial_GlazingMaterial_Glazing::SimMaterial_Thick_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_Thick () const
      {
        return this->SimMaterial_Thick_;
      }

      SimMaterial_GlazingMaterial_Glazing::SimMaterial_Thick_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_Thick ()
      {
        return this->SimMaterial_Thick_;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_Thick (const SimMaterial_Thick_type& x)
      {
        this->SimMaterial_Thick_.set (x);
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_Thick (const SimMaterial_Thick_optional& x)
      {
        this->SimMaterial_Thick_ = x;
      }

      const SimMaterial_GlazingMaterial_Glazing::SimMaterial_Cond_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_Cond () const
      {
        return this->SimMaterial_Cond_;
      }

      SimMaterial_GlazingMaterial_Glazing::SimMaterial_Cond_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_Cond ()
      {
        return this->SimMaterial_Cond_;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_Cond (const SimMaterial_Cond_type& x)
      {
        this->SimMaterial_Cond_.set (x);
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_Cond (const SimMaterial_Cond_optional& x)
      {
        this->SimMaterial_Cond_ = x;
      }

      const SimMaterial_GlazingMaterial_Glazing::SimMaterial_OpticalDataType_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_OpticalDataType () const
      {
        return this->SimMaterial_OpticalDataType_;
      }

      SimMaterial_GlazingMaterial_Glazing::SimMaterial_OpticalDataType_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_OpticalDataType ()
      {
        return this->SimMaterial_OpticalDataType_;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_OpticalDataType (const SimMaterial_OpticalDataType_type& x)
      {
        this->SimMaterial_OpticalDataType_.set (x);
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_OpticalDataType (const SimMaterial_OpticalDataType_optional& x)
      {
        this->SimMaterial_OpticalDataType_ = x;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_OpticalDataType (::std::auto_ptr< SimMaterial_OpticalDataType_type > x)
      {
        this->SimMaterial_OpticalDataType_.set (x);
      }

      const SimMaterial_GlazingMaterial_Glazing::SimMaterial_WndwGlassSpectralDataSetName_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_WndwGlassSpectralDataSetName () const
      {
        return this->SimMaterial_WndwGlassSpectralDataSetName_;
      }

      SimMaterial_GlazingMaterial_Glazing::SimMaterial_WndwGlassSpectralDataSetName_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_WndwGlassSpectralDataSetName ()
      {
        return this->SimMaterial_WndwGlassSpectralDataSetName_;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_WndwGlassSpectralDataSetName (const SimMaterial_WndwGlassSpectralDataSetName_type& x)
      {
        this->SimMaterial_WndwGlassSpectralDataSetName_.set (x);
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_WndwGlassSpectralDataSetName (const SimMaterial_WndwGlassSpectralDataSetName_optional& x)
      {
        this->SimMaterial_WndwGlassSpectralDataSetName_ = x;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_WndwGlassSpectralDataSetName (::std::auto_ptr< SimMaterial_WndwGlassSpectralDataSetName_type > x)
      {
        this->SimMaterial_WndwGlassSpectralDataSetName_.set (x);
      }

      const SimMaterial_GlazingMaterial_Glazing::SimMaterial_SolarTransAtNrmlIncent_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_SolarTransAtNrmlIncent () const
      {
        return this->SimMaterial_SolarTransAtNrmlIncent_;
      }

      SimMaterial_GlazingMaterial_Glazing::SimMaterial_SolarTransAtNrmlIncent_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_SolarTransAtNrmlIncent ()
      {
        return this->SimMaterial_SolarTransAtNrmlIncent_;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_SolarTransAtNrmlIncent (const SimMaterial_SolarTransAtNrmlIncent_type& x)
      {
        this->SimMaterial_SolarTransAtNrmlIncent_.set (x);
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_SolarTransAtNrmlIncent (const SimMaterial_SolarTransAtNrmlIncent_optional& x)
      {
        this->SimMaterial_SolarTransAtNrmlIncent_ = x;
      }

      const SimMaterial_GlazingMaterial_Glazing::SimMaterial_FrontSideSolarReflectAtNrmlIncent_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_FrontSideSolarReflectAtNrmlIncent () const
      {
        return this->SimMaterial_FrontSideSolarReflectAtNrmlIncent_;
      }

      SimMaterial_GlazingMaterial_Glazing::SimMaterial_FrontSideSolarReflectAtNrmlIncent_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_FrontSideSolarReflectAtNrmlIncent ()
      {
        return this->SimMaterial_FrontSideSolarReflectAtNrmlIncent_;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_FrontSideSolarReflectAtNrmlIncent (const SimMaterial_FrontSideSolarReflectAtNrmlIncent_type& x)
      {
        this->SimMaterial_FrontSideSolarReflectAtNrmlIncent_.set (x);
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_FrontSideSolarReflectAtNrmlIncent (const SimMaterial_FrontSideSolarReflectAtNrmlIncent_optional& x)
      {
        this->SimMaterial_FrontSideSolarReflectAtNrmlIncent_ = x;
      }

      const SimMaterial_GlazingMaterial_Glazing::SimMaterial_BackSideSolarReflectAtNrmlIncent_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_BackSideSolarReflectAtNrmlIncent () const
      {
        return this->SimMaterial_BackSideSolarReflectAtNrmlIncent_;
      }

      SimMaterial_GlazingMaterial_Glazing::SimMaterial_BackSideSolarReflectAtNrmlIncent_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_BackSideSolarReflectAtNrmlIncent ()
      {
        return this->SimMaterial_BackSideSolarReflectAtNrmlIncent_;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_BackSideSolarReflectAtNrmlIncent (const SimMaterial_BackSideSolarReflectAtNrmlIncent_type& x)
      {
        this->SimMaterial_BackSideSolarReflectAtNrmlIncent_.set (x);
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_BackSideSolarReflectAtNrmlIncent (const SimMaterial_BackSideSolarReflectAtNrmlIncent_optional& x)
      {
        this->SimMaterial_BackSideSolarReflectAtNrmlIncent_ = x;
      }

      const SimMaterial_GlazingMaterial_Glazing::SimMaterial_VisTransAtNrmlIncent_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_VisTransAtNrmlIncent () const
      {
        return this->SimMaterial_VisTransAtNrmlIncent_;
      }

      SimMaterial_GlazingMaterial_Glazing::SimMaterial_VisTransAtNrmlIncent_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_VisTransAtNrmlIncent ()
      {
        return this->SimMaterial_VisTransAtNrmlIncent_;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_VisTransAtNrmlIncent (const SimMaterial_VisTransAtNrmlIncent_type& x)
      {
        this->SimMaterial_VisTransAtNrmlIncent_.set (x);
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_VisTransAtNrmlIncent (const SimMaterial_VisTransAtNrmlIncent_optional& x)
      {
        this->SimMaterial_VisTransAtNrmlIncent_ = x;
      }

      const SimMaterial_GlazingMaterial_Glazing::SimMaterial_FrontSideVisReflectAtNrmlIncent_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_FrontSideVisReflectAtNrmlIncent () const
      {
        return this->SimMaterial_FrontSideVisReflectAtNrmlIncent_;
      }

      SimMaterial_GlazingMaterial_Glazing::SimMaterial_FrontSideVisReflectAtNrmlIncent_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_FrontSideVisReflectAtNrmlIncent ()
      {
        return this->SimMaterial_FrontSideVisReflectAtNrmlIncent_;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_FrontSideVisReflectAtNrmlIncent (const SimMaterial_FrontSideVisReflectAtNrmlIncent_type& x)
      {
        this->SimMaterial_FrontSideVisReflectAtNrmlIncent_.set (x);
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_FrontSideVisReflectAtNrmlIncent (const SimMaterial_FrontSideVisReflectAtNrmlIncent_optional& x)
      {
        this->SimMaterial_FrontSideVisReflectAtNrmlIncent_ = x;
      }

      const SimMaterial_GlazingMaterial_Glazing::SimMaterial_BackSideVisReflectAtNrmlIncent_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_BackSideVisReflectAtNrmlIncent () const
      {
        return this->SimMaterial_BackSideVisReflectAtNrmlIncent_;
      }

      SimMaterial_GlazingMaterial_Glazing::SimMaterial_BackSideVisReflectAtNrmlIncent_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_BackSideVisReflectAtNrmlIncent ()
      {
        return this->SimMaterial_BackSideVisReflectAtNrmlIncent_;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_BackSideVisReflectAtNrmlIncent (const SimMaterial_BackSideVisReflectAtNrmlIncent_type& x)
      {
        this->SimMaterial_BackSideVisReflectAtNrmlIncent_.set (x);
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_BackSideVisReflectAtNrmlIncent (const SimMaterial_BackSideVisReflectAtNrmlIncent_optional& x)
      {
        this->SimMaterial_BackSideVisReflectAtNrmlIncent_ = x;
      }

      const SimMaterial_GlazingMaterial_Glazing::SimMaterial_InfraredTransAtNrmlIncent_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_InfraredTransAtNrmlIncent () const
      {
        return this->SimMaterial_InfraredTransAtNrmlIncent_;
      }

      SimMaterial_GlazingMaterial_Glazing::SimMaterial_InfraredTransAtNrmlIncent_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_InfraredTransAtNrmlIncent ()
      {
        return this->SimMaterial_InfraredTransAtNrmlIncent_;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_InfraredTransAtNrmlIncent (const SimMaterial_InfraredTransAtNrmlIncent_type& x)
      {
        this->SimMaterial_InfraredTransAtNrmlIncent_.set (x);
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_InfraredTransAtNrmlIncent (const SimMaterial_InfraredTransAtNrmlIncent_optional& x)
      {
        this->SimMaterial_InfraredTransAtNrmlIncent_ = x;
      }

      const SimMaterial_GlazingMaterial_Glazing::SimMaterial_FrontSideInfraredHemisphEmis_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_FrontSideInfraredHemisphEmis () const
      {
        return this->SimMaterial_FrontSideInfraredHemisphEmis_;
      }

      SimMaterial_GlazingMaterial_Glazing::SimMaterial_FrontSideInfraredHemisphEmis_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_FrontSideInfraredHemisphEmis ()
      {
        return this->SimMaterial_FrontSideInfraredHemisphEmis_;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_FrontSideInfraredHemisphEmis (const SimMaterial_FrontSideInfraredHemisphEmis_type& x)
      {
        this->SimMaterial_FrontSideInfraredHemisphEmis_.set (x);
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_FrontSideInfraredHemisphEmis (const SimMaterial_FrontSideInfraredHemisphEmis_optional& x)
      {
        this->SimMaterial_FrontSideInfraredHemisphEmis_ = x;
      }

      const SimMaterial_GlazingMaterial_Glazing::SimMaterial_BackSideInfraredHemisphEmis_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_BackSideInfraredHemisphEmis () const
      {
        return this->SimMaterial_BackSideInfraredHemisphEmis_;
      }

      SimMaterial_GlazingMaterial_Glazing::SimMaterial_BackSideInfraredHemisphEmis_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_BackSideInfraredHemisphEmis ()
      {
        return this->SimMaterial_BackSideInfraredHemisphEmis_;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_BackSideInfraredHemisphEmis (const SimMaterial_BackSideInfraredHemisphEmis_type& x)
      {
        this->SimMaterial_BackSideInfraredHemisphEmis_.set (x);
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_BackSideInfraredHemisphEmis (const SimMaterial_BackSideInfraredHemisphEmis_optional& x)
      {
        this->SimMaterial_BackSideInfraredHemisphEmis_ = x;
      }

      const SimMaterial_GlazingMaterial_Glazing::SimMaterial_DirtCorrectFactorForSolar_VisTrans_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_DirtCorrectFactorForSolar_VisTrans () const
      {
        return this->SimMaterial_DirtCorrectFactorForSolar_VisTrans_;
      }

      SimMaterial_GlazingMaterial_Glazing::SimMaterial_DirtCorrectFactorForSolar_VisTrans_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_DirtCorrectFactorForSolar_VisTrans ()
      {
        return this->SimMaterial_DirtCorrectFactorForSolar_VisTrans_;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_DirtCorrectFactorForSolar_VisTrans (const SimMaterial_DirtCorrectFactorForSolar_VisTrans_type& x)
      {
        this->SimMaterial_DirtCorrectFactorForSolar_VisTrans_.set (x);
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_DirtCorrectFactorForSolar_VisTrans (const SimMaterial_DirtCorrectFactorForSolar_VisTrans_optional& x)
      {
        this->SimMaterial_DirtCorrectFactorForSolar_VisTrans_ = x;
      }

      const SimMaterial_GlazingMaterial_Glazing::SimMaterial_SolarDiffusing_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_SolarDiffusing () const
      {
        return this->SimMaterial_SolarDiffusing_;
      }

      SimMaterial_GlazingMaterial_Glazing::SimMaterial_SolarDiffusing_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_SolarDiffusing ()
      {
        return this->SimMaterial_SolarDiffusing_;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_SolarDiffusing (const SimMaterial_SolarDiffusing_type& x)
      {
        this->SimMaterial_SolarDiffusing_.set (x);
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_SolarDiffusing (const SimMaterial_SolarDiffusing_optional& x)
      {
        this->SimMaterial_SolarDiffusing_ = x;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_SolarDiffusing (::std::auto_ptr< SimMaterial_SolarDiffusing_type > x)
      {
        this->SimMaterial_SolarDiffusing_.set (x);
      }

      const SimMaterial_GlazingMaterial_Glazing::SimMaterial_YoungsModulus_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_YoungsModulus () const
      {
        return this->SimMaterial_YoungsModulus_;
      }

      SimMaterial_GlazingMaterial_Glazing::SimMaterial_YoungsModulus_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_YoungsModulus ()
      {
        return this->SimMaterial_YoungsModulus_;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_YoungsModulus (const SimMaterial_YoungsModulus_type& x)
      {
        this->SimMaterial_YoungsModulus_.set (x);
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_YoungsModulus (const SimMaterial_YoungsModulus_optional& x)
      {
        this->SimMaterial_YoungsModulus_ = x;
      }

      const SimMaterial_GlazingMaterial_Glazing::SimMaterial_PoissonsRatio_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_PoissonsRatio () const
      {
        return this->SimMaterial_PoissonsRatio_;
      }

      SimMaterial_GlazingMaterial_Glazing::SimMaterial_PoissonsRatio_optional& SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_PoissonsRatio ()
      {
        return this->SimMaterial_PoissonsRatio_;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_PoissonsRatio (const SimMaterial_PoissonsRatio_type& x)
      {
        this->SimMaterial_PoissonsRatio_.set (x);
      }

      void SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_PoissonsRatio (const SimMaterial_PoissonsRatio_optional& x)
      {
        this->SimMaterial_PoissonsRatio_ = x;
      }

      const SimMaterial_GlazingMaterial_Glazing::MatProp_GlazingSpectralData_Name_optional& SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_Name () const
      {
        return this->MatProp_GlazingSpectralData_Name_;
      }

      SimMaterial_GlazingMaterial_Glazing::MatProp_GlazingSpectralData_Name_optional& SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_Name ()
      {
        return this->MatProp_GlazingSpectralData_Name_;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_Name (const MatProp_GlazingSpectralData_Name_type& x)
      {
        this->MatProp_GlazingSpectralData_Name_.set (x);
      }

      void SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_Name (const MatProp_GlazingSpectralData_Name_optional& x)
      {
        this->MatProp_GlazingSpectralData_Name_ = x;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_Name (::std::auto_ptr< MatProp_GlazingSpectralData_Name_type > x)
      {
        this->MatProp_GlazingSpectralData_Name_.set (x);
      }

      const SimMaterial_GlazingMaterial_Glazing::MatProp_GlazingSpectralData_Wavelength_1_800_optional& SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_Wavelength_1_800 () const
      {
        return this->MatProp_GlazingSpectralData_Wavelength_1_800_;
      }

      SimMaterial_GlazingMaterial_Glazing::MatProp_GlazingSpectralData_Wavelength_1_800_optional& SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_Wavelength_1_800 ()
      {
        return this->MatProp_GlazingSpectralData_Wavelength_1_800_;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_Wavelength_1_800 (const MatProp_GlazingSpectralData_Wavelength_1_800_type& x)
      {
        this->MatProp_GlazingSpectralData_Wavelength_1_800_.set (x);
      }

      void SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_Wavelength_1_800 (const MatProp_GlazingSpectralData_Wavelength_1_800_optional& x)
      {
        this->MatProp_GlazingSpectralData_Wavelength_1_800_ = x;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_Wavelength_1_800 (::std::auto_ptr< MatProp_GlazingSpectralData_Wavelength_1_800_type > x)
      {
        this->MatProp_GlazingSpectralData_Wavelength_1_800_.set (x);
      }

      const SimMaterial_GlazingMaterial_Glazing::MatProp_GlazingSpectralData_Trans_1_800_optional& SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_Trans_1_800 () const
      {
        return this->MatProp_GlazingSpectralData_Trans_1_800_;
      }

      SimMaterial_GlazingMaterial_Glazing::MatProp_GlazingSpectralData_Trans_1_800_optional& SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_Trans_1_800 ()
      {
        return this->MatProp_GlazingSpectralData_Trans_1_800_;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_Trans_1_800 (const MatProp_GlazingSpectralData_Trans_1_800_type& x)
      {
        this->MatProp_GlazingSpectralData_Trans_1_800_.set (x);
      }

      void SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_Trans_1_800 (const MatProp_GlazingSpectralData_Trans_1_800_optional& x)
      {
        this->MatProp_GlazingSpectralData_Trans_1_800_ = x;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_Trans_1_800 (::std::auto_ptr< MatProp_GlazingSpectralData_Trans_1_800_type > x)
      {
        this->MatProp_GlazingSpectralData_Trans_1_800_.set (x);
      }

      const SimMaterial_GlazingMaterial_Glazing::MatProp_GlazingSpectralData_FrontReflect_1_800_optional& SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_FrontReflect_1_800 () const
      {
        return this->MatProp_GlazingSpectralData_FrontReflect_1_800_;
      }

      SimMaterial_GlazingMaterial_Glazing::MatProp_GlazingSpectralData_FrontReflect_1_800_optional& SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_FrontReflect_1_800 ()
      {
        return this->MatProp_GlazingSpectralData_FrontReflect_1_800_;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_FrontReflect_1_800 (const MatProp_GlazingSpectralData_FrontReflect_1_800_type& x)
      {
        this->MatProp_GlazingSpectralData_FrontReflect_1_800_.set (x);
      }

      void SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_FrontReflect_1_800 (const MatProp_GlazingSpectralData_FrontReflect_1_800_optional& x)
      {
        this->MatProp_GlazingSpectralData_FrontReflect_1_800_ = x;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_FrontReflect_1_800 (::std::auto_ptr< MatProp_GlazingSpectralData_FrontReflect_1_800_type > x)
      {
        this->MatProp_GlazingSpectralData_FrontReflect_1_800_.set (x);
      }

      const SimMaterial_GlazingMaterial_Glazing::MatProp_GlazingSpectralData_BackReflect_1_800_optional& SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_BackReflect_1_800 () const
      {
        return this->MatProp_GlazingSpectralData_BackReflect_1_800_;
      }

      SimMaterial_GlazingMaterial_Glazing::MatProp_GlazingSpectralData_BackReflect_1_800_optional& SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_BackReflect_1_800 ()
      {
        return this->MatProp_GlazingSpectralData_BackReflect_1_800_;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_BackReflect_1_800 (const MatProp_GlazingSpectralData_BackReflect_1_800_type& x)
      {
        this->MatProp_GlazingSpectralData_BackReflect_1_800_.set (x);
      }

      void SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_BackReflect_1_800 (const MatProp_GlazingSpectralData_BackReflect_1_800_optional& x)
      {
        this->MatProp_GlazingSpectralData_BackReflect_1_800_ = x;
      }

      void SimMaterial_GlazingMaterial_Glazing::
      MatProp_GlazingSpectralData_BackReflect_1_800 (::std::auto_ptr< MatProp_GlazingSpectralData_BackReflect_1_800_type > x)
      {
        this->MatProp_GlazingSpectralData_BackReflect_1_800_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimMaterial_GlazingMaterial_Glazing
      //

      SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_GlazingMaterial_Glazing ()
      : ::schema::simxml::ResourcesGeneral::SimMaterial_GlazingMaterial (),
        SimMaterial_Thick_ (this),
        SimMaterial_Cond_ (this),
        SimMaterial_OpticalDataType_ (this),
        SimMaterial_WndwGlassSpectralDataSetName_ (this),
        SimMaterial_SolarTransAtNrmlIncent_ (this),
        SimMaterial_FrontSideSolarReflectAtNrmlIncent_ (this),
        SimMaterial_BackSideSolarReflectAtNrmlIncent_ (this),
        SimMaterial_VisTransAtNrmlIncent_ (this),
        SimMaterial_FrontSideVisReflectAtNrmlIncent_ (this),
        SimMaterial_BackSideVisReflectAtNrmlIncent_ (this),
        SimMaterial_InfraredTransAtNrmlIncent_ (this),
        SimMaterial_FrontSideInfraredHemisphEmis_ (this),
        SimMaterial_BackSideInfraredHemisphEmis_ (this),
        SimMaterial_DirtCorrectFactorForSolar_VisTrans_ (this),
        SimMaterial_SolarDiffusing_ (this),
        SimMaterial_YoungsModulus_ (this),
        SimMaterial_PoissonsRatio_ (this),
        MatProp_GlazingSpectralData_Name_ (this),
        MatProp_GlazingSpectralData_Wavelength_1_800_ (this),
        MatProp_GlazingSpectralData_Trans_1_800_ (this),
        MatProp_GlazingSpectralData_FrontReflect_1_800_ (this),
        MatProp_GlazingSpectralData_BackReflect_1_800_ (this)
      {
      }

      SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_GlazingMaterial_Glazing (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimMaterial_GlazingMaterial (RefId),
        SimMaterial_Thick_ (this),
        SimMaterial_Cond_ (this),
        SimMaterial_OpticalDataType_ (this),
        SimMaterial_WndwGlassSpectralDataSetName_ (this),
        SimMaterial_SolarTransAtNrmlIncent_ (this),
        SimMaterial_FrontSideSolarReflectAtNrmlIncent_ (this),
        SimMaterial_BackSideSolarReflectAtNrmlIncent_ (this),
        SimMaterial_VisTransAtNrmlIncent_ (this),
        SimMaterial_FrontSideVisReflectAtNrmlIncent_ (this),
        SimMaterial_BackSideVisReflectAtNrmlIncent_ (this),
        SimMaterial_InfraredTransAtNrmlIncent_ (this),
        SimMaterial_FrontSideInfraredHemisphEmis_ (this),
        SimMaterial_BackSideInfraredHemisphEmis_ (this),
        SimMaterial_DirtCorrectFactorForSolar_VisTrans_ (this),
        SimMaterial_SolarDiffusing_ (this),
        SimMaterial_YoungsModulus_ (this),
        SimMaterial_PoissonsRatio_ (this),
        MatProp_GlazingSpectralData_Name_ (this),
        MatProp_GlazingSpectralData_Wavelength_1_800_ (this),
        MatProp_GlazingSpectralData_Trans_1_800_ (this),
        MatProp_GlazingSpectralData_FrontReflect_1_800_ (this),
        MatProp_GlazingSpectralData_BackReflect_1_800_ (this)
      {
      }

      SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_GlazingMaterial_Glazing (const SimMaterial_GlazingMaterial_Glazing& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimMaterial_GlazingMaterial (x, f, c),
        SimMaterial_Thick_ (x.SimMaterial_Thick_, f, this),
        SimMaterial_Cond_ (x.SimMaterial_Cond_, f, this),
        SimMaterial_OpticalDataType_ (x.SimMaterial_OpticalDataType_, f, this),
        SimMaterial_WndwGlassSpectralDataSetName_ (x.SimMaterial_WndwGlassSpectralDataSetName_, f, this),
        SimMaterial_SolarTransAtNrmlIncent_ (x.SimMaterial_SolarTransAtNrmlIncent_, f, this),
        SimMaterial_FrontSideSolarReflectAtNrmlIncent_ (x.SimMaterial_FrontSideSolarReflectAtNrmlIncent_, f, this),
        SimMaterial_BackSideSolarReflectAtNrmlIncent_ (x.SimMaterial_BackSideSolarReflectAtNrmlIncent_, f, this),
        SimMaterial_VisTransAtNrmlIncent_ (x.SimMaterial_VisTransAtNrmlIncent_, f, this),
        SimMaterial_FrontSideVisReflectAtNrmlIncent_ (x.SimMaterial_FrontSideVisReflectAtNrmlIncent_, f, this),
        SimMaterial_BackSideVisReflectAtNrmlIncent_ (x.SimMaterial_BackSideVisReflectAtNrmlIncent_, f, this),
        SimMaterial_InfraredTransAtNrmlIncent_ (x.SimMaterial_InfraredTransAtNrmlIncent_, f, this),
        SimMaterial_FrontSideInfraredHemisphEmis_ (x.SimMaterial_FrontSideInfraredHemisphEmis_, f, this),
        SimMaterial_BackSideInfraredHemisphEmis_ (x.SimMaterial_BackSideInfraredHemisphEmis_, f, this),
        SimMaterial_DirtCorrectFactorForSolar_VisTrans_ (x.SimMaterial_DirtCorrectFactorForSolar_VisTrans_, f, this),
        SimMaterial_SolarDiffusing_ (x.SimMaterial_SolarDiffusing_, f, this),
        SimMaterial_YoungsModulus_ (x.SimMaterial_YoungsModulus_, f, this),
        SimMaterial_PoissonsRatio_ (x.SimMaterial_PoissonsRatio_, f, this),
        MatProp_GlazingSpectralData_Name_ (x.MatProp_GlazingSpectralData_Name_, f, this),
        MatProp_GlazingSpectralData_Wavelength_1_800_ (x.MatProp_GlazingSpectralData_Wavelength_1_800_, f, this),
        MatProp_GlazingSpectralData_Trans_1_800_ (x.MatProp_GlazingSpectralData_Trans_1_800_, f, this),
        MatProp_GlazingSpectralData_FrontReflect_1_800_ (x.MatProp_GlazingSpectralData_FrontReflect_1_800_, f, this),
        MatProp_GlazingSpectralData_BackReflect_1_800_ (x.MatProp_GlazingSpectralData_BackReflect_1_800_, f, this)
      {
      }

      SimMaterial_GlazingMaterial_Glazing::
      SimMaterial_GlazingMaterial_Glazing (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimMaterial_GlazingMaterial (e, f | ::xml_schema::flags::base, c),
        SimMaterial_Thick_ (this),
        SimMaterial_Cond_ (this),
        SimMaterial_OpticalDataType_ (this),
        SimMaterial_WndwGlassSpectralDataSetName_ (this),
        SimMaterial_SolarTransAtNrmlIncent_ (this),
        SimMaterial_FrontSideSolarReflectAtNrmlIncent_ (this),
        SimMaterial_BackSideSolarReflectAtNrmlIncent_ (this),
        SimMaterial_VisTransAtNrmlIncent_ (this),
        SimMaterial_FrontSideVisReflectAtNrmlIncent_ (this),
        SimMaterial_BackSideVisReflectAtNrmlIncent_ (this),
        SimMaterial_InfraredTransAtNrmlIncent_ (this),
        SimMaterial_FrontSideInfraredHemisphEmis_ (this),
        SimMaterial_BackSideInfraredHemisphEmis_ (this),
        SimMaterial_DirtCorrectFactorForSolar_VisTrans_ (this),
        SimMaterial_SolarDiffusing_ (this),
        SimMaterial_YoungsModulus_ (this),
        SimMaterial_PoissonsRatio_ (this),
        MatProp_GlazingSpectralData_Name_ (this),
        MatProp_GlazingSpectralData_Wavelength_1_800_ (this),
        MatProp_GlazingSpectralData_Trans_1_800_ (this),
        MatProp_GlazingSpectralData_FrontReflect_1_800_ (this),
        MatProp_GlazingSpectralData_BackReflect_1_800_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimMaterial_GlazingMaterial_Glazing::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimMaterial_GlazingMaterial::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimMaterial_Thick
          //
          if (n.name () == "SimMaterial_Thick" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_Thick_)
            {
              this->SimMaterial_Thick_.set (SimMaterial_Thick_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_Cond
          //
          if (n.name () == "SimMaterial_Cond" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_Cond_)
            {
              this->SimMaterial_Cond_.set (SimMaterial_Cond_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_OpticalDataType
          //
          if (n.name () == "SimMaterial_OpticalDataType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMaterial_OpticalDataType_type > r (
              SimMaterial_OpticalDataType_traits::create (i, f, this));

            if (!this->SimMaterial_OpticalDataType_)
            {
              this->SimMaterial_OpticalDataType_.set (r);
              continue;
            }
          }

          // SimMaterial_WndwGlassSpectralDataSetName
          //
          if (n.name () == "SimMaterial_WndwGlassSpectralDataSetName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMaterial_WndwGlassSpectralDataSetName_type > r (
              SimMaterial_WndwGlassSpectralDataSetName_traits::create (i, f, this));

            if (!this->SimMaterial_WndwGlassSpectralDataSetName_)
            {
              this->SimMaterial_WndwGlassSpectralDataSetName_.set (r);
              continue;
            }
          }

          // SimMaterial_SolarTransAtNrmlIncent
          //
          if (n.name () == "SimMaterial_SolarTransAtNrmlIncent" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_SolarTransAtNrmlIncent_)
            {
              this->SimMaterial_SolarTransAtNrmlIncent_.set (SimMaterial_SolarTransAtNrmlIncent_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_FrontSideSolarReflectAtNrmlIncent
          //
          if (n.name () == "SimMaterial_FrontSideSolarReflectAtNrmlIncent" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_FrontSideSolarReflectAtNrmlIncent_)
            {
              this->SimMaterial_FrontSideSolarReflectAtNrmlIncent_.set (SimMaterial_FrontSideSolarReflectAtNrmlIncent_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BackSideSolarReflectAtNrmlIncent
          //
          if (n.name () == "SimMaterial_BackSideSolarReflectAtNrmlIncent" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_BackSideSolarReflectAtNrmlIncent_)
            {
              this->SimMaterial_BackSideSolarReflectAtNrmlIncent_.set (SimMaterial_BackSideSolarReflectAtNrmlIncent_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_VisTransAtNrmlIncent
          //
          if (n.name () == "SimMaterial_VisTransAtNrmlIncent" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_VisTransAtNrmlIncent_)
            {
              this->SimMaterial_VisTransAtNrmlIncent_.set (SimMaterial_VisTransAtNrmlIncent_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_FrontSideVisReflectAtNrmlIncent
          //
          if (n.name () == "SimMaterial_FrontSideVisReflectAtNrmlIncent" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_FrontSideVisReflectAtNrmlIncent_)
            {
              this->SimMaterial_FrontSideVisReflectAtNrmlIncent_.set (SimMaterial_FrontSideVisReflectAtNrmlIncent_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BackSideVisReflectAtNrmlIncent
          //
          if (n.name () == "SimMaterial_BackSideVisReflectAtNrmlIncent" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_BackSideVisReflectAtNrmlIncent_)
            {
              this->SimMaterial_BackSideVisReflectAtNrmlIncent_.set (SimMaterial_BackSideVisReflectAtNrmlIncent_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_InfraredTransAtNrmlIncent
          //
          if (n.name () == "SimMaterial_InfraredTransAtNrmlIncent" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_InfraredTransAtNrmlIncent_)
            {
              this->SimMaterial_InfraredTransAtNrmlIncent_.set (SimMaterial_InfraredTransAtNrmlIncent_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_FrontSideInfraredHemisphEmis
          //
          if (n.name () == "SimMaterial_FrontSideInfraredHemisphEmis" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_FrontSideInfraredHemisphEmis_)
            {
              this->SimMaterial_FrontSideInfraredHemisphEmis_.set (SimMaterial_FrontSideInfraredHemisphEmis_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BackSideInfraredHemisphEmis
          //
          if (n.name () == "SimMaterial_BackSideInfraredHemisphEmis" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_BackSideInfraredHemisphEmis_)
            {
              this->SimMaterial_BackSideInfraredHemisphEmis_.set (SimMaterial_BackSideInfraredHemisphEmis_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_DirtCorrectFactorForSolar_VisTrans
          //
          if (n.name () == "SimMaterial_DirtCorrectFactorForSolar_VisTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_DirtCorrectFactorForSolar_VisTrans_)
            {
              this->SimMaterial_DirtCorrectFactorForSolar_VisTrans_.set (SimMaterial_DirtCorrectFactorForSolar_VisTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SolarDiffusing
          //
          if (n.name () == "SimMaterial_SolarDiffusing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMaterial_SolarDiffusing_type > r (
              SimMaterial_SolarDiffusing_traits::create (i, f, this));

            if (!this->SimMaterial_SolarDiffusing_)
            {
              this->SimMaterial_SolarDiffusing_.set (r);
              continue;
            }
          }

          // SimMaterial_YoungsModulus
          //
          if (n.name () == "SimMaterial_YoungsModulus" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_YoungsModulus_)
            {
              this->SimMaterial_YoungsModulus_.set (SimMaterial_YoungsModulus_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_PoissonsRatio
          //
          if (n.name () == "SimMaterial_PoissonsRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimMaterial_PoissonsRatio_)
            {
              this->SimMaterial_PoissonsRatio_.set (SimMaterial_PoissonsRatio_traits::create (i, f, this));
              continue;
            }
          }

          // MatProp_GlazingSpectralData_Name
          //
          if (n.name () == "MatProp_GlazingSpectralData_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< MatProp_GlazingSpectralData_Name_type > r (
              MatProp_GlazingSpectralData_Name_traits::create (i, f, this));

            if (!this->MatProp_GlazingSpectralData_Name_)
            {
              this->MatProp_GlazingSpectralData_Name_.set (r);
              continue;
            }
          }

          // MatProp_GlazingSpectralData_Wavelength_1_800
          //
          if (n.name () == "MatProp_GlazingSpectralData_Wavelength_1_800" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< MatProp_GlazingSpectralData_Wavelength_1_800_type > r (
              MatProp_GlazingSpectralData_Wavelength_1_800_traits::create (i, f, this));

            if (!this->MatProp_GlazingSpectralData_Wavelength_1_800_)
            {
              this->MatProp_GlazingSpectralData_Wavelength_1_800_.set (r);
              continue;
            }
          }

          // MatProp_GlazingSpectralData_Trans_1_800
          //
          if (n.name () == "MatProp_GlazingSpectralData_Trans_1_800" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< MatProp_GlazingSpectralData_Trans_1_800_type > r (
              MatProp_GlazingSpectralData_Trans_1_800_traits::create (i, f, this));

            if (!this->MatProp_GlazingSpectralData_Trans_1_800_)
            {
              this->MatProp_GlazingSpectralData_Trans_1_800_.set (r);
              continue;
            }
          }

          // MatProp_GlazingSpectralData_FrontReflect_1_800
          //
          if (n.name () == "MatProp_GlazingSpectralData_FrontReflect_1_800" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< MatProp_GlazingSpectralData_FrontReflect_1_800_type > r (
              MatProp_GlazingSpectralData_FrontReflect_1_800_traits::create (i, f, this));

            if (!this->MatProp_GlazingSpectralData_FrontReflect_1_800_)
            {
              this->MatProp_GlazingSpectralData_FrontReflect_1_800_.set (r);
              continue;
            }
          }

          // MatProp_GlazingSpectralData_BackReflect_1_800
          //
          if (n.name () == "MatProp_GlazingSpectralData_BackReflect_1_800" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< MatProp_GlazingSpectralData_BackReflect_1_800_type > r (
              MatProp_GlazingSpectralData_BackReflect_1_800_traits::create (i, f, this));

            if (!this->MatProp_GlazingSpectralData_BackReflect_1_800_)
            {
              this->MatProp_GlazingSpectralData_BackReflect_1_800_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimMaterial_GlazingMaterial_Glazing* SimMaterial_GlazingMaterial_Glazing::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimMaterial_GlazingMaterial_Glazing (*this, f, c);
      }

      SimMaterial_GlazingMaterial_Glazing& SimMaterial_GlazingMaterial_Glazing::
      operator= (const SimMaterial_GlazingMaterial_Glazing& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimMaterial_GlazingMaterial& > (*this) = x;
          this->SimMaterial_Thick_ = x.SimMaterial_Thick_;
          this->SimMaterial_Cond_ = x.SimMaterial_Cond_;
          this->SimMaterial_OpticalDataType_ = x.SimMaterial_OpticalDataType_;
          this->SimMaterial_WndwGlassSpectralDataSetName_ = x.SimMaterial_WndwGlassSpectralDataSetName_;
          this->SimMaterial_SolarTransAtNrmlIncent_ = x.SimMaterial_SolarTransAtNrmlIncent_;
          this->SimMaterial_FrontSideSolarReflectAtNrmlIncent_ = x.SimMaterial_FrontSideSolarReflectAtNrmlIncent_;
          this->SimMaterial_BackSideSolarReflectAtNrmlIncent_ = x.SimMaterial_BackSideSolarReflectAtNrmlIncent_;
          this->SimMaterial_VisTransAtNrmlIncent_ = x.SimMaterial_VisTransAtNrmlIncent_;
          this->SimMaterial_FrontSideVisReflectAtNrmlIncent_ = x.SimMaterial_FrontSideVisReflectAtNrmlIncent_;
          this->SimMaterial_BackSideVisReflectAtNrmlIncent_ = x.SimMaterial_BackSideVisReflectAtNrmlIncent_;
          this->SimMaterial_InfraredTransAtNrmlIncent_ = x.SimMaterial_InfraredTransAtNrmlIncent_;
          this->SimMaterial_FrontSideInfraredHemisphEmis_ = x.SimMaterial_FrontSideInfraredHemisphEmis_;
          this->SimMaterial_BackSideInfraredHemisphEmis_ = x.SimMaterial_BackSideInfraredHemisphEmis_;
          this->SimMaterial_DirtCorrectFactorForSolar_VisTrans_ = x.SimMaterial_DirtCorrectFactorForSolar_VisTrans_;
          this->SimMaterial_SolarDiffusing_ = x.SimMaterial_SolarDiffusing_;
          this->SimMaterial_YoungsModulus_ = x.SimMaterial_YoungsModulus_;
          this->SimMaterial_PoissonsRatio_ = x.SimMaterial_PoissonsRatio_;
          this->MatProp_GlazingSpectralData_Name_ = x.MatProp_GlazingSpectralData_Name_;
          this->MatProp_GlazingSpectralData_Wavelength_1_800_ = x.MatProp_GlazingSpectralData_Wavelength_1_800_;
          this->MatProp_GlazingSpectralData_Trans_1_800_ = x.MatProp_GlazingSpectralData_Trans_1_800_;
          this->MatProp_GlazingSpectralData_FrontReflect_1_800_ = x.MatProp_GlazingSpectralData_FrontReflect_1_800_;
          this->MatProp_GlazingSpectralData_BackReflect_1_800_ = x.MatProp_GlazingSpectralData_BackReflect_1_800_;
        }

        return *this;
      }

      SimMaterial_GlazingMaterial_Glazing::
      ~SimMaterial_GlazingMaterial_Glazing ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

