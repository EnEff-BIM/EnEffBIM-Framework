// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad
      // 

      const SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::SimFlowEnergyTrans_DirectPadArea_optional& SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_DirectPadArea () const
      {
        return this->SimFlowEnergyTrans_DirectPadArea_;
      }

      SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::SimFlowEnergyTrans_DirectPadArea_optional& SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_DirectPadArea ()
      {
        return this->SimFlowEnergyTrans_DirectPadArea_;
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_DirectPadArea (const SimFlowEnergyTrans_DirectPadArea_type& x)
      {
        this->SimFlowEnergyTrans_DirectPadArea_.set (x);
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_DirectPadArea (const SimFlowEnergyTrans_DirectPadArea_optional& x)
      {
        this->SimFlowEnergyTrans_DirectPadArea_ = x;
      }

      const SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::SimFlowEnergyTrans_DirectPadDepth_optional& SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_DirectPadDepth () const
      {
        return this->SimFlowEnergyTrans_DirectPadDepth_;
      }

      SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::SimFlowEnergyTrans_DirectPadDepth_optional& SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_DirectPadDepth ()
      {
        return this->SimFlowEnergyTrans_DirectPadDepth_;
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_DirectPadDepth (const SimFlowEnergyTrans_DirectPadDepth_type& x)
      {
        this->SimFlowEnergyTrans_DirectPadDepth_.set (x);
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_DirectPadDepth (const SimFlowEnergyTrans_DirectPadDepth_optional& x)
      {
        this->SimFlowEnergyTrans_DirectPadDepth_ = x;
      }

      const SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::SimFlowEnergyTrans_CntlType_optional& SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_CntlType () const
      {
        return this->SimFlowEnergyTrans_CntlType_;
      }

      SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::SimFlowEnergyTrans_CntlType_optional& SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_CntlType ()
      {
        return this->SimFlowEnergyTrans_CntlType_;
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_CntlType (const SimFlowEnergyTrans_CntlType_type& x)
      {
        this->SimFlowEnergyTrans_CntlType_.set (x);
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_CntlType (const SimFlowEnergyTrans_CntlType_optional& x)
      {
        this->SimFlowEnergyTrans_CntlType_ = x;
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_CntlType (::std::auto_ptr< SimFlowEnergyTrans_CntlType_type > x)
      {
        this->SimFlowEnergyTrans_CntlType_.set (x);
      }

      const SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::SimFlowEnergyTrans_SecondFanFlowRate_optional& SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_SecondFanFlowRate () const
      {
        return this->SimFlowEnergyTrans_SecondFanFlowRate_;
      }

      SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::SimFlowEnergyTrans_SecondFanFlowRate_optional& SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_SecondFanFlowRate ()
      {
        return this->SimFlowEnergyTrans_SecondFanFlowRate_;
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_SecondFanFlowRate (const SimFlowEnergyTrans_SecondFanFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_SecondFanFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_SecondFanFlowRate (const SimFlowEnergyTrans_SecondFanFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_SecondFanFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::SimFlowEnergyTrans_SecondaryFanTotalEfficiency_optional& SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_SecondaryFanTotalEfficiency () const
      {
        return this->SimFlowEnergyTrans_SecondaryFanTotalEfficiency_;
      }

      SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::SimFlowEnergyTrans_SecondaryFanTotalEfficiency_optional& SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_SecondaryFanTotalEfficiency ()
      {
        return this->SimFlowEnergyTrans_SecondaryFanTotalEfficiency_;
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_SecondaryFanTotalEfficiency (const SimFlowEnergyTrans_SecondaryFanTotalEfficiency_type& x)
      {
        this->SimFlowEnergyTrans_SecondaryFanTotalEfficiency_.set (x);
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_SecondaryFanTotalEfficiency (const SimFlowEnergyTrans_SecondaryFanTotalEfficiency_optional& x)
      {
        this->SimFlowEnergyTrans_SecondaryFanTotalEfficiency_ = x;
      }

      const SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::SimFlowEnergyTrans_SecondFanDeltaPressure_optional& SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_SecondFanDeltaPressure () const
      {
        return this->SimFlowEnergyTrans_SecondFanDeltaPressure_;
      }

      SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::SimFlowEnergyTrans_SecondFanDeltaPressure_optional& SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_SecondFanDeltaPressure ()
      {
        return this->SimFlowEnergyTrans_SecondFanDeltaPressure_;
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_SecondFanDeltaPressure (const SimFlowEnergyTrans_SecondFanDeltaPressure_type& x)
      {
        this->SimFlowEnergyTrans_SecondFanDeltaPressure_.set (x);
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_SecondFanDeltaPressure (const SimFlowEnergyTrans_SecondFanDeltaPressure_optional& x)
      {
        this->SimFlowEnergyTrans_SecondFanDeltaPressure_ = x;
      }

      const SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::SimFlowEnergyTrans_directHeatExchngEffect_optional& SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_directHeatExchngEffect () const
      {
        return this->SimFlowEnergyTrans_directHeatExchngEffect_;
      }

      SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::SimFlowEnergyTrans_directHeatExchngEffect_optional& SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_directHeatExchngEffect ()
      {
        return this->SimFlowEnergyTrans_directHeatExchngEffect_;
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_directHeatExchngEffect (const SimFlowEnergyTrans_directHeatExchngEffect_type& x)
      {
        this->SimFlowEnergyTrans_directHeatExchngEffect_.set (x);
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_directHeatExchngEffect (const SimFlowEnergyTrans_directHeatExchngEffect_optional& x)
      {
        this->SimFlowEnergyTrans_directHeatExchngEffect_ = x;
      }

      const SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::SimFlowEnergyTrans_PrimaryAirInletNodeName_optional& SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_PrimaryAirInletNodeName () const
      {
        return this->SimFlowEnergyTrans_PrimaryAirInletNodeName_;
      }

      SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::SimFlowEnergyTrans_PrimaryAirInletNodeName_optional& SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_PrimaryAirInletNodeName ()
      {
        return this->SimFlowEnergyTrans_PrimaryAirInletNodeName_;
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_PrimaryAirInletNodeName (const SimFlowEnergyTrans_PrimaryAirInletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_PrimaryAirInletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_PrimaryAirInletNodeName (const SimFlowEnergyTrans_PrimaryAirInletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_PrimaryAirInletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_PrimaryAirInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_PrimaryAirInletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_PrimaryAirInletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::SimFlowEnergyTrans_PrimaryAirOutInletNodeName_optional& SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_PrimaryAirOutInletNodeName () const
      {
        return this->SimFlowEnergyTrans_PrimaryAirOutInletNodeName_;
      }

      SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::SimFlowEnergyTrans_PrimaryAirOutInletNodeName_optional& SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_PrimaryAirOutInletNodeName ()
      {
        return this->SimFlowEnergyTrans_PrimaryAirOutInletNodeName_;
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_PrimaryAirOutInletNodeName (const SimFlowEnergyTrans_PrimaryAirOutInletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_PrimaryAirOutInletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_PrimaryAirOutInletNodeName (const SimFlowEnergyTrans_PrimaryAirOutInletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_PrimaryAirOutInletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_PrimaryAirOutInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_PrimaryAirOutInletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_PrimaryAirOutInletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::SimFlowEnergyTrans_SecondAirInletNodeName_optional& SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_SecondAirInletNodeName () const
      {
        return this->SimFlowEnergyTrans_SecondAirInletNodeName_;
      }

      SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::SimFlowEnergyTrans_SecondAirInletNodeName_optional& SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_SecondAirInletNodeName ()
      {
        return this->SimFlowEnergyTrans_SecondAirInletNodeName_;
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_SecondAirInletNodeName (const SimFlowEnergyTrans_SecondAirInletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_SecondAirInletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_SecondAirInletNodeName (const SimFlowEnergyTrans_SecondAirInletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_SecondAirInletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTrans_SecondAirInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_SecondAirInletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_SecondAirInletNodeName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad
      //

      SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad ()
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_EvaporativeCooler (),
        SimFlowEnergyTrans_DirectPadArea_ (this),
        SimFlowEnergyTrans_DirectPadDepth_ (this),
        SimFlowEnergyTrans_CntlType_ (this),
        SimFlowEnergyTrans_SecondFanFlowRate_ (this),
        SimFlowEnergyTrans_SecondaryFanTotalEfficiency_ (this),
        SimFlowEnergyTrans_SecondFanDeltaPressure_ (this),
        SimFlowEnergyTrans_directHeatExchngEffect_ (this),
        SimFlowEnergyTrans_PrimaryAirInletNodeName_ (this),
        SimFlowEnergyTrans_PrimaryAirOutInletNodeName_ (this),
        SimFlowEnergyTrans_SecondAirInletNodeName_ (this)
      {
      }

      SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_EvaporativeCooler (RefId),
        SimFlowEnergyTrans_DirectPadArea_ (this),
        SimFlowEnergyTrans_DirectPadDepth_ (this),
        SimFlowEnergyTrans_CntlType_ (this),
        SimFlowEnergyTrans_SecondFanFlowRate_ (this),
        SimFlowEnergyTrans_SecondaryFanTotalEfficiency_ (this),
        SimFlowEnergyTrans_SecondFanDeltaPressure_ (this),
        SimFlowEnergyTrans_directHeatExchngEffect_ (this),
        SimFlowEnergyTrans_PrimaryAirInletNodeName_ (this),
        SimFlowEnergyTrans_PrimaryAirOutInletNodeName_ (this),
        SimFlowEnergyTrans_SecondAirInletNodeName_ (this)
      {
      }

      SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad (const SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad& x,
                                                                 ::xml_schema::flags f,
                                                                 ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_EvaporativeCooler (x, f, c),
        SimFlowEnergyTrans_DirectPadArea_ (x.SimFlowEnergyTrans_DirectPadArea_, f, this),
        SimFlowEnergyTrans_DirectPadDepth_ (x.SimFlowEnergyTrans_DirectPadDepth_, f, this),
        SimFlowEnergyTrans_CntlType_ (x.SimFlowEnergyTrans_CntlType_, f, this),
        SimFlowEnergyTrans_SecondFanFlowRate_ (x.SimFlowEnergyTrans_SecondFanFlowRate_, f, this),
        SimFlowEnergyTrans_SecondaryFanTotalEfficiency_ (x.SimFlowEnergyTrans_SecondaryFanTotalEfficiency_, f, this),
        SimFlowEnergyTrans_SecondFanDeltaPressure_ (x.SimFlowEnergyTrans_SecondFanDeltaPressure_, f, this),
        SimFlowEnergyTrans_directHeatExchngEffect_ (x.SimFlowEnergyTrans_directHeatExchngEffect_, f, this),
        SimFlowEnergyTrans_PrimaryAirInletNodeName_ (x.SimFlowEnergyTrans_PrimaryAirInletNodeName_, f, this),
        SimFlowEnergyTrans_PrimaryAirOutInletNodeName_ (x.SimFlowEnergyTrans_PrimaryAirOutInletNodeName_, f, this),
        SimFlowEnergyTrans_SecondAirInletNodeName_ (x.SimFlowEnergyTrans_SecondAirInletNodeName_, f, this)
      {
      }

      SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad (const ::xercesc::DOMElement& e,
                                                                 ::xml_schema::flags f,
                                                                 ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_EvaporativeCooler (e, f | ::xml_schema::flags::base, c),
        SimFlowEnergyTrans_DirectPadArea_ (this),
        SimFlowEnergyTrans_DirectPadDepth_ (this),
        SimFlowEnergyTrans_CntlType_ (this),
        SimFlowEnergyTrans_SecondFanFlowRate_ (this),
        SimFlowEnergyTrans_SecondaryFanTotalEfficiency_ (this),
        SimFlowEnergyTrans_SecondFanDeltaPressure_ (this),
        SimFlowEnergyTrans_directHeatExchngEffect_ (this),
        SimFlowEnergyTrans_PrimaryAirInletNodeName_ (this),
        SimFlowEnergyTrans_PrimaryAirOutInletNodeName_ (this),
        SimFlowEnergyTrans_SecondAirInletNodeName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowEnergyTransfer_EvaporativeCooler::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowEnergyTrans_DirectPadArea
          //
          if (n.name () == "SimFlowEnergyTrans_DirectPadArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_DirectPadArea_)
            {
              this->SimFlowEnergyTrans_DirectPadArea_.set (SimFlowEnergyTrans_DirectPadArea_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_DirectPadDepth
          //
          if (n.name () == "SimFlowEnergyTrans_DirectPadDepth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_DirectPadDepth_)
            {
              this->SimFlowEnergyTrans_DirectPadDepth_.set (SimFlowEnergyTrans_DirectPadDepth_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_CntlType
          //
          if (n.name () == "SimFlowEnergyTrans_CntlType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_CntlType_type > r (
              SimFlowEnergyTrans_CntlType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_CntlType_)
            {
              this->SimFlowEnergyTrans_CntlType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_SecondFanFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_SecondFanFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_SecondFanFlowRate_)
            {
              this->SimFlowEnergyTrans_SecondFanFlowRate_.set (SimFlowEnergyTrans_SecondFanFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_SecondaryFanTotalEfficiency
          //
          if (n.name () == "SimFlowEnergyTrans_SecondaryFanTotalEfficiency" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_SecondaryFanTotalEfficiency_)
            {
              this->SimFlowEnergyTrans_SecondaryFanTotalEfficiency_.set (SimFlowEnergyTrans_SecondaryFanTotalEfficiency_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_SecondFanDeltaPressure
          //
          if (n.name () == "SimFlowEnergyTrans_SecondFanDeltaPressure" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_SecondFanDeltaPressure_)
            {
              this->SimFlowEnergyTrans_SecondFanDeltaPressure_.set (SimFlowEnergyTrans_SecondFanDeltaPressure_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_directHeatExchngEffect
          //
          if (n.name () == "SimFlowEnergyTrans_directHeatExchngEffect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_directHeatExchngEffect_)
            {
              this->SimFlowEnergyTrans_directHeatExchngEffect_.set (SimFlowEnergyTrans_directHeatExchngEffect_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_PrimaryAirInletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_PrimaryAirInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_PrimaryAirInletNodeName_type > r (
              SimFlowEnergyTrans_PrimaryAirInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_PrimaryAirInletNodeName_)
            {
              this->SimFlowEnergyTrans_PrimaryAirInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_PrimaryAirOutInletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_PrimaryAirOutInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_PrimaryAirOutInletNodeName_type > r (
              SimFlowEnergyTrans_PrimaryAirOutInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_PrimaryAirOutInletNodeName_)
            {
              this->SimFlowEnergyTrans_PrimaryAirOutInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_SecondAirInletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_SecondAirInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_SecondAirInletNodeName_type > r (
              SimFlowEnergyTrans_SecondAirInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_SecondAirInletNodeName_)
            {
              this->SimFlowEnergyTrans_SecondAirInletNodeName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad* SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad (*this, f, c);
      }

      SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad& SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      operator= (const SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowEnergyTransfer_EvaporativeCooler& > (*this) = x;
          this->SimFlowEnergyTrans_DirectPadArea_ = x.SimFlowEnergyTrans_DirectPadArea_;
          this->SimFlowEnergyTrans_DirectPadDepth_ = x.SimFlowEnergyTrans_DirectPadDepth_;
          this->SimFlowEnergyTrans_CntlType_ = x.SimFlowEnergyTrans_CntlType_;
          this->SimFlowEnergyTrans_SecondFanFlowRate_ = x.SimFlowEnergyTrans_SecondFanFlowRate_;
          this->SimFlowEnergyTrans_SecondaryFanTotalEfficiency_ = x.SimFlowEnergyTrans_SecondaryFanTotalEfficiency_;
          this->SimFlowEnergyTrans_SecondFanDeltaPressure_ = x.SimFlowEnergyTrans_SecondFanDeltaPressure_;
          this->SimFlowEnergyTrans_directHeatExchngEffect_ = x.SimFlowEnergyTrans_directHeatExchngEffect_;
          this->SimFlowEnergyTrans_PrimaryAirInletNodeName_ = x.SimFlowEnergyTrans_PrimaryAirInletNodeName_;
          this->SimFlowEnergyTrans_PrimaryAirOutInletNodeName_ = x.SimFlowEnergyTrans_PrimaryAirOutInletNodeName_;
          this->SimFlowEnergyTrans_SecondAirInletNodeName_ = x.SimFlowEnergyTrans_SecondAirInletNodeName_;
        }

        return *this;
      }

      SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad::
      ~SimFlowEnergyTransfer_EvaporativeCooler_IndirectCelDekPad ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

