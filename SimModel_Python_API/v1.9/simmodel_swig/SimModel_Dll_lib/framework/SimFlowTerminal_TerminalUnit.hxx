// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_TERMINAL_TERMINAL_UNIT_HXX
#define SIM_FLOW_TERMINAL_TERMINAL_UNIT_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowTerminal_TerminalUnit;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowterminal.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowTerminal_TerminalUnit: public ::schema::simxml::MepModel::SimFlowTerminal
      {
        public:
        // SimFlowTerm_ZoneTermUnitName
        //
        typedef ::xml_schema::string SimFlowTerm_ZoneTermUnitName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_ZoneTermUnitName_type > SimFlowTerm_ZoneTermUnitName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_ZoneTermUnitName_type, char > SimFlowTerm_ZoneTermUnitName_traits;

        const SimFlowTerm_ZoneTermUnitName_optional&
        SimFlowTerm_ZoneTermUnitName () const;

        SimFlowTerm_ZoneTermUnitName_optional&
        SimFlowTerm_ZoneTermUnitName ();

        void
        SimFlowTerm_ZoneTermUnitName (const SimFlowTerm_ZoneTermUnitName_type& x);

        void
        SimFlowTerm_ZoneTermUnitName (const SimFlowTerm_ZoneTermUnitName_optional& x);

        void
        SimFlowTerm_ZoneTermUnitName (::std::auto_ptr< SimFlowTerm_ZoneTermUnitName_type > p);

        // SimFlowTerm_TermUnitAvailschedule
        //
        typedef ::xml_schema::idref SimFlowTerm_TermUnitAvailschedule_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_TermUnitAvailschedule_type > SimFlowTerm_TermUnitAvailschedule_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_TermUnitAvailschedule_type, char > SimFlowTerm_TermUnitAvailschedule_traits;

        const SimFlowTerm_TermUnitAvailschedule_optional&
        SimFlowTerm_TermUnitAvailschedule () const;

        SimFlowTerm_TermUnitAvailschedule_optional&
        SimFlowTerm_TermUnitAvailschedule ();

        void
        SimFlowTerm_TermUnitAvailschedule (const SimFlowTerm_TermUnitAvailschedule_type& x);

        void
        SimFlowTerm_TermUnitAvailschedule (const SimFlowTerm_TermUnitAvailschedule_optional& x);

        void
        SimFlowTerm_TermUnitAvailschedule (::std::auto_ptr< SimFlowTerm_TermUnitAvailschedule_type > p);

        // SimFlowTerm_TermUnitAirInletNodeName
        //
        typedef ::xml_schema::string SimFlowTerm_TermUnitAirInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_TermUnitAirInletNodeName_type > SimFlowTerm_TermUnitAirInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_TermUnitAirInletNodeName_type, char > SimFlowTerm_TermUnitAirInletNodeName_traits;

        const SimFlowTerm_TermUnitAirInletNodeName_optional&
        SimFlowTerm_TermUnitAirInletNodeName () const;

        SimFlowTerm_TermUnitAirInletNodeName_optional&
        SimFlowTerm_TermUnitAirInletNodeName ();

        void
        SimFlowTerm_TermUnitAirInletNodeName (const SimFlowTerm_TermUnitAirInletNodeName_type& x);

        void
        SimFlowTerm_TermUnitAirInletNodeName (const SimFlowTerm_TermUnitAirInletNodeName_optional& x);

        void
        SimFlowTerm_TermUnitAirInletNodeName (::std::auto_ptr< SimFlowTerm_TermUnitAirInletNodeName_type > p);

        // SimFlowTerm_TermUnitAirOutletNodeName
        //
        typedef ::xml_schema::string SimFlowTerm_TermUnitAirOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_TermUnitAirOutletNodeName_type > SimFlowTerm_TermUnitAirOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_TermUnitAirOutletNodeName_type, char > SimFlowTerm_TermUnitAirOutletNodeName_traits;

        const SimFlowTerm_TermUnitAirOutletNodeName_optional&
        SimFlowTerm_TermUnitAirOutletNodeName () const;

        SimFlowTerm_TermUnitAirOutletNodeName_optional&
        SimFlowTerm_TermUnitAirOutletNodeName ();

        void
        SimFlowTerm_TermUnitAirOutletNodeName (const SimFlowTerm_TermUnitAirOutletNodeName_type& x);

        void
        SimFlowTerm_TermUnitAirOutletNodeName (const SimFlowTerm_TermUnitAirOutletNodeName_optional& x);

        void
        SimFlowTerm_TermUnitAirOutletNodeName (::std::auto_ptr< SimFlowTerm_TermUnitAirOutletNodeName_type > p);

        // SimFlowTerm_SupplyAirFlowRateDuringCoolingOp
        //
        typedef ::xml_schema::double_ SimFlowTerm_SupplyAirFlowRateDuringCoolingOp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_SupplyAirFlowRateDuringCoolingOp_type > SimFlowTerm_SupplyAirFlowRateDuringCoolingOp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_SupplyAirFlowRateDuringCoolingOp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowTerm_SupplyAirFlowRateDuringCoolingOp_traits;

        const SimFlowTerm_SupplyAirFlowRateDuringCoolingOp_optional&
        SimFlowTerm_SupplyAirFlowRateDuringCoolingOp () const;

        SimFlowTerm_SupplyAirFlowRateDuringCoolingOp_optional&
        SimFlowTerm_SupplyAirFlowRateDuringCoolingOp ();

        void
        SimFlowTerm_SupplyAirFlowRateDuringCoolingOp (const SimFlowTerm_SupplyAirFlowRateDuringCoolingOp_type& x);

        void
        SimFlowTerm_SupplyAirFlowRateDuringCoolingOp (const SimFlowTerm_SupplyAirFlowRateDuringCoolingOp_optional& x);

        // SimFlowTerm_SupplyAirFlowRateWhenNoCoolisNeeded
        //
        typedef ::xml_schema::double_ SimFlowTerm_SupplyAirFlowRateWhenNoCoolisNeeded_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_SupplyAirFlowRateWhenNoCoolisNeeded_type > SimFlowTerm_SupplyAirFlowRateWhenNoCoolisNeeded_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_SupplyAirFlowRateWhenNoCoolisNeeded_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowTerm_SupplyAirFlowRateWhenNoCoolisNeeded_traits;

        const SimFlowTerm_SupplyAirFlowRateWhenNoCoolisNeeded_optional&
        SimFlowTerm_SupplyAirFlowRateWhenNoCoolisNeeded () const;

        SimFlowTerm_SupplyAirFlowRateWhenNoCoolisNeeded_optional&
        SimFlowTerm_SupplyAirFlowRateWhenNoCoolisNeeded ();

        void
        SimFlowTerm_SupplyAirFlowRateWhenNoCoolisNeeded (const SimFlowTerm_SupplyAirFlowRateWhenNoCoolisNeeded_type& x);

        void
        SimFlowTerm_SupplyAirFlowRateWhenNoCoolisNeeded (const SimFlowTerm_SupplyAirFlowRateWhenNoCoolisNeeded_optional& x);

        // SimFlowTerm_SupplyAirFlowRateDuringHeatingOp
        //
        typedef ::xml_schema::double_ SimFlowTerm_SupplyAirFlowRateDuringHeatingOp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_SupplyAirFlowRateDuringHeatingOp_type > SimFlowTerm_SupplyAirFlowRateDuringHeatingOp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_SupplyAirFlowRateDuringHeatingOp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowTerm_SupplyAirFlowRateDuringHeatingOp_traits;

        const SimFlowTerm_SupplyAirFlowRateDuringHeatingOp_optional&
        SimFlowTerm_SupplyAirFlowRateDuringHeatingOp () const;

        SimFlowTerm_SupplyAirFlowRateDuringHeatingOp_optional&
        SimFlowTerm_SupplyAirFlowRateDuringHeatingOp ();

        void
        SimFlowTerm_SupplyAirFlowRateDuringHeatingOp (const SimFlowTerm_SupplyAirFlowRateDuringHeatingOp_type& x);

        void
        SimFlowTerm_SupplyAirFlowRateDuringHeatingOp (const SimFlowTerm_SupplyAirFlowRateDuringHeatingOp_optional& x);

        // SimFlowTerm_SupplyAirFlowRateWhenNoHeatingisNeeded
        //
        typedef ::xml_schema::double_ SimFlowTerm_SupplyAirFlowRateWhenNoHeatingisNeeded_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_SupplyAirFlowRateWhenNoHeatingisNeeded_type > SimFlowTerm_SupplyAirFlowRateWhenNoHeatingisNeeded_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_SupplyAirFlowRateWhenNoHeatingisNeeded_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowTerm_SupplyAirFlowRateWhenNoHeatingisNeeded_traits;

        const SimFlowTerm_SupplyAirFlowRateWhenNoHeatingisNeeded_optional&
        SimFlowTerm_SupplyAirFlowRateWhenNoHeatingisNeeded () const;

        SimFlowTerm_SupplyAirFlowRateWhenNoHeatingisNeeded_optional&
        SimFlowTerm_SupplyAirFlowRateWhenNoHeatingisNeeded ();

        void
        SimFlowTerm_SupplyAirFlowRateWhenNoHeatingisNeeded (const SimFlowTerm_SupplyAirFlowRateWhenNoHeatingisNeeded_type& x);

        void
        SimFlowTerm_SupplyAirFlowRateWhenNoHeatingisNeeded (const SimFlowTerm_SupplyAirFlowRateWhenNoHeatingisNeeded_optional& x);

        // SimFlowTerm_OutdrAirFlowRateDuringCoolingOp
        //
        typedef ::xml_schema::double_ SimFlowTerm_OutdrAirFlowRateDuringCoolingOp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_OutdrAirFlowRateDuringCoolingOp_type > SimFlowTerm_OutdrAirFlowRateDuringCoolingOp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_OutdrAirFlowRateDuringCoolingOp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowTerm_OutdrAirFlowRateDuringCoolingOp_traits;

        const SimFlowTerm_OutdrAirFlowRateDuringCoolingOp_optional&
        SimFlowTerm_OutdrAirFlowRateDuringCoolingOp () const;

        SimFlowTerm_OutdrAirFlowRateDuringCoolingOp_optional&
        SimFlowTerm_OutdrAirFlowRateDuringCoolingOp ();

        void
        SimFlowTerm_OutdrAirFlowRateDuringCoolingOp (const SimFlowTerm_OutdrAirFlowRateDuringCoolingOp_type& x);

        void
        SimFlowTerm_OutdrAirFlowRateDuringCoolingOp (const SimFlowTerm_OutdrAirFlowRateDuringCoolingOp_optional& x);

        // SimFlowTerm_OutdrAirFlowRateDuringHeatingOp
        //
        typedef ::xml_schema::double_ SimFlowTerm_OutdrAirFlowRateDuringHeatingOp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_OutdrAirFlowRateDuringHeatingOp_type > SimFlowTerm_OutdrAirFlowRateDuringHeatingOp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_OutdrAirFlowRateDuringHeatingOp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowTerm_OutdrAirFlowRateDuringHeatingOp_traits;

        const SimFlowTerm_OutdrAirFlowRateDuringHeatingOp_optional&
        SimFlowTerm_OutdrAirFlowRateDuringHeatingOp () const;

        SimFlowTerm_OutdrAirFlowRateDuringHeatingOp_optional&
        SimFlowTerm_OutdrAirFlowRateDuringHeatingOp ();

        void
        SimFlowTerm_OutdrAirFlowRateDuringHeatingOp (const SimFlowTerm_OutdrAirFlowRateDuringHeatingOp_type& x);

        void
        SimFlowTerm_OutdrAirFlowRateDuringHeatingOp (const SimFlowTerm_OutdrAirFlowRateDuringHeatingOp_optional& x);

        // SimFlowTerm_OutdrAirFlowRateWhenNoCoolingOrHeatingNeeded
        //
        typedef ::xml_schema::double_ SimFlowTerm_OutdrAirFlowRateWhenNoCoolingOrHeatingNeeded_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_OutdrAirFlowRateWhenNoCoolingOrHeatingNeeded_type > SimFlowTerm_OutdrAirFlowRateWhenNoCoolingOrHeatingNeeded_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_OutdrAirFlowRateWhenNoCoolingOrHeatingNeeded_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowTerm_OutdrAirFlowRateWhenNoCoolingOrHeatingNeeded_traits;

        const SimFlowTerm_OutdrAirFlowRateWhenNoCoolingOrHeatingNeeded_optional&
        SimFlowTerm_OutdrAirFlowRateWhenNoCoolingOrHeatingNeeded () const;

        SimFlowTerm_OutdrAirFlowRateWhenNoCoolingOrHeatingNeeded_optional&
        SimFlowTerm_OutdrAirFlowRateWhenNoCoolingOrHeatingNeeded ();

        void
        SimFlowTerm_OutdrAirFlowRateWhenNoCoolingOrHeatingNeeded (const SimFlowTerm_OutdrAirFlowRateWhenNoCoolingOrHeatingNeeded_type& x);

        void
        SimFlowTerm_OutdrAirFlowRateWhenNoCoolingOrHeatingNeeded (const SimFlowTerm_OutdrAirFlowRateWhenNoCoolingOrHeatingNeeded_optional& x);

        // SimFlowTerm_SupplyAirFanOperatModeSchedName
        //
        typedef ::xml_schema::idref SimFlowTerm_SupplyAirFanOperatModeSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_SupplyAirFanOperatModeSchedName_type > SimFlowTerm_SupplyAirFanOperatModeSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_SupplyAirFanOperatModeSchedName_type, char > SimFlowTerm_SupplyAirFanOperatModeSchedName_traits;

        const SimFlowTerm_SupplyAirFanOperatModeSchedName_optional&
        SimFlowTerm_SupplyAirFanOperatModeSchedName () const;

        SimFlowTerm_SupplyAirFanOperatModeSchedName_optional&
        SimFlowTerm_SupplyAirFanOperatModeSchedName ();

        void
        SimFlowTerm_SupplyAirFanOperatModeSchedName (const SimFlowTerm_SupplyAirFanOperatModeSchedName_type& x);

        void
        SimFlowTerm_SupplyAirFanOperatModeSchedName (const SimFlowTerm_SupplyAirFanOperatModeSchedName_optional& x);

        void
        SimFlowTerm_SupplyAirFanOperatModeSchedName (::std::auto_ptr< SimFlowTerm_SupplyAirFanOperatModeSchedName_type > p);

        // SimFlowTerm_SupplyAirFanPlacement
        //
        typedef ::xml_schema::string SimFlowTerm_SupplyAirFanPlacement_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_SupplyAirFanPlacement_type > SimFlowTerm_SupplyAirFanPlacement_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_SupplyAirFanPlacement_type, char > SimFlowTerm_SupplyAirFanPlacement_traits;

        const SimFlowTerm_SupplyAirFanPlacement_optional&
        SimFlowTerm_SupplyAirFanPlacement () const;

        SimFlowTerm_SupplyAirFanPlacement_optional&
        SimFlowTerm_SupplyAirFanPlacement ();

        void
        SimFlowTerm_SupplyAirFanPlacement (const SimFlowTerm_SupplyAirFanPlacement_type& x);

        void
        SimFlowTerm_SupplyAirFanPlacement (const SimFlowTerm_SupplyAirFanPlacement_optional& x);

        void
        SimFlowTerm_SupplyAirFanPlacement (::std::auto_ptr< SimFlowTerm_SupplyAirFanPlacement_type > p);

        // SimFlowTerm_SupplyAirFanObjType
        //
        typedef ::xml_schema::string SimFlowTerm_SupplyAirFanObjType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_SupplyAirFanObjType_type > SimFlowTerm_SupplyAirFanObjType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_SupplyAirFanObjType_type, char > SimFlowTerm_SupplyAirFanObjType_traits;

        const SimFlowTerm_SupplyAirFanObjType_optional&
        SimFlowTerm_SupplyAirFanObjType () const;

        SimFlowTerm_SupplyAirFanObjType_optional&
        SimFlowTerm_SupplyAirFanObjType ();

        void
        SimFlowTerm_SupplyAirFanObjType (const SimFlowTerm_SupplyAirFanObjType_type& x);

        void
        SimFlowTerm_SupplyAirFanObjType (const SimFlowTerm_SupplyAirFanObjType_optional& x);

        void
        SimFlowTerm_SupplyAirFanObjType (::std::auto_ptr< SimFlowTerm_SupplyAirFanObjType_type > p);

        // SimFlowTerm_SupplyAirFanObjName
        //
        typedef ::xml_schema::idref SimFlowTerm_SupplyAirFanObjName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_SupplyAirFanObjName_type > SimFlowTerm_SupplyAirFanObjName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_SupplyAirFanObjName_type, char > SimFlowTerm_SupplyAirFanObjName_traits;

        const SimFlowTerm_SupplyAirFanObjName_optional&
        SimFlowTerm_SupplyAirFanObjName () const;

        SimFlowTerm_SupplyAirFanObjName_optional&
        SimFlowTerm_SupplyAirFanObjName ();

        void
        SimFlowTerm_SupplyAirFanObjName (const SimFlowTerm_SupplyAirFanObjName_type& x);

        void
        SimFlowTerm_SupplyAirFanObjName (const SimFlowTerm_SupplyAirFanObjName_optional& x);

        void
        SimFlowTerm_SupplyAirFanObjName (::std::auto_ptr< SimFlowTerm_SupplyAirFanObjName_type > p);

        // SimFlowTerm_OutsideAirMixerObjType
        //
        typedef ::xml_schema::string SimFlowTerm_OutsideAirMixerObjType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_OutsideAirMixerObjType_type > SimFlowTerm_OutsideAirMixerObjType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_OutsideAirMixerObjType_type, char > SimFlowTerm_OutsideAirMixerObjType_traits;

        const SimFlowTerm_OutsideAirMixerObjType_optional&
        SimFlowTerm_OutsideAirMixerObjType () const;

        SimFlowTerm_OutsideAirMixerObjType_optional&
        SimFlowTerm_OutsideAirMixerObjType ();

        void
        SimFlowTerm_OutsideAirMixerObjType (const SimFlowTerm_OutsideAirMixerObjType_type& x);

        void
        SimFlowTerm_OutsideAirMixerObjType (const SimFlowTerm_OutsideAirMixerObjType_optional& x);

        void
        SimFlowTerm_OutsideAirMixerObjType (::std::auto_ptr< SimFlowTerm_OutsideAirMixerObjType_type > p);

        // SimFlowTerm_OutsideAirMixerObjName
        //
        typedef ::xml_schema::idref SimFlowTerm_OutsideAirMixerObjName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_OutsideAirMixerObjName_type > SimFlowTerm_OutsideAirMixerObjName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_OutsideAirMixerObjName_type, char > SimFlowTerm_OutsideAirMixerObjName_traits;

        const SimFlowTerm_OutsideAirMixerObjName_optional&
        SimFlowTerm_OutsideAirMixerObjName () const;

        SimFlowTerm_OutsideAirMixerObjName_optional&
        SimFlowTerm_OutsideAirMixerObjName ();

        void
        SimFlowTerm_OutsideAirMixerObjName (const SimFlowTerm_OutsideAirMixerObjName_type& x);

        void
        SimFlowTerm_OutsideAirMixerObjName (const SimFlowTerm_OutsideAirMixerObjName_optional& x);

        void
        SimFlowTerm_OutsideAirMixerObjName (::std::auto_ptr< SimFlowTerm_OutsideAirMixerObjName_type > p);

        // SimFlowTerm_CoolingCoilObjType
        //
        typedef ::xml_schema::string SimFlowTerm_CoolingCoilObjType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_CoolingCoilObjType_type > SimFlowTerm_CoolingCoilObjType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_CoolingCoilObjType_type, char > SimFlowTerm_CoolingCoilObjType_traits;

        const SimFlowTerm_CoolingCoilObjType_optional&
        SimFlowTerm_CoolingCoilObjType () const;

        SimFlowTerm_CoolingCoilObjType_optional&
        SimFlowTerm_CoolingCoilObjType ();

        void
        SimFlowTerm_CoolingCoilObjType (const SimFlowTerm_CoolingCoilObjType_type& x);

        void
        SimFlowTerm_CoolingCoilObjType (const SimFlowTerm_CoolingCoilObjType_optional& x);

        void
        SimFlowTerm_CoolingCoilObjType (::std::auto_ptr< SimFlowTerm_CoolingCoilObjType_type > p);

        // SimFlowTerm_CoolCoilObjName
        //
        typedef ::xml_schema::idref SimFlowTerm_CoolCoilObjName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_CoolCoilObjName_type > SimFlowTerm_CoolCoilObjName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_CoolCoilObjName_type, char > SimFlowTerm_CoolCoilObjName_traits;

        const SimFlowTerm_CoolCoilObjName_optional&
        SimFlowTerm_CoolCoilObjName () const;

        SimFlowTerm_CoolCoilObjName_optional&
        SimFlowTerm_CoolCoilObjName ();

        void
        SimFlowTerm_CoolCoilObjName (const SimFlowTerm_CoolCoilObjName_type& x);

        void
        SimFlowTerm_CoolCoilObjName (const SimFlowTerm_CoolCoilObjName_optional& x);

        void
        SimFlowTerm_CoolCoilObjName (::std::auto_ptr< SimFlowTerm_CoolCoilObjName_type > p);

        // SimFlowTerm_HeatingCoilObjType
        //
        typedef ::xml_schema::string SimFlowTerm_HeatingCoilObjType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_HeatingCoilObjType_type > SimFlowTerm_HeatingCoilObjType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_HeatingCoilObjType_type, char > SimFlowTerm_HeatingCoilObjType_traits;

        const SimFlowTerm_HeatingCoilObjType_optional&
        SimFlowTerm_HeatingCoilObjType () const;

        SimFlowTerm_HeatingCoilObjType_optional&
        SimFlowTerm_HeatingCoilObjType ();

        void
        SimFlowTerm_HeatingCoilObjType (const SimFlowTerm_HeatingCoilObjType_type& x);

        void
        SimFlowTerm_HeatingCoilObjType (const SimFlowTerm_HeatingCoilObjType_optional& x);

        void
        SimFlowTerm_HeatingCoilObjType (::std::auto_ptr< SimFlowTerm_HeatingCoilObjType_type > p);

        // SimFlowTerm_HeatingCoilObjName
        //
        typedef ::xml_schema::idref SimFlowTerm_HeatingCoilObjName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_HeatingCoilObjName_type > SimFlowTerm_HeatingCoilObjName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_HeatingCoilObjName_type, char > SimFlowTerm_HeatingCoilObjName_traits;

        const SimFlowTerm_HeatingCoilObjName_optional&
        SimFlowTerm_HeatingCoilObjName () const;

        SimFlowTerm_HeatingCoilObjName_optional&
        SimFlowTerm_HeatingCoilObjName ();

        void
        SimFlowTerm_HeatingCoilObjName (const SimFlowTerm_HeatingCoilObjName_type& x);

        void
        SimFlowTerm_HeatingCoilObjName (const SimFlowTerm_HeatingCoilObjName_optional& x);

        void
        SimFlowTerm_HeatingCoilObjName (::std::auto_ptr< SimFlowTerm_HeatingCoilObjName_type > p);

        // SimFlowTerm_ZoneTermUnitOnParasiticElec
        //
        typedef ::xml_schema::double_ SimFlowTerm_ZoneTermUnitOnParasiticElec_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_ZoneTermUnitOnParasiticElec_type > SimFlowTerm_ZoneTermUnitOnParasiticElec_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_ZoneTermUnitOnParasiticElec_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowTerm_ZoneTermUnitOnParasiticElec_traits;

        const SimFlowTerm_ZoneTermUnitOnParasiticElec_optional&
        SimFlowTerm_ZoneTermUnitOnParasiticElec () const;

        SimFlowTerm_ZoneTermUnitOnParasiticElec_optional&
        SimFlowTerm_ZoneTermUnitOnParasiticElec ();

        void
        SimFlowTerm_ZoneTermUnitOnParasiticElec (const SimFlowTerm_ZoneTermUnitOnParasiticElec_type& x);

        void
        SimFlowTerm_ZoneTermUnitOnParasiticElec (const SimFlowTerm_ZoneTermUnitOnParasiticElec_optional& x);

        // SimFlowTerm_ZoneTermUnitOffParasiticElec
        //
        typedef ::xml_schema::double_ SimFlowTerm_ZoneTermUnitOffParasiticElec_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_ZoneTermUnitOffParasiticElec_type > SimFlowTerm_ZoneTermUnitOffParasiticElec_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_ZoneTermUnitOffParasiticElec_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowTerm_ZoneTermUnitOffParasiticElec_traits;

        const SimFlowTerm_ZoneTermUnitOffParasiticElec_optional&
        SimFlowTerm_ZoneTermUnitOffParasiticElec () const;

        SimFlowTerm_ZoneTermUnitOffParasiticElec_optional&
        SimFlowTerm_ZoneTermUnitOffParasiticElec ();

        void
        SimFlowTerm_ZoneTermUnitOffParasiticElec (const SimFlowTerm_ZoneTermUnitOffParasiticElec_type& x);

        void
        SimFlowTerm_ZoneTermUnitOffParasiticElec (const SimFlowTerm_ZoneTermUnitOffParasiticElec_optional& x);

        // SimFlowTerm_RatedHeatCapSizingRatio
        //
        typedef ::xml_schema::double_ SimFlowTerm_RatedHeatCapSizingRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_RatedHeatCapSizingRatio_type > SimFlowTerm_RatedHeatCapSizingRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_RatedHeatCapSizingRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowTerm_RatedHeatCapSizingRatio_traits;

        const SimFlowTerm_RatedHeatCapSizingRatio_optional&
        SimFlowTerm_RatedHeatCapSizingRatio () const;

        SimFlowTerm_RatedHeatCapSizingRatio_optional&
        SimFlowTerm_RatedHeatCapSizingRatio ();

        void
        SimFlowTerm_RatedHeatCapSizingRatio (const SimFlowTerm_RatedHeatCapSizingRatio_type& x);

        void
        SimFlowTerm_RatedHeatCapSizingRatio (const SimFlowTerm_RatedHeatCapSizingRatio_optional& x);

        // SimFlowTerm_AvailMngrListName
        //
        typedef ::xml_schema::idref SimFlowTerm_AvailMngrListName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowTerm_AvailMngrListName_type > SimFlowTerm_AvailMngrListName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowTerm_AvailMngrListName_type, char > SimFlowTerm_AvailMngrListName_traits;

        const SimFlowTerm_AvailMngrListName_optional&
        SimFlowTerm_AvailMngrListName () const;

        SimFlowTerm_AvailMngrListName_optional&
        SimFlowTerm_AvailMngrListName ();

        void
        SimFlowTerm_AvailMngrListName (const SimFlowTerm_AvailMngrListName_type& x);

        void
        SimFlowTerm_AvailMngrListName (const SimFlowTerm_AvailMngrListName_optional& x);

        void
        SimFlowTerm_AvailMngrListName (::std::auto_ptr< SimFlowTerm_AvailMngrListName_type > p);

        // Constructors.
        //
        SimFlowTerminal_TerminalUnit ();

        SimFlowTerminal_TerminalUnit (const RefId_type&);

        SimFlowTerminal_TerminalUnit (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

        SimFlowTerminal_TerminalUnit (const SimFlowTerminal_TerminalUnit& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

        virtual SimFlowTerminal_TerminalUnit*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowTerminal_TerminalUnit&
        operator= (const SimFlowTerminal_TerminalUnit& x);

        virtual 
        ~SimFlowTerminal_TerminalUnit ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowTerm_ZoneTermUnitName_optional SimFlowTerm_ZoneTermUnitName_;
        SimFlowTerm_TermUnitAvailschedule_optional SimFlowTerm_TermUnitAvailschedule_;
        SimFlowTerm_TermUnitAirInletNodeName_optional SimFlowTerm_TermUnitAirInletNodeName_;
        SimFlowTerm_TermUnitAirOutletNodeName_optional SimFlowTerm_TermUnitAirOutletNodeName_;
        SimFlowTerm_SupplyAirFlowRateDuringCoolingOp_optional SimFlowTerm_SupplyAirFlowRateDuringCoolingOp_;
        SimFlowTerm_SupplyAirFlowRateWhenNoCoolisNeeded_optional SimFlowTerm_SupplyAirFlowRateWhenNoCoolisNeeded_;
        SimFlowTerm_SupplyAirFlowRateDuringHeatingOp_optional SimFlowTerm_SupplyAirFlowRateDuringHeatingOp_;
        SimFlowTerm_SupplyAirFlowRateWhenNoHeatingisNeeded_optional SimFlowTerm_SupplyAirFlowRateWhenNoHeatingisNeeded_;
        SimFlowTerm_OutdrAirFlowRateDuringCoolingOp_optional SimFlowTerm_OutdrAirFlowRateDuringCoolingOp_;
        SimFlowTerm_OutdrAirFlowRateDuringHeatingOp_optional SimFlowTerm_OutdrAirFlowRateDuringHeatingOp_;
        SimFlowTerm_OutdrAirFlowRateWhenNoCoolingOrHeatingNeeded_optional SimFlowTerm_OutdrAirFlowRateWhenNoCoolingOrHeatingNeeded_;
        SimFlowTerm_SupplyAirFanOperatModeSchedName_optional SimFlowTerm_SupplyAirFanOperatModeSchedName_;
        SimFlowTerm_SupplyAirFanPlacement_optional SimFlowTerm_SupplyAirFanPlacement_;
        SimFlowTerm_SupplyAirFanObjType_optional SimFlowTerm_SupplyAirFanObjType_;
        SimFlowTerm_SupplyAirFanObjName_optional SimFlowTerm_SupplyAirFanObjName_;
        SimFlowTerm_OutsideAirMixerObjType_optional SimFlowTerm_OutsideAirMixerObjType_;
        SimFlowTerm_OutsideAirMixerObjName_optional SimFlowTerm_OutsideAirMixerObjName_;
        SimFlowTerm_CoolingCoilObjType_optional SimFlowTerm_CoolingCoilObjType_;
        SimFlowTerm_CoolCoilObjName_optional SimFlowTerm_CoolCoilObjName_;
        SimFlowTerm_HeatingCoilObjType_optional SimFlowTerm_HeatingCoilObjType_;
        SimFlowTerm_HeatingCoilObjName_optional SimFlowTerm_HeatingCoilObjName_;
        SimFlowTerm_ZoneTermUnitOnParasiticElec_optional SimFlowTerm_ZoneTermUnitOnParasiticElec_;
        SimFlowTerm_ZoneTermUnitOffParasiticElec_optional SimFlowTerm_ZoneTermUnitOffParasiticElec_;
        SimFlowTerm_RatedHeatCapSizingRatio_optional SimFlowTerm_RatedHeatCapSizingRatio_;
        SimFlowTerm_AvailMngrListName_optional SimFlowTerm_AvailMngrListName_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_TERMINAL_TERMINAL_UNIT_HXX
