// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimVirtualElement_Wall_OpeningFiller.hxx"

#include "doublelist.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimVirtualElement_Wall_OpeningFiller
      // 

      const SimVirtualElement_Wall_OpeningFiller::SimVirtualElem_Name_optional& SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_Name () const
      {
        return this->SimVirtualElem_Name_;
      }

      SimVirtualElement_Wall_OpeningFiller::SimVirtualElem_Name_optional& SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_Name ()
      {
        return this->SimVirtualElem_Name_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_Name (const SimVirtualElem_Name_type& x)
      {
        this->SimVirtualElem_Name_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_Name (const SimVirtualElem_Name_optional& x)
      {
        this->SimVirtualElem_Name_ = x;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_Name (::std::auto_ptr< SimVirtualElem_Name_type > x)
      {
        this->SimVirtualElem_Name_.set (x);
      }

      const SimVirtualElement_Wall_OpeningFiller::SimVirtualElem_ConstructionName_optional& SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_ConstructionName () const
      {
        return this->SimVirtualElem_ConstructionName_;
      }

      SimVirtualElement_Wall_OpeningFiller::SimVirtualElem_ConstructionName_optional& SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_ConstructionName ()
      {
        return this->SimVirtualElem_ConstructionName_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_ConstructionName (const SimVirtualElem_ConstructionName_type& x)
      {
        this->SimVirtualElem_ConstructionName_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_ConstructionName (const SimVirtualElem_ConstructionName_optional& x)
      {
        this->SimVirtualElem_ConstructionName_ = x;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_ConstructionName (::std::auto_ptr< SimVirtualElem_ConstructionName_type > x)
      {
        this->SimVirtualElem_ConstructionName_.set (x);
      }

      const SimVirtualElement_Wall_OpeningFiller::SimVirtualElem_BldgSurfName_optional& SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_BldgSurfName () const
      {
        return this->SimVirtualElem_BldgSurfName_;
      }

      SimVirtualElement_Wall_OpeningFiller::SimVirtualElem_BldgSurfName_optional& SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_BldgSurfName ()
      {
        return this->SimVirtualElem_BldgSurfName_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_BldgSurfName (const SimVirtualElem_BldgSurfName_type& x)
      {
        this->SimVirtualElem_BldgSurfName_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_BldgSurfName (const SimVirtualElem_BldgSurfName_optional& x)
      {
        this->SimVirtualElem_BldgSurfName_ = x;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_BldgSurfName (::std::auto_ptr< SimVirtualElem_BldgSurfName_type > x)
      {
        this->SimVirtualElem_BldgSurfName_.set (x);
      }

      const SimVirtualElement_Wall_OpeningFiller::SimVirtualElem_OutsdBndCondObject_optional& SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_OutsdBndCondObject () const
      {
        return this->SimVirtualElem_OutsdBndCondObject_;
      }

      SimVirtualElement_Wall_OpeningFiller::SimVirtualElem_OutsdBndCondObject_optional& SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_OutsdBndCondObject ()
      {
        return this->SimVirtualElem_OutsdBndCondObject_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_OutsdBndCondObject (const SimVirtualElem_OutsdBndCondObject_type& x)
      {
        this->SimVirtualElem_OutsdBndCondObject_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_OutsdBndCondObject (const SimVirtualElem_OutsdBndCondObject_optional& x)
      {
        this->SimVirtualElem_OutsdBndCondObject_ = x;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_OutsdBndCondObject (::std::auto_ptr< SimVirtualElem_OutsdBndCondObject_type > x)
      {
        this->SimVirtualElem_OutsdBndCondObject_.set (x);
      }

      const SimVirtualElement_Wall_OpeningFiller::SimVirtualElem_Mult_optional& SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_Mult () const
      {
        return this->SimVirtualElem_Mult_;
      }

      SimVirtualElement_Wall_OpeningFiller::SimVirtualElem_Mult_optional& SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_Mult ()
      {
        return this->SimVirtualElem_Mult_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_Mult (const SimVirtualElem_Mult_type& x)
      {
        this->SimVirtualElem_Mult_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_Mult (const SimVirtualElem_Mult_optional& x)
      {
        this->SimVirtualElem_Mult_ = x;
      }

      const SimVirtualElement_Wall_OpeningFiller::SimVirtualElem_StartXCoord_optional& SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_StartXCoord () const
      {
        return this->SimVirtualElem_StartXCoord_;
      }

      SimVirtualElement_Wall_OpeningFiller::SimVirtualElem_StartXCoord_optional& SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_StartXCoord ()
      {
        return this->SimVirtualElem_StartXCoord_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_StartXCoord (const SimVirtualElem_StartXCoord_type& x)
      {
        this->SimVirtualElem_StartXCoord_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_StartXCoord (const SimVirtualElem_StartXCoord_optional& x)
      {
        this->SimVirtualElem_StartXCoord_ = x;
      }

      const SimVirtualElement_Wall_OpeningFiller::SimVirtualElem_StartZCoord_optional& SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_StartZCoord () const
      {
        return this->SimVirtualElem_StartZCoord_;
      }

      SimVirtualElement_Wall_OpeningFiller::SimVirtualElem_StartZCoord_optional& SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_StartZCoord ()
      {
        return this->SimVirtualElem_StartZCoord_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_StartZCoord (const SimVirtualElem_StartZCoord_type& x)
      {
        this->SimVirtualElem_StartZCoord_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_StartZCoord (const SimVirtualElem_StartZCoord_optional& x)
      {
        this->SimVirtualElem_StartZCoord_ = x;
      }

      const SimVirtualElement_Wall_OpeningFiller::SimVirtualElem_Length_optional& SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_Length () const
      {
        return this->SimVirtualElem_Length_;
      }

      SimVirtualElement_Wall_OpeningFiller::SimVirtualElem_Length_optional& SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_Length ()
      {
        return this->SimVirtualElem_Length_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_Length (const SimVirtualElem_Length_type& x)
      {
        this->SimVirtualElem_Length_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_Length (const SimVirtualElem_Length_optional& x)
      {
        this->SimVirtualElem_Length_ = x;
      }

      const SimVirtualElement_Wall_OpeningFiller::SimVirtualElem_Ht_optional& SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_Ht () const
      {
        return this->SimVirtualElem_Ht_;
      }

      SimVirtualElement_Wall_OpeningFiller::SimVirtualElem_Ht_optional& SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_Ht ()
      {
        return this->SimVirtualElem_Ht_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_Ht (const SimVirtualElem_Ht_type& x)
      {
        this->SimVirtualElem_Ht_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElem_Ht (const SimVirtualElem_Ht_optional& x)
      {
        this->SimVirtualElem_Ht_ = x;
      }

      const SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_DetldOpng_Name_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_Name () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_Name_;
      }

      SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_DetldOpng_Name_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_Name ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_Name_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_Name (const Airflow_MZone_Comp_DetldOpng_Name_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_Name_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_Name (const Airflow_MZone_Comp_DetldOpng_Name_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_Name_ = x;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_Name (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_Name_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_Name_.set (x);
      }

      const SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_;
      }

      SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ = x;
      }

      const SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_;
      }

      SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ = x;
      }

      const SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_;
      }

      SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO (const Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO (const Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ = x;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_.set (x);
      }

      const SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_;
      }

      SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis (const Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis (const Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ = x;
      }

      const SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_;
      }

      SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData (const Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData (const Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ = x;
      }

      const SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_;
      }

      SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ = x;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_.set (x);
      }

      const SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_;
      }

      SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ = x;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_.set (x);
      }

      const SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_;
      }

      SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ = x;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_.set (x);
      }

      const SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_;
      }

      SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ = x;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_.set (x);
      }

      const SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_;
      }

      SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ = x;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_.set (x);
      }

      const SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_SmplOpng_Name_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_SmplOpng_Name () const
      {
        return this->Airflow_MZone_Comp_SmplOpng_Name_;
      }

      SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_SmplOpng_Name_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_SmplOpng_Name ()
      {
        return this->Airflow_MZone_Comp_SmplOpng_Name_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_SmplOpng_Name (const Airflow_MZone_Comp_SmplOpng_Name_type& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_Name_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_SmplOpng_Name (const Airflow_MZone_Comp_SmplOpng_Name_optional& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_Name_ = x;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_SmplOpng_Name (::std::auto_ptr< Airflow_MZone_Comp_SmplOpng_Name_type > x)
      {
        this->Airflow_MZone_Comp_SmplOpng_Name_.set (x);
      }

      const SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed () const
      {
        return this->Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_;
      }

      SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed ()
      {
        return this->Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed (const Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_type& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed (const Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_optional& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_ = x;
      }

      const SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed () const
      {
        return this->Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_;
      }

      SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed ()
      {
        return this->Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed (const Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_type& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed (const Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_optional& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_ = x;
      }

      const SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow () const
      {
        return this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_;
      }

      SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow ()
      {
        return this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow (const Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_type& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow (const Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ = x;
      }

      const SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_SmplOpng_DischargeCoef () const
      {
        return this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_;
      }

      SimVirtualElement_Wall_OpeningFiller::Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional& SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_SmplOpng_DischargeCoef ()
      {
        return this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_;
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_SmplOpng_DischargeCoef (const Airflow_MZone_Comp_SmplOpng_DischargeCoef_type& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_.set (x);
      }

      void SimVirtualElement_Wall_OpeningFiller::
      Airflow_MZone_Comp_SmplOpng_DischargeCoef (const Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimVirtualElement_Wall_OpeningFiller
      //

      SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElement_Wall_OpeningFiller ()
      : ::schema::simxml::BuildingModel::SimVirtualElement_Wall (),
        SimVirtualElem_Name_ (this),
        SimVirtualElem_ConstructionName_ (this),
        SimVirtualElem_BldgSurfName_ (this),
        SimVirtualElem_OutsdBndCondObject_ (this),
        SimVirtualElem_Mult_ (this),
        SimVirtualElem_StartXCoord_ (this),
        SimVirtualElem_StartZCoord_ (this),
        SimVirtualElem_Length_ (this),
        SimVirtualElem_Ht_ (this),
        Airflow_MZone_Comp_DetldOpng_Name_ (this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ (this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ (this),
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ (this),
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ (this),
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ (this),
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_SmplOpng_Name_ (this),
        Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_ (this),
        Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_ (this),
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ (this),
        Airflow_MZone_Comp_SmplOpng_DischargeCoef_ (this)
      {
      }

      SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElement_Wall_OpeningFiller (const RefId_type& RefId)
      : ::schema::simxml::BuildingModel::SimVirtualElement_Wall (RefId),
        SimVirtualElem_Name_ (this),
        SimVirtualElem_ConstructionName_ (this),
        SimVirtualElem_BldgSurfName_ (this),
        SimVirtualElem_OutsdBndCondObject_ (this),
        SimVirtualElem_Mult_ (this),
        SimVirtualElem_StartXCoord_ (this),
        SimVirtualElem_StartZCoord_ (this),
        SimVirtualElem_Length_ (this),
        SimVirtualElem_Ht_ (this),
        Airflow_MZone_Comp_DetldOpng_Name_ (this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ (this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ (this),
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ (this),
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ (this),
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ (this),
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_SmplOpng_Name_ (this),
        Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_ (this),
        Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_ (this),
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ (this),
        Airflow_MZone_Comp_SmplOpng_DischargeCoef_ (this)
      {
      }

      SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElement_Wall_OpeningFiller (const SimVirtualElement_Wall_OpeningFiller& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimVirtualElement_Wall (x, f, c),
        SimVirtualElem_Name_ (x.SimVirtualElem_Name_, f, this),
        SimVirtualElem_ConstructionName_ (x.SimVirtualElem_ConstructionName_, f, this),
        SimVirtualElem_BldgSurfName_ (x.SimVirtualElem_BldgSurfName_, f, this),
        SimVirtualElem_OutsdBndCondObject_ (x.SimVirtualElem_OutsdBndCondObject_, f, this),
        SimVirtualElem_Mult_ (x.SimVirtualElem_Mult_, f, this),
        SimVirtualElem_StartXCoord_ (x.SimVirtualElem_StartXCoord_, f, this),
        SimVirtualElem_StartZCoord_ (x.SimVirtualElem_StartZCoord_, f, this),
        SimVirtualElem_Length_ (x.SimVirtualElem_Length_, f, this),
        SimVirtualElem_Ht_ (x.SimVirtualElem_Ht_, f, this),
        Airflow_MZone_Comp_DetldOpng_Name_ (x.Airflow_MZone_Comp_DetldOpng_Name_, f, this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ (x.Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_, f, this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ (x.Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_, f, this),
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ (x.Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_, f, this),
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ (x.Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_, f, this),
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ (x.Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_, f, this),
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_SmplOpng_Name_ (x.Airflow_MZone_Comp_SmplOpng_Name_, f, this),
        Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_ (x.Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_, f, this),
        Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_ (x.Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_, f, this),
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ (x.Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_, f, this),
        Airflow_MZone_Comp_SmplOpng_DischargeCoef_ (x.Airflow_MZone_Comp_SmplOpng_DischargeCoef_, f, this)
      {
      }

      SimVirtualElement_Wall_OpeningFiller::
      SimVirtualElement_Wall_OpeningFiller (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimVirtualElement_Wall (e, f | ::xml_schema::flags::base, c),
        SimVirtualElem_Name_ (this),
        SimVirtualElem_ConstructionName_ (this),
        SimVirtualElem_BldgSurfName_ (this),
        SimVirtualElem_OutsdBndCondObject_ (this),
        SimVirtualElem_Mult_ (this),
        SimVirtualElem_StartXCoord_ (this),
        SimVirtualElem_StartZCoord_ (this),
        SimVirtualElem_Length_ (this),
        SimVirtualElem_Ht_ (this),
        Airflow_MZone_Comp_DetldOpng_Name_ (this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ (this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ (this),
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ (this),
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ (this),
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ (this),
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_SmplOpng_Name_ (this),
        Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_ (this),
        Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_ (this),
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ (this),
        Airflow_MZone_Comp_SmplOpng_DischargeCoef_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimVirtualElement_Wall_OpeningFiller::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::BuildingModel::SimVirtualElement_Wall::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimVirtualElem_Name
          //
          if (n.name () == "SimVirtualElem_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimVirtualElem_Name_type > r (
              SimVirtualElem_Name_traits::create (i, f, this));

            if (!this->SimVirtualElem_Name_)
            {
              this->SimVirtualElem_Name_.set (r);
              continue;
            }
          }

          // SimVirtualElem_ConstructionName
          //
          if (n.name () == "SimVirtualElem_ConstructionName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimVirtualElem_ConstructionName_type > r (
              SimVirtualElem_ConstructionName_traits::create (i, f, this));

            if (!this->SimVirtualElem_ConstructionName_)
            {
              this->SimVirtualElem_ConstructionName_.set (r);
              continue;
            }
          }

          // SimVirtualElem_BldgSurfName
          //
          if (n.name () == "SimVirtualElem_BldgSurfName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimVirtualElem_BldgSurfName_type > r (
              SimVirtualElem_BldgSurfName_traits::create (i, f, this));

            if (!this->SimVirtualElem_BldgSurfName_)
            {
              this->SimVirtualElem_BldgSurfName_.set (r);
              continue;
            }
          }

          // SimVirtualElem_OutsdBndCondObject
          //
          if (n.name () == "SimVirtualElem_OutsdBndCondObject" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimVirtualElem_OutsdBndCondObject_type > r (
              SimVirtualElem_OutsdBndCondObject_traits::create (i, f, this));

            if (!this->SimVirtualElem_OutsdBndCondObject_)
            {
              this->SimVirtualElem_OutsdBndCondObject_.set (r);
              continue;
            }
          }

          // SimVirtualElem_Mult
          //
          if (n.name () == "SimVirtualElem_Mult" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimVirtualElem_Mult_)
            {
              this->SimVirtualElem_Mult_.set (SimVirtualElem_Mult_traits::create (i, f, this));
              continue;
            }
          }

          // SimVirtualElem_StartXCoord
          //
          if (n.name () == "SimVirtualElem_StartXCoord" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimVirtualElem_StartXCoord_)
            {
              this->SimVirtualElem_StartXCoord_.set (SimVirtualElem_StartXCoord_traits::create (i, f, this));
              continue;
            }
          }

          // SimVirtualElem_StartZCoord
          //
          if (n.name () == "SimVirtualElem_StartZCoord" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimVirtualElem_StartZCoord_)
            {
              this->SimVirtualElem_StartZCoord_.set (SimVirtualElem_StartZCoord_traits::create (i, f, this));
              continue;
            }
          }

          // SimVirtualElem_Length
          //
          if (n.name () == "SimVirtualElem_Length" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimVirtualElem_Length_)
            {
              this->SimVirtualElem_Length_.set (SimVirtualElem_Length_traits::create (i, f, this));
              continue;
            }
          }

          // SimVirtualElem_Ht
          //
          if (n.name () == "SimVirtualElem_Ht" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimVirtualElem_Ht_)
            {
              this->SimVirtualElem_Ht_.set (SimVirtualElem_Ht_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_Name
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_Name_type > r (
              Airflow_MZone_Comp_DetldOpng_Name_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_Name_)
            {
              this->Airflow_MZone_Comp_DetldOpng_Name_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_)
            {
              this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_.set (Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_)
            {
              this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_.set (Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type > r (
              Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_)
            {
              this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_)
            {
              this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_.set (Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_)
            {
              this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_.set (Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_SmplOpng_Name
          //
          if (n.name () == "Airflow_MZone_Comp_SmplOpng_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_SmplOpng_Name_type > r (
              Airflow_MZone_Comp_SmplOpng_Name_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_SmplOpng_Name_)
            {
              this->Airflow_MZone_Comp_SmplOpng_Name_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed
          //
          if (n.name () == "Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_)
            {
              this->Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_.set (Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed
          //
          if (n.name () == "Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_)
            {
              this->Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_.set (Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow
          //
          if (n.name () == "Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_)
            {
              this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_.set (Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_SmplOpng_DischargeCoef
          //
          if (n.name () == "Airflow_MZone_Comp_SmplOpng_DischargeCoef" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_)
            {
              this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_.set (Airflow_MZone_Comp_SmplOpng_DischargeCoef_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimVirtualElement_Wall_OpeningFiller* SimVirtualElement_Wall_OpeningFiller::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimVirtualElement_Wall_OpeningFiller (*this, f, c);
      }

      SimVirtualElement_Wall_OpeningFiller& SimVirtualElement_Wall_OpeningFiller::
      operator= (const SimVirtualElement_Wall_OpeningFiller& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::BuildingModel::SimVirtualElement_Wall& > (*this) = x;
          this->SimVirtualElem_Name_ = x.SimVirtualElem_Name_;
          this->SimVirtualElem_ConstructionName_ = x.SimVirtualElem_ConstructionName_;
          this->SimVirtualElem_BldgSurfName_ = x.SimVirtualElem_BldgSurfName_;
          this->SimVirtualElem_OutsdBndCondObject_ = x.SimVirtualElem_OutsdBndCondObject_;
          this->SimVirtualElem_Mult_ = x.SimVirtualElem_Mult_;
          this->SimVirtualElem_StartXCoord_ = x.SimVirtualElem_StartXCoord_;
          this->SimVirtualElem_StartZCoord_ = x.SimVirtualElem_StartZCoord_;
          this->SimVirtualElem_Length_ = x.SimVirtualElem_Length_;
          this->SimVirtualElem_Ht_ = x.SimVirtualElem_Ht_;
          this->Airflow_MZone_Comp_DetldOpng_Name_ = x.Airflow_MZone_Comp_DetldOpng_Name_;
          this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ = x.Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_;
          this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ = x.Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_;
          this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ = x.Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_;
          this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ = x.Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_;
          this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ = x.Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_;
          this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_;
          this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_;
          this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_;
          this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_;
          this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_;
          this->Airflow_MZone_Comp_SmplOpng_Name_ = x.Airflow_MZone_Comp_SmplOpng_Name_;
          this->Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_ = x.Airflow_MZone_Comp_SmplOpng_AirMassFlowCoefWhenOpngClosed_;
          this->Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_ = x.Airflow_MZone_Comp_SmplOpng_AirMassFlowExpWhenOpngClosed_;
          this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ = x.Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_;
          this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_ = x.Airflow_MZone_Comp_SmplOpng_DischargeCoef_;
        }

        return *this;
      }

      SimVirtualElement_Wall_OpeningFiller::
      ~SimVirtualElement_Wall_OpeningFiller ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

