// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimWindow_Skylight_ExteriorDetailed.hxx"

#include "doublelist.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimWindow_Skylight_ExteriorDetailed
      // 

      const SimWindow_Skylight_ExteriorDetailed::SimWindow_SurfType_optional& SimWindow_Skylight_ExteriorDetailed::
      SimWindow_SurfType () const
      {
        return this->SimWindow_SurfType_;
      }

      SimWindow_Skylight_ExteriorDetailed::SimWindow_SurfType_optional& SimWindow_Skylight_ExteriorDetailed::
      SimWindow_SurfType ()
      {
        return this->SimWindow_SurfType_;
      }

      void SimWindow_Skylight_ExteriorDetailed::
      SimWindow_SurfType (const SimWindow_SurfType_type& x)
      {
        this->SimWindow_SurfType_.set (x);
      }

      void SimWindow_Skylight_ExteriorDetailed::
      SimWindow_SurfType (const SimWindow_SurfType_optional& x)
      {
        this->SimWindow_SurfType_ = x;
      }

      void SimWindow_Skylight_ExteriorDetailed::
      SimWindow_SurfType (::std::auto_ptr< SimWindow_SurfType_type > x)
      {
        this->SimWindow_SurfType_.set (x);
      }

      const SimWindow_Skylight_ExteriorDetailed::SimWindow_OutsdBndCondObject_optional& SimWindow_Skylight_ExteriorDetailed::
      SimWindow_OutsdBndCondObject () const
      {
        return this->SimWindow_OutsdBndCondObject_;
      }

      SimWindow_Skylight_ExteriorDetailed::SimWindow_OutsdBndCondObject_optional& SimWindow_Skylight_ExteriorDetailed::
      SimWindow_OutsdBndCondObject ()
      {
        return this->SimWindow_OutsdBndCondObject_;
      }

      void SimWindow_Skylight_ExteriorDetailed::
      SimWindow_OutsdBndCondObject (const SimWindow_OutsdBndCondObject_type& x)
      {
        this->SimWindow_OutsdBndCondObject_.set (x);
      }

      void SimWindow_Skylight_ExteriorDetailed::
      SimWindow_OutsdBndCondObject (const SimWindow_OutsdBndCondObject_optional& x)
      {
        this->SimWindow_OutsdBndCondObject_ = x;
      }

      void SimWindow_Skylight_ExteriorDetailed::
      SimWindow_OutsdBndCondObject (::std::auto_ptr< SimWindow_OutsdBndCondObject_type > x)
      {
        this->SimWindow_OutsdBndCondObject_.set (x);
      }

      const SimWindow_Skylight_ExteriorDetailed::SimWindow_ViewFactToGnd_optional& SimWindow_Skylight_ExteriorDetailed::
      SimWindow_ViewFactToGnd () const
      {
        return this->SimWindow_ViewFactToGnd_;
      }

      SimWindow_Skylight_ExteriorDetailed::SimWindow_ViewFactToGnd_optional& SimWindow_Skylight_ExteriorDetailed::
      SimWindow_ViewFactToGnd ()
      {
        return this->SimWindow_ViewFactToGnd_;
      }

      void SimWindow_Skylight_ExteriorDetailed::
      SimWindow_ViewFactToGnd (const SimWindow_ViewFactToGnd_type& x)
      {
        this->SimWindow_ViewFactToGnd_.set (x);
      }

      void SimWindow_Skylight_ExteriorDetailed::
      SimWindow_ViewFactToGnd (const SimWindow_ViewFactToGnd_optional& x)
      {
        this->SimWindow_ViewFactToGnd_ = x;
      }

      const SimWindow_Skylight_ExteriorDetailed::SimWindow_NumbVerts_optional& SimWindow_Skylight_ExteriorDetailed::
      SimWindow_NumbVerts () const
      {
        return this->SimWindow_NumbVerts_;
      }

      SimWindow_Skylight_ExteriorDetailed::SimWindow_NumbVerts_optional& SimWindow_Skylight_ExteriorDetailed::
      SimWindow_NumbVerts ()
      {
        return this->SimWindow_NumbVerts_;
      }

      void SimWindow_Skylight_ExteriorDetailed::
      SimWindow_NumbVerts (const SimWindow_NumbVerts_type& x)
      {
        this->SimWindow_NumbVerts_.set (x);
      }

      void SimWindow_Skylight_ExteriorDetailed::
      SimWindow_NumbVerts (const SimWindow_NumbVerts_optional& x)
      {
        this->SimWindow_NumbVerts_ = x;
      }

      const SimWindow_Skylight_ExteriorDetailed::SimWindow_VertexXCoord_1_4_optional& SimWindow_Skylight_ExteriorDetailed::
      SimWindow_VertexXCoord_1_4 () const
      {
        return this->SimWindow_VertexXCoord_1_4_;
      }

      SimWindow_Skylight_ExteriorDetailed::SimWindow_VertexXCoord_1_4_optional& SimWindow_Skylight_ExteriorDetailed::
      SimWindow_VertexXCoord_1_4 ()
      {
        return this->SimWindow_VertexXCoord_1_4_;
      }

      void SimWindow_Skylight_ExteriorDetailed::
      SimWindow_VertexXCoord_1_4 (const SimWindow_VertexXCoord_1_4_type& x)
      {
        this->SimWindow_VertexXCoord_1_4_.set (x);
      }

      void SimWindow_Skylight_ExteriorDetailed::
      SimWindow_VertexXCoord_1_4 (const SimWindow_VertexXCoord_1_4_optional& x)
      {
        this->SimWindow_VertexXCoord_1_4_ = x;
      }

      void SimWindow_Skylight_ExteriorDetailed::
      SimWindow_VertexXCoord_1_4 (::std::auto_ptr< SimWindow_VertexXCoord_1_4_type > x)
      {
        this->SimWindow_VertexXCoord_1_4_.set (x);
      }

      const SimWindow_Skylight_ExteriorDetailed::SimWindow_VertexYCoord_1_4_optional& SimWindow_Skylight_ExteriorDetailed::
      SimWindow_VertexYCoord_1_4 () const
      {
        return this->SimWindow_VertexYCoord_1_4_;
      }

      SimWindow_Skylight_ExteriorDetailed::SimWindow_VertexYCoord_1_4_optional& SimWindow_Skylight_ExteriorDetailed::
      SimWindow_VertexYCoord_1_4 ()
      {
        return this->SimWindow_VertexYCoord_1_4_;
      }

      void SimWindow_Skylight_ExteriorDetailed::
      SimWindow_VertexYCoord_1_4 (const SimWindow_VertexYCoord_1_4_type& x)
      {
        this->SimWindow_VertexYCoord_1_4_.set (x);
      }

      void SimWindow_Skylight_ExteriorDetailed::
      SimWindow_VertexYCoord_1_4 (const SimWindow_VertexYCoord_1_4_optional& x)
      {
        this->SimWindow_VertexYCoord_1_4_ = x;
      }

      void SimWindow_Skylight_ExteriorDetailed::
      SimWindow_VertexYCoord_1_4 (::std::auto_ptr< SimWindow_VertexYCoord_1_4_type > x)
      {
        this->SimWindow_VertexYCoord_1_4_.set (x);
      }

      const SimWindow_Skylight_ExteriorDetailed::SimWindow_VertexZCoord_1_4_optional& SimWindow_Skylight_ExteriorDetailed::
      SimWindow_VertexZCoord_1_4 () const
      {
        return this->SimWindow_VertexZCoord_1_4_;
      }

      SimWindow_Skylight_ExteriorDetailed::SimWindow_VertexZCoord_1_4_optional& SimWindow_Skylight_ExteriorDetailed::
      SimWindow_VertexZCoord_1_4 ()
      {
        return this->SimWindow_VertexZCoord_1_4_;
      }

      void SimWindow_Skylight_ExteriorDetailed::
      SimWindow_VertexZCoord_1_4 (const SimWindow_VertexZCoord_1_4_type& x)
      {
        this->SimWindow_VertexZCoord_1_4_.set (x);
      }

      void SimWindow_Skylight_ExteriorDetailed::
      SimWindow_VertexZCoord_1_4 (const SimWindow_VertexZCoord_1_4_optional& x)
      {
        this->SimWindow_VertexZCoord_1_4_ = x;
      }

      void SimWindow_Skylight_ExteriorDetailed::
      SimWindow_VertexZCoord_1_4 (::std::auto_ptr< SimWindow_VertexZCoord_1_4_type > x)
      {
        this->SimWindow_VertexZCoord_1_4_.set (x);
      }

      const SimWindow_Skylight_ExteriorDetailed::ComplexFenestrationProperty_SolarAbsorbedLayers_Name_optional& SimWindow_Skylight_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_Name () const
      {
        return this->ComplexFenestrationProperty_SolarAbsorbedLayers_Name_;
      }

      SimWindow_Skylight_ExteriorDetailed::ComplexFenestrationProperty_SolarAbsorbedLayers_Name_optional& SimWindow_Skylight_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_Name ()
      {
        return this->ComplexFenestrationProperty_SolarAbsorbedLayers_Name_;
      }

      void SimWindow_Skylight_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_Name (const ComplexFenestrationProperty_SolarAbsorbedLayers_Name_type& x)
      {
        this->ComplexFenestrationProperty_SolarAbsorbedLayers_Name_.set (x);
      }

      void SimWindow_Skylight_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_Name (const ComplexFenestrationProperty_SolarAbsorbedLayers_Name_optional& x)
      {
        this->ComplexFenestrationProperty_SolarAbsorbedLayers_Name_ = x;
      }

      void SimWindow_Skylight_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_Name (::std::auto_ptr< ComplexFenestrationProperty_SolarAbsorbedLayers_Name_type > x)
      {
        this->ComplexFenestrationProperty_SolarAbsorbedLayers_Name_.set (x);
      }

      const SimWindow_Skylight_ExteriorDetailed::ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_optional& SimWindow_Skylight_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface () const
      {
        return this->ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_;
      }

      SimWindow_Skylight_ExteriorDetailed::ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_optional& SimWindow_Skylight_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface ()
      {
        return this->ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_;
      }

      void SimWindow_Skylight_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface (const ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_type& x)
      {
        this->ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_.set (x);
      }

      void SimWindow_Skylight_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface (const ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_optional& x)
      {
        this->ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_ = x;
      }

      void SimWindow_Skylight_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface (::std::auto_ptr< ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_type > x)
      {
        this->ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_.set (x);
      }

      const SimWindow_Skylight_ExteriorDetailed::ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_optional& SimWindow_Skylight_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName () const
      {
        return this->ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_;
      }

      SimWindow_Skylight_ExteriorDetailed::ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_optional& SimWindow_Skylight_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName ()
      {
        return this->ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_;
      }

      void SimWindow_Skylight_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName (const ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_type& x)
      {
        this->ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_.set (x);
      }

      void SimWindow_Skylight_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName (const ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_optional& x)
      {
        this->ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_ = x;
      }

      void SimWindow_Skylight_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName (::std::auto_ptr< ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_type > x)
      {
        this->ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_.set (x);
      }

      const SimWindow_Skylight_ExteriorDetailed::ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_optional& SimWindow_Skylight_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName () const
      {
        return this->ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_;
      }

      SimWindow_Skylight_ExteriorDetailed::ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_optional& SimWindow_Skylight_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName ()
      {
        return this->ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_;
      }

      void SimWindow_Skylight_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName (const ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_type& x)
      {
        this->ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_.set (x);
      }

      void SimWindow_Skylight_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName (const ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_optional& x)
      {
        this->ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_ = x;
      }

      void SimWindow_Skylight_ExteriorDetailed::
      ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName (::std::auto_ptr< ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_type > x)
      {
        this->ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimWindow_Skylight_ExteriorDetailed
      //

      SimWindow_Skylight_ExteriorDetailed::
      SimWindow_Skylight_ExteriorDetailed ()
      : ::schema::simxml::BuildingModel::SimWindow_Skylight (),
        SimWindow_SurfType_ (this),
        SimWindow_OutsdBndCondObject_ (this),
        SimWindow_ViewFactToGnd_ (this),
        SimWindow_NumbVerts_ (this),
        SimWindow_VertexXCoord_1_4_ (this),
        SimWindow_VertexYCoord_1_4_ (this),
        SimWindow_VertexZCoord_1_4_ (this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_Name_ (this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_ (this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_ (this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_ (this)
      {
      }

      SimWindow_Skylight_ExteriorDetailed::
      SimWindow_Skylight_ExteriorDetailed (const RefId_type& RefId)
      : ::schema::simxml::BuildingModel::SimWindow_Skylight (RefId),
        SimWindow_SurfType_ (this),
        SimWindow_OutsdBndCondObject_ (this),
        SimWindow_ViewFactToGnd_ (this),
        SimWindow_NumbVerts_ (this),
        SimWindow_VertexXCoord_1_4_ (this),
        SimWindow_VertexYCoord_1_4_ (this),
        SimWindow_VertexZCoord_1_4_ (this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_Name_ (this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_ (this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_ (this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_ (this)
      {
      }

      SimWindow_Skylight_ExteriorDetailed::
      SimWindow_Skylight_ExteriorDetailed (const SimWindow_Skylight_ExteriorDetailed& x,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimWindow_Skylight (x, f, c),
        SimWindow_SurfType_ (x.SimWindow_SurfType_, f, this),
        SimWindow_OutsdBndCondObject_ (x.SimWindow_OutsdBndCondObject_, f, this),
        SimWindow_ViewFactToGnd_ (x.SimWindow_ViewFactToGnd_, f, this),
        SimWindow_NumbVerts_ (x.SimWindow_NumbVerts_, f, this),
        SimWindow_VertexXCoord_1_4_ (x.SimWindow_VertexXCoord_1_4_, f, this),
        SimWindow_VertexYCoord_1_4_ (x.SimWindow_VertexYCoord_1_4_, f, this),
        SimWindow_VertexZCoord_1_4_ (x.SimWindow_VertexZCoord_1_4_, f, this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_Name_ (x.ComplexFenestrationProperty_SolarAbsorbedLayers_Name_, f, this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_ (x.ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_, f, this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_ (x.ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_, f, this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_ (x.ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_, f, this)
      {
      }

      SimWindow_Skylight_ExteriorDetailed::
      SimWindow_Skylight_ExteriorDetailed (const ::xercesc::DOMElement& e,
                                           ::xml_schema::flags f,
                                           ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimWindow_Skylight (e, f | ::xml_schema::flags::base, c),
        SimWindow_SurfType_ (this),
        SimWindow_OutsdBndCondObject_ (this),
        SimWindow_ViewFactToGnd_ (this),
        SimWindow_NumbVerts_ (this),
        SimWindow_VertexXCoord_1_4_ (this),
        SimWindow_VertexYCoord_1_4_ (this),
        SimWindow_VertexZCoord_1_4_ (this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_Name_ (this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_ (this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_ (this),
        ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimWindow_Skylight_ExteriorDetailed::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::BuildingModel::SimWindow_Skylight::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimWindow_SurfType
          //
          if (n.name () == "SimWindow_SurfType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_SurfType_type > r (
              SimWindow_SurfType_traits::create (i, f, this));

            if (!this->SimWindow_SurfType_)
            {
              this->SimWindow_SurfType_.set (r);
              continue;
            }
          }

          // SimWindow_OutsdBndCondObject
          //
          if (n.name () == "SimWindow_OutsdBndCondObject" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_OutsdBndCondObject_type > r (
              SimWindow_OutsdBndCondObject_traits::create (i, f, this));

            if (!this->SimWindow_OutsdBndCondObject_)
            {
              this->SimWindow_OutsdBndCondObject_.set (r);
              continue;
            }
          }

          // SimWindow_ViewFactToGnd
          //
          if (n.name () == "SimWindow_ViewFactToGnd" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimWindow_ViewFactToGnd_)
            {
              this->SimWindow_ViewFactToGnd_.set (SimWindow_ViewFactToGnd_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_NumbVerts
          //
          if (n.name () == "SimWindow_NumbVerts" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimWindow_NumbVerts_)
            {
              this->SimWindow_NumbVerts_.set (SimWindow_NumbVerts_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_VertexXCoord_1_4
          //
          if (n.name () == "SimWindow_VertexXCoord_1_4" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_VertexXCoord_1_4_type > r (
              SimWindow_VertexXCoord_1_4_traits::create (i, f, this));

            if (!this->SimWindow_VertexXCoord_1_4_)
            {
              this->SimWindow_VertexXCoord_1_4_.set (r);
              continue;
            }
          }

          // SimWindow_VertexYCoord_1_4
          //
          if (n.name () == "SimWindow_VertexYCoord_1_4" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_VertexYCoord_1_4_type > r (
              SimWindow_VertexYCoord_1_4_traits::create (i, f, this));

            if (!this->SimWindow_VertexYCoord_1_4_)
            {
              this->SimWindow_VertexYCoord_1_4_.set (r);
              continue;
            }
          }

          // SimWindow_VertexZCoord_1_4
          //
          if (n.name () == "SimWindow_VertexZCoord_1_4" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_VertexZCoord_1_4_type > r (
              SimWindow_VertexZCoord_1_4_traits::create (i, f, this));

            if (!this->SimWindow_VertexZCoord_1_4_)
            {
              this->SimWindow_VertexZCoord_1_4_.set (r);
              continue;
            }
          }

          // ComplexFenestrationProperty_SolarAbsorbedLayers_Name
          //
          if (n.name () == "ComplexFenestrationProperty_SolarAbsorbedLayers_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ComplexFenestrationProperty_SolarAbsorbedLayers_Name_type > r (
              ComplexFenestrationProperty_SolarAbsorbedLayers_Name_traits::create (i, f, this));

            if (!this->ComplexFenestrationProperty_SolarAbsorbedLayers_Name_)
            {
              this->ComplexFenestrationProperty_SolarAbsorbedLayers_Name_.set (r);
              continue;
            }
          }

          // ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface
          //
          if (n.name () == "ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_type > r (
              ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_traits::create (i, f, this));

            if (!this->ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_)
            {
              this->ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_.set (r);
              continue;
            }
          }

          // ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName
          //
          if (n.name () == "ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_type > r (
              ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_traits::create (i, f, this));

            if (!this->ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_)
            {
              this->ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_.set (r);
              continue;
            }
          }

          // ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName
          //
          if (n.name () == "ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_type > r (
              ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_traits::create (i, f, this));

            if (!this->ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_)
            {
              this->ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimWindow_Skylight_ExteriorDetailed* SimWindow_Skylight_ExteriorDetailed::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimWindow_Skylight_ExteriorDetailed (*this, f, c);
      }

      SimWindow_Skylight_ExteriorDetailed& SimWindow_Skylight_ExteriorDetailed::
      operator= (const SimWindow_Skylight_ExteriorDetailed& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::BuildingModel::SimWindow_Skylight& > (*this) = x;
          this->SimWindow_SurfType_ = x.SimWindow_SurfType_;
          this->SimWindow_OutsdBndCondObject_ = x.SimWindow_OutsdBndCondObject_;
          this->SimWindow_ViewFactToGnd_ = x.SimWindow_ViewFactToGnd_;
          this->SimWindow_NumbVerts_ = x.SimWindow_NumbVerts_;
          this->SimWindow_VertexXCoord_1_4_ = x.SimWindow_VertexXCoord_1_4_;
          this->SimWindow_VertexYCoord_1_4_ = x.SimWindow_VertexYCoord_1_4_;
          this->SimWindow_VertexZCoord_1_4_ = x.SimWindow_VertexZCoord_1_4_;
          this->ComplexFenestrationProperty_SolarAbsorbedLayers_Name_ = x.ComplexFenestrationProperty_SolarAbsorbedLayers_Name_;
          this->ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_ = x.ComplexFenestrationProperty_SolarAbsorbedLayers_FenestrationSurface_;
          this->ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_ = x.ComplexFenestrationProperty_SolarAbsorbedLayers_ConstructionName_;
          this->ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_ = x.ComplexFenestrationProperty_SolarAbsorbedLayers_Layer_1_5_SolarRadAbsorbedSchedName_;
        }

        return *this;
      }

      SimWindow_Skylight_ExteriorDetailed::
      ~SimWindow_Skylight_ExteriorDetailed ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

