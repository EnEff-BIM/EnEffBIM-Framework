// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowSegment_Filter_Panel.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowSegment_Filter_Panel
      // 

      const SimFlowSegment_Filter_Panel::SimFlowSeg_Name_optional& SimFlowSegment_Filter_Panel::
      SimFlowSeg_Name () const
      {
        return this->SimFlowSeg_Name_;
      }

      SimFlowSegment_Filter_Panel::SimFlowSeg_Name_optional& SimFlowSegment_Filter_Panel::
      SimFlowSeg_Name ()
      {
        return this->SimFlowSeg_Name_;
      }

      void SimFlowSegment_Filter_Panel::
      SimFlowSeg_Name (const SimFlowSeg_Name_type& x)
      {
        this->SimFlowSeg_Name_.set (x);
      }

      void SimFlowSegment_Filter_Panel::
      SimFlowSeg_Name (const SimFlowSeg_Name_optional& x)
      {
        this->SimFlowSeg_Name_ = x;
      }

      void SimFlowSegment_Filter_Panel::
      SimFlowSeg_Name (::std::auto_ptr< SimFlowSeg_Name_type > x)
      {
        this->SimFlowSeg_Name_.set (x);
      }

      const SimFlowSegment_Filter_Panel::SimFlowSeg_DesignPresDrop_optional& SimFlowSegment_Filter_Panel::
      SimFlowSeg_DesignPresDrop () const
      {
        return this->SimFlowSeg_DesignPresDrop_;
      }

      SimFlowSegment_Filter_Panel::SimFlowSeg_DesignPresDrop_optional& SimFlowSegment_Filter_Panel::
      SimFlowSeg_DesignPresDrop ()
      {
        return this->SimFlowSeg_DesignPresDrop_;
      }

      void SimFlowSegment_Filter_Panel::
      SimFlowSeg_DesignPresDrop (const SimFlowSeg_DesignPresDrop_type& x)
      {
        this->SimFlowSeg_DesignPresDrop_.set (x);
      }

      void SimFlowSegment_Filter_Panel::
      SimFlowSeg_DesignPresDrop (const SimFlowSeg_DesignPresDrop_optional& x)
      {
        this->SimFlowSeg_DesignPresDrop_ = x;
      }

      const SimFlowSegment_Filter_Panel::SimFlowSeg_Ht_optional& SimFlowSegment_Filter_Panel::
      SimFlowSeg_Ht () const
      {
        return this->SimFlowSeg_Ht_;
      }

      SimFlowSegment_Filter_Panel::SimFlowSeg_Ht_optional& SimFlowSegment_Filter_Panel::
      SimFlowSeg_Ht ()
      {
        return this->SimFlowSeg_Ht_;
      }

      void SimFlowSegment_Filter_Panel::
      SimFlowSeg_Ht (const SimFlowSeg_Ht_type& x)
      {
        this->SimFlowSeg_Ht_.set (x);
      }

      void SimFlowSegment_Filter_Panel::
      SimFlowSeg_Ht (const SimFlowSeg_Ht_optional& x)
      {
        this->SimFlowSeg_Ht_ = x;
      }

      const SimFlowSegment_Filter_Panel::SimFlowSeg_Width_optional& SimFlowSegment_Filter_Panel::
      SimFlowSeg_Width () const
      {
        return this->SimFlowSeg_Width_;
      }

      SimFlowSegment_Filter_Panel::SimFlowSeg_Width_optional& SimFlowSegment_Filter_Panel::
      SimFlowSeg_Width ()
      {
        return this->SimFlowSeg_Width_;
      }

      void SimFlowSegment_Filter_Panel::
      SimFlowSeg_Width (const SimFlowSeg_Width_type& x)
      {
        this->SimFlowSeg_Width_.set (x);
      }

      void SimFlowSegment_Filter_Panel::
      SimFlowSeg_Width (const SimFlowSeg_Width_optional& x)
      {
        this->SimFlowSeg_Width_ = x;
      }

      const SimFlowSegment_Filter_Panel::SimFlowSeg_Type_optional& SimFlowSegment_Filter_Panel::
      SimFlowSeg_Type () const
      {
        return this->SimFlowSeg_Type_;
      }

      SimFlowSegment_Filter_Panel::SimFlowSeg_Type_optional& SimFlowSegment_Filter_Panel::
      SimFlowSeg_Type ()
      {
        return this->SimFlowSeg_Type_;
      }

      void SimFlowSegment_Filter_Panel::
      SimFlowSeg_Type (const SimFlowSeg_Type_type& x)
      {
        this->SimFlowSeg_Type_.set (x);
      }

      void SimFlowSegment_Filter_Panel::
      SimFlowSeg_Type (const SimFlowSeg_Type_optional& x)
      {
        this->SimFlowSeg_Type_ = x;
      }

      void SimFlowSegment_Filter_Panel::
      SimFlowSeg_Type (::std::auto_ptr< SimFlowSeg_Type_type > x)
      {
        this->SimFlowSeg_Type_.set (x);
      }

      const SimFlowSegment_Filter_Panel::SimFlowSeg_MaxPresDrop_optional& SimFlowSegment_Filter_Panel::
      SimFlowSeg_MaxPresDrop () const
      {
        return this->SimFlowSeg_MaxPresDrop_;
      }

      SimFlowSegment_Filter_Panel::SimFlowSeg_MaxPresDrop_optional& SimFlowSegment_Filter_Panel::
      SimFlowSeg_MaxPresDrop ()
      {
        return this->SimFlowSeg_MaxPresDrop_;
      }

      void SimFlowSegment_Filter_Panel::
      SimFlowSeg_MaxPresDrop (const SimFlowSeg_MaxPresDrop_type& x)
      {
        this->SimFlowSeg_MaxPresDrop_.set (x);
      }

      void SimFlowSegment_Filter_Panel::
      SimFlowSeg_MaxPresDrop (const SimFlowSeg_MaxPresDrop_optional& x)
      {
        this->SimFlowSeg_MaxPresDrop_ = x;
      }

      const SimFlowSegment_Filter_Panel::SimFlowSeg_Grade_optional& SimFlowSegment_Filter_Panel::
      SimFlowSeg_Grade () const
      {
        return this->SimFlowSeg_Grade_;
      }

      SimFlowSegment_Filter_Panel::SimFlowSeg_Grade_optional& SimFlowSegment_Filter_Panel::
      SimFlowSeg_Grade ()
      {
        return this->SimFlowSeg_Grade_;
      }

      void SimFlowSegment_Filter_Panel::
      SimFlowSeg_Grade (const SimFlowSeg_Grade_type& x)
      {
        this->SimFlowSeg_Grade_.set (x);
      }

      void SimFlowSegment_Filter_Panel::
      SimFlowSeg_Grade (const SimFlowSeg_Grade_optional& x)
      {
        this->SimFlowSeg_Grade_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowSegment_Filter_Panel
      //

      SimFlowSegment_Filter_Panel::
      SimFlowSegment_Filter_Panel ()
      : ::schema::simxml::MepModel::SimFlowSegment_Filter (),
        SimFlowSeg_Name_ (this),
        SimFlowSeg_DesignPresDrop_ (this),
        SimFlowSeg_Ht_ (this),
        SimFlowSeg_Width_ (this),
        SimFlowSeg_Type_ (this),
        SimFlowSeg_MaxPresDrop_ (this),
        SimFlowSeg_Grade_ (this)
      {
      }

      SimFlowSegment_Filter_Panel::
      SimFlowSegment_Filter_Panel (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowSegment_Filter (RefId),
        SimFlowSeg_Name_ (this),
        SimFlowSeg_DesignPresDrop_ (this),
        SimFlowSeg_Ht_ (this),
        SimFlowSeg_Width_ (this),
        SimFlowSeg_Type_ (this),
        SimFlowSeg_MaxPresDrop_ (this),
        SimFlowSeg_Grade_ (this)
      {
      }

      SimFlowSegment_Filter_Panel::
      SimFlowSegment_Filter_Panel (const SimFlowSegment_Filter_Panel& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowSegment_Filter (x, f, c),
        SimFlowSeg_Name_ (x.SimFlowSeg_Name_, f, this),
        SimFlowSeg_DesignPresDrop_ (x.SimFlowSeg_DesignPresDrop_, f, this),
        SimFlowSeg_Ht_ (x.SimFlowSeg_Ht_, f, this),
        SimFlowSeg_Width_ (x.SimFlowSeg_Width_, f, this),
        SimFlowSeg_Type_ (x.SimFlowSeg_Type_, f, this),
        SimFlowSeg_MaxPresDrop_ (x.SimFlowSeg_MaxPresDrop_, f, this),
        SimFlowSeg_Grade_ (x.SimFlowSeg_Grade_, f, this)
      {
      }

      SimFlowSegment_Filter_Panel::
      SimFlowSegment_Filter_Panel (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowSegment_Filter (e, f | ::xml_schema::flags::base, c),
        SimFlowSeg_Name_ (this),
        SimFlowSeg_DesignPresDrop_ (this),
        SimFlowSeg_Ht_ (this),
        SimFlowSeg_Width_ (this),
        SimFlowSeg_Type_ (this),
        SimFlowSeg_MaxPresDrop_ (this),
        SimFlowSeg_Grade_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowSegment_Filter_Panel::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowSegment_Filter::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowSeg_Name
          //
          if (n.name () == "SimFlowSeg_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowSeg_Name_type > r (
              SimFlowSeg_Name_traits::create (i, f, this));

            if (!this->SimFlowSeg_Name_)
            {
              this->SimFlowSeg_Name_.set (r);
              continue;
            }
          }

          // SimFlowSeg_DesignPresDrop
          //
          if (n.name () == "SimFlowSeg_DesignPresDrop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSeg_DesignPresDrop_)
            {
              this->SimFlowSeg_DesignPresDrop_.set (SimFlowSeg_DesignPresDrop_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSeg_Ht
          //
          if (n.name () == "SimFlowSeg_Ht" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSeg_Ht_)
            {
              this->SimFlowSeg_Ht_.set (SimFlowSeg_Ht_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSeg_Width
          //
          if (n.name () == "SimFlowSeg_Width" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSeg_Width_)
            {
              this->SimFlowSeg_Width_.set (SimFlowSeg_Width_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSeg_Type
          //
          if (n.name () == "SimFlowSeg_Type" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowSeg_Type_type > r (
              SimFlowSeg_Type_traits::create (i, f, this));

            if (!this->SimFlowSeg_Type_)
            {
              this->SimFlowSeg_Type_.set (r);
              continue;
            }
          }

          // SimFlowSeg_MaxPresDrop
          //
          if (n.name () == "SimFlowSeg_MaxPresDrop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSeg_MaxPresDrop_)
            {
              this->SimFlowSeg_MaxPresDrop_.set (SimFlowSeg_MaxPresDrop_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSeg_Grade
          //
          if (n.name () == "SimFlowSeg_Grade" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSeg_Grade_)
            {
              this->SimFlowSeg_Grade_.set (SimFlowSeg_Grade_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowSegment_Filter_Panel* SimFlowSegment_Filter_Panel::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowSegment_Filter_Panel (*this, f, c);
      }

      SimFlowSegment_Filter_Panel& SimFlowSegment_Filter_Panel::
      operator= (const SimFlowSegment_Filter_Panel& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowSegment_Filter& > (*this) = x;
          this->SimFlowSeg_Name_ = x.SimFlowSeg_Name_;
          this->SimFlowSeg_DesignPresDrop_ = x.SimFlowSeg_DesignPresDrop_;
          this->SimFlowSeg_Ht_ = x.SimFlowSeg_Ht_;
          this->SimFlowSeg_Width_ = x.SimFlowSeg_Width_;
          this->SimFlowSeg_Type_ = x.SimFlowSeg_Type_;
          this->SimFlowSeg_MaxPresDrop_ = x.SimFlowSeg_MaxPresDrop_;
          this->SimFlowSeg_Grade_ = x.SimFlowSeg_Grade_;
        }

        return *this;
      }

      SimFlowSegment_Filter_Panel::
      ~SimFlowSegment_Filter_Panel ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

