// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFrameAndDividerProps.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimFrameAndDividerProps
      // 

      const SimFrameAndDividerProps::SimFrameAndDividerProps_Name_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_Name () const
      {
        return this->SimFrameAndDividerProps_Name_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_Name_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_Name ()
      {
        return this->SimFrameAndDividerProps_Name_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_Name (const SimFrameAndDividerProps_Name_type& x)
      {
        this->SimFrameAndDividerProps_Name_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_Name (const SimFrameAndDividerProps_Name_optional& x)
      {
        this->SimFrameAndDividerProps_Name_ = x;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_Name (::std::auto_ptr< SimFrameAndDividerProps_Name_type > x)
      {
        this->SimFrameAndDividerProps_Name_.set (x);
      }

      const SimFrameAndDividerProps::SimFrameAndDividerProps_FrmWidth_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmWidth () const
      {
        return this->SimFrameAndDividerProps_FrmWidth_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_FrmWidth_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmWidth ()
      {
        return this->SimFrameAndDividerProps_FrmWidth_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmWidth (const SimFrameAndDividerProps_FrmWidth_type& x)
      {
        this->SimFrameAndDividerProps_FrmWidth_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmWidth (const SimFrameAndDividerProps_FrmWidth_optional& x)
      {
        this->SimFrameAndDividerProps_FrmWidth_ = x;
      }

      const SimFrameAndDividerProps::SimFrameAndDividerProps_FrmOutsdProject_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmOutsdProject () const
      {
        return this->SimFrameAndDividerProps_FrmOutsdProject_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_FrmOutsdProject_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmOutsdProject ()
      {
        return this->SimFrameAndDividerProps_FrmOutsdProject_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmOutsdProject (const SimFrameAndDividerProps_FrmOutsdProject_type& x)
      {
        this->SimFrameAndDividerProps_FrmOutsdProject_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmOutsdProject (const SimFrameAndDividerProps_FrmOutsdProject_optional& x)
      {
        this->SimFrameAndDividerProps_FrmOutsdProject_ = x;
      }

      const SimFrameAndDividerProps::SimFrameAndDividerProps_FrmInsideProject_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmInsideProject () const
      {
        return this->SimFrameAndDividerProps_FrmInsideProject_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_FrmInsideProject_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmInsideProject ()
      {
        return this->SimFrameAndDividerProps_FrmInsideProject_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmInsideProject (const SimFrameAndDividerProps_FrmInsideProject_type& x)
      {
        this->SimFrameAndDividerProps_FrmInsideProject_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmInsideProject (const SimFrameAndDividerProps_FrmInsideProject_optional& x)
      {
        this->SimFrameAndDividerProps_FrmInsideProject_ = x;
      }

      const SimFrameAndDividerProps::SimFrameAndDividerProps_FrmCond_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmCond () const
      {
        return this->SimFrameAndDividerProps_FrmCond_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_FrmCond_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmCond ()
      {
        return this->SimFrameAndDividerProps_FrmCond_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmCond (const SimFrameAndDividerProps_FrmCond_type& x)
      {
        this->SimFrameAndDividerProps_FrmCond_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmCond (const SimFrameAndDividerProps_FrmCond_optional& x)
      {
        this->SimFrameAndDividerProps_FrmCond_ = x;
      }

      const SimFrameAndDividerProps::SimFrameAndDividerProps_RatioFrmEdgeGlassCondToCntrGlassCond_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_RatioFrmEdgeGlassCondToCntrGlassCond () const
      {
        return this->SimFrameAndDividerProps_RatioFrmEdgeGlassCondToCntrGlassCond_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_RatioFrmEdgeGlassCondToCntrGlassCond_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_RatioFrmEdgeGlassCondToCntrGlassCond ()
      {
        return this->SimFrameAndDividerProps_RatioFrmEdgeGlassCondToCntrGlassCond_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_RatioFrmEdgeGlassCondToCntrGlassCond (const SimFrameAndDividerProps_RatioFrmEdgeGlassCondToCntrGlassCond_type& x)
      {
        this->SimFrameAndDividerProps_RatioFrmEdgeGlassCondToCntrGlassCond_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_RatioFrmEdgeGlassCondToCntrGlassCond (const SimFrameAndDividerProps_RatioFrmEdgeGlassCondToCntrGlassCond_optional& x)
      {
        this->SimFrameAndDividerProps_RatioFrmEdgeGlassCondToCntrGlassCond_ = x;
      }

      const SimFrameAndDividerProps::SimFrameAndDividerProps_FrmSolarAbsorp_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmSolarAbsorp () const
      {
        return this->SimFrameAndDividerProps_FrmSolarAbsorp_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_FrmSolarAbsorp_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmSolarAbsorp ()
      {
        return this->SimFrameAndDividerProps_FrmSolarAbsorp_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmSolarAbsorp (const SimFrameAndDividerProps_FrmSolarAbsorp_type& x)
      {
        this->SimFrameAndDividerProps_FrmSolarAbsorp_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmSolarAbsorp (const SimFrameAndDividerProps_FrmSolarAbsorp_optional& x)
      {
        this->SimFrameAndDividerProps_FrmSolarAbsorp_ = x;
      }

      const SimFrameAndDividerProps::SimFrameAndDividerProps_FrmVisibleAbsorp_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmVisibleAbsorp () const
      {
        return this->SimFrameAndDividerProps_FrmVisibleAbsorp_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_FrmVisibleAbsorp_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmVisibleAbsorp ()
      {
        return this->SimFrameAndDividerProps_FrmVisibleAbsorp_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmVisibleAbsorp (const SimFrameAndDividerProps_FrmVisibleAbsorp_type& x)
      {
        this->SimFrameAndDividerProps_FrmVisibleAbsorp_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmVisibleAbsorp (const SimFrameAndDividerProps_FrmVisibleAbsorp_optional& x)
      {
        this->SimFrameAndDividerProps_FrmVisibleAbsorp_ = x;
      }

      const SimFrameAndDividerProps::SimFrameAndDividerProps_FrmThermHemisEmiss_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmThermHemisEmiss () const
      {
        return this->SimFrameAndDividerProps_FrmThermHemisEmiss_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_FrmThermHemisEmiss_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmThermHemisEmiss ()
      {
        return this->SimFrameAndDividerProps_FrmThermHemisEmiss_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmThermHemisEmiss (const SimFrameAndDividerProps_FrmThermHemisEmiss_type& x)
      {
        this->SimFrameAndDividerProps_FrmThermHemisEmiss_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_FrmThermHemisEmiss (const SimFrameAndDividerProps_FrmThermHemisEmiss_optional& x)
      {
        this->SimFrameAndDividerProps_FrmThermHemisEmiss_ = x;
      }

      const SimFrameAndDividerProps::SimFrameAndDividerProps_DivType_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivType () const
      {
        return this->SimFrameAndDividerProps_DivType_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_DivType_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivType ()
      {
        return this->SimFrameAndDividerProps_DivType_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivType (const SimFrameAndDividerProps_DivType_type& x)
      {
        this->SimFrameAndDividerProps_DivType_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivType (const SimFrameAndDividerProps_DivType_optional& x)
      {
        this->SimFrameAndDividerProps_DivType_ = x;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivType (::std::auto_ptr< SimFrameAndDividerProps_DivType_type > x)
      {
        this->SimFrameAndDividerProps_DivType_.set (x);
      }

      const SimFrameAndDividerProps::SimFrameAndDividerProps_DivWidth_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivWidth () const
      {
        return this->SimFrameAndDividerProps_DivWidth_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_DivWidth_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivWidth ()
      {
        return this->SimFrameAndDividerProps_DivWidth_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivWidth (const SimFrameAndDividerProps_DivWidth_type& x)
      {
        this->SimFrameAndDividerProps_DivWidth_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivWidth (const SimFrameAndDividerProps_DivWidth_optional& x)
      {
        this->SimFrameAndDividerProps_DivWidth_ = x;
      }

      const SimFrameAndDividerProps::SimFrameAndDividerProps_NumbHorzDivs_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_NumbHorzDivs () const
      {
        return this->SimFrameAndDividerProps_NumbHorzDivs_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_NumbHorzDivs_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_NumbHorzDivs ()
      {
        return this->SimFrameAndDividerProps_NumbHorzDivs_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_NumbHorzDivs (const SimFrameAndDividerProps_NumbHorzDivs_type& x)
      {
        this->SimFrameAndDividerProps_NumbHorzDivs_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_NumbHorzDivs (const SimFrameAndDividerProps_NumbHorzDivs_optional& x)
      {
        this->SimFrameAndDividerProps_NumbHorzDivs_ = x;
      }

      const SimFrameAndDividerProps::SimFrameAndDividerProps_NumbVertlDivs_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_NumbVertlDivs () const
      {
        return this->SimFrameAndDividerProps_NumbVertlDivs_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_NumbVertlDivs_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_NumbVertlDivs ()
      {
        return this->SimFrameAndDividerProps_NumbVertlDivs_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_NumbVertlDivs (const SimFrameAndDividerProps_NumbVertlDivs_type& x)
      {
        this->SimFrameAndDividerProps_NumbVertlDivs_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_NumbVertlDivs (const SimFrameAndDividerProps_NumbVertlDivs_optional& x)
      {
        this->SimFrameAndDividerProps_NumbVertlDivs_ = x;
      }

      const SimFrameAndDividerProps::SimFrameAndDividerProps_DivOutsdProject_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivOutsdProject () const
      {
        return this->SimFrameAndDividerProps_DivOutsdProject_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_DivOutsdProject_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivOutsdProject ()
      {
        return this->SimFrameAndDividerProps_DivOutsdProject_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivOutsdProject (const SimFrameAndDividerProps_DivOutsdProject_type& x)
      {
        this->SimFrameAndDividerProps_DivOutsdProject_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivOutsdProject (const SimFrameAndDividerProps_DivOutsdProject_optional& x)
      {
        this->SimFrameAndDividerProps_DivOutsdProject_ = x;
      }

      const SimFrameAndDividerProps::SimFrameAndDividerProps_DivInsideProject_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivInsideProject () const
      {
        return this->SimFrameAndDividerProps_DivInsideProject_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_DivInsideProject_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivInsideProject ()
      {
        return this->SimFrameAndDividerProps_DivInsideProject_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivInsideProject (const SimFrameAndDividerProps_DivInsideProject_type& x)
      {
        this->SimFrameAndDividerProps_DivInsideProject_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivInsideProject (const SimFrameAndDividerProps_DivInsideProject_optional& x)
      {
        this->SimFrameAndDividerProps_DivInsideProject_ = x;
      }

      const SimFrameAndDividerProps::SimFrameAndDividerProps_DivCond_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivCond () const
      {
        return this->SimFrameAndDividerProps_DivCond_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_DivCond_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivCond ()
      {
        return this->SimFrameAndDividerProps_DivCond_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivCond (const SimFrameAndDividerProps_DivCond_type& x)
      {
        this->SimFrameAndDividerProps_DivCond_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivCond (const SimFrameAndDividerProps_DivCond_optional& x)
      {
        this->SimFrameAndDividerProps_DivCond_ = x;
      }

      const SimFrameAndDividerProps::SimFrameAndDividerProps_RatioDivEdgeGlassCondToCntrGlassCond_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_RatioDivEdgeGlassCondToCntrGlassCond () const
      {
        return this->SimFrameAndDividerProps_RatioDivEdgeGlassCondToCntrGlassCond_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_RatioDivEdgeGlassCondToCntrGlassCond_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_RatioDivEdgeGlassCondToCntrGlassCond ()
      {
        return this->SimFrameAndDividerProps_RatioDivEdgeGlassCondToCntrGlassCond_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_RatioDivEdgeGlassCondToCntrGlassCond (const SimFrameAndDividerProps_RatioDivEdgeGlassCondToCntrGlassCond_type& x)
      {
        this->SimFrameAndDividerProps_RatioDivEdgeGlassCondToCntrGlassCond_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_RatioDivEdgeGlassCondToCntrGlassCond (const SimFrameAndDividerProps_RatioDivEdgeGlassCondToCntrGlassCond_optional& x)
      {
        this->SimFrameAndDividerProps_RatioDivEdgeGlassCondToCntrGlassCond_ = x;
      }

      const SimFrameAndDividerProps::SimFrameAndDividerProps_DivSolarAbsorp_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivSolarAbsorp () const
      {
        return this->SimFrameAndDividerProps_DivSolarAbsorp_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_DivSolarAbsorp_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivSolarAbsorp ()
      {
        return this->SimFrameAndDividerProps_DivSolarAbsorp_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivSolarAbsorp (const SimFrameAndDividerProps_DivSolarAbsorp_type& x)
      {
        this->SimFrameAndDividerProps_DivSolarAbsorp_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivSolarAbsorp (const SimFrameAndDividerProps_DivSolarAbsorp_optional& x)
      {
        this->SimFrameAndDividerProps_DivSolarAbsorp_ = x;
      }

      const SimFrameAndDividerProps::SimFrameAndDividerProps_DivVisibleAbsorp_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivVisibleAbsorp () const
      {
        return this->SimFrameAndDividerProps_DivVisibleAbsorp_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_DivVisibleAbsorp_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivVisibleAbsorp ()
      {
        return this->SimFrameAndDividerProps_DivVisibleAbsorp_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivVisibleAbsorp (const SimFrameAndDividerProps_DivVisibleAbsorp_type& x)
      {
        this->SimFrameAndDividerProps_DivVisibleAbsorp_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivVisibleAbsorp (const SimFrameAndDividerProps_DivVisibleAbsorp_optional& x)
      {
        this->SimFrameAndDividerProps_DivVisibleAbsorp_ = x;
      }

      const SimFrameAndDividerProps::SimFrameAndDividerProps_DivThermHemisEmiss_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivThermHemisEmiss () const
      {
        return this->SimFrameAndDividerProps_DivThermHemisEmiss_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_DivThermHemisEmiss_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivThermHemisEmiss ()
      {
        return this->SimFrameAndDividerProps_DivThermHemisEmiss_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivThermHemisEmiss (const SimFrameAndDividerProps_DivThermHemisEmiss_type& x)
      {
        this->SimFrameAndDividerProps_DivThermHemisEmiss_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_DivThermHemisEmiss (const SimFrameAndDividerProps_DivThermHemisEmiss_optional& x)
      {
        this->SimFrameAndDividerProps_DivThermHemisEmiss_ = x;
      }

      const SimFrameAndDividerProps::SimFrameAndDividerProps_OutsdRevealSolarAbsorp_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_OutsdRevealSolarAbsorp () const
      {
        return this->SimFrameAndDividerProps_OutsdRevealSolarAbsorp_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_OutsdRevealSolarAbsorp_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_OutsdRevealSolarAbsorp ()
      {
        return this->SimFrameAndDividerProps_OutsdRevealSolarAbsorp_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_OutsdRevealSolarAbsorp (const SimFrameAndDividerProps_OutsdRevealSolarAbsorp_type& x)
      {
        this->SimFrameAndDividerProps_OutsdRevealSolarAbsorp_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_OutsdRevealSolarAbsorp (const SimFrameAndDividerProps_OutsdRevealSolarAbsorp_optional& x)
      {
        this->SimFrameAndDividerProps_OutsdRevealSolarAbsorp_ = x;
      }

      const SimFrameAndDividerProps::SimFrameAndDividerProps_InsideSillDepth_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_InsideSillDepth () const
      {
        return this->SimFrameAndDividerProps_InsideSillDepth_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_InsideSillDepth_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_InsideSillDepth ()
      {
        return this->SimFrameAndDividerProps_InsideSillDepth_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_InsideSillDepth (const SimFrameAndDividerProps_InsideSillDepth_type& x)
      {
        this->SimFrameAndDividerProps_InsideSillDepth_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_InsideSillDepth (const SimFrameAndDividerProps_InsideSillDepth_optional& x)
      {
        this->SimFrameAndDividerProps_InsideSillDepth_ = x;
      }

      const SimFrameAndDividerProps::SimFrameAndDividerProps_InsideSillSolarAbsorp_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_InsideSillSolarAbsorp () const
      {
        return this->SimFrameAndDividerProps_InsideSillSolarAbsorp_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_InsideSillSolarAbsorp_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_InsideSillSolarAbsorp ()
      {
        return this->SimFrameAndDividerProps_InsideSillSolarAbsorp_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_InsideSillSolarAbsorp (const SimFrameAndDividerProps_InsideSillSolarAbsorp_type& x)
      {
        this->SimFrameAndDividerProps_InsideSillSolarAbsorp_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_InsideSillSolarAbsorp (const SimFrameAndDividerProps_InsideSillSolarAbsorp_optional& x)
      {
        this->SimFrameAndDividerProps_InsideSillSolarAbsorp_ = x;
      }

      const SimFrameAndDividerProps::SimFrameAndDividerProps_InsideRevealDepth_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_InsideRevealDepth () const
      {
        return this->SimFrameAndDividerProps_InsideRevealDepth_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_InsideRevealDepth_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_InsideRevealDepth ()
      {
        return this->SimFrameAndDividerProps_InsideRevealDepth_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_InsideRevealDepth (const SimFrameAndDividerProps_InsideRevealDepth_type& x)
      {
        this->SimFrameAndDividerProps_InsideRevealDepth_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_InsideRevealDepth (const SimFrameAndDividerProps_InsideRevealDepth_optional& x)
      {
        this->SimFrameAndDividerProps_InsideRevealDepth_ = x;
      }

      const SimFrameAndDividerProps::SimFrameAndDividerProps_InsideRevealSolarAbsorp_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_InsideRevealSolarAbsorp () const
      {
        return this->SimFrameAndDividerProps_InsideRevealSolarAbsorp_;
      }

      SimFrameAndDividerProps::SimFrameAndDividerProps_InsideRevealSolarAbsorp_optional& SimFrameAndDividerProps::
      SimFrameAndDividerProps_InsideRevealSolarAbsorp ()
      {
        return this->SimFrameAndDividerProps_InsideRevealSolarAbsorp_;
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_InsideRevealSolarAbsorp (const SimFrameAndDividerProps_InsideRevealSolarAbsorp_type& x)
      {
        this->SimFrameAndDividerProps_InsideRevealSolarAbsorp_.set (x);
      }

      void SimFrameAndDividerProps::
      SimFrameAndDividerProps_InsideRevealSolarAbsorp (const SimFrameAndDividerProps_InsideRevealSolarAbsorp_optional& x)
      {
        this->SimFrameAndDividerProps_InsideRevealSolarAbsorp_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimFrameAndDividerProps
      //

      SimFrameAndDividerProps::
      SimFrameAndDividerProps ()
      : ::schema::simxml::SimModelCore::SimPropertySetDefinition (),
        SimFrameAndDividerProps_Name_ (this),
        SimFrameAndDividerProps_FrmWidth_ (this),
        SimFrameAndDividerProps_FrmOutsdProject_ (this),
        SimFrameAndDividerProps_FrmInsideProject_ (this),
        SimFrameAndDividerProps_FrmCond_ (this),
        SimFrameAndDividerProps_RatioFrmEdgeGlassCondToCntrGlassCond_ (this),
        SimFrameAndDividerProps_FrmSolarAbsorp_ (this),
        SimFrameAndDividerProps_FrmVisibleAbsorp_ (this),
        SimFrameAndDividerProps_FrmThermHemisEmiss_ (this),
        SimFrameAndDividerProps_DivType_ (this),
        SimFrameAndDividerProps_DivWidth_ (this),
        SimFrameAndDividerProps_NumbHorzDivs_ (this),
        SimFrameAndDividerProps_NumbVertlDivs_ (this),
        SimFrameAndDividerProps_DivOutsdProject_ (this),
        SimFrameAndDividerProps_DivInsideProject_ (this),
        SimFrameAndDividerProps_DivCond_ (this),
        SimFrameAndDividerProps_RatioDivEdgeGlassCondToCntrGlassCond_ (this),
        SimFrameAndDividerProps_DivSolarAbsorp_ (this),
        SimFrameAndDividerProps_DivVisibleAbsorp_ (this),
        SimFrameAndDividerProps_DivThermHemisEmiss_ (this),
        SimFrameAndDividerProps_OutsdRevealSolarAbsorp_ (this),
        SimFrameAndDividerProps_InsideSillDepth_ (this),
        SimFrameAndDividerProps_InsideSillSolarAbsorp_ (this),
        SimFrameAndDividerProps_InsideRevealDepth_ (this),
        SimFrameAndDividerProps_InsideRevealSolarAbsorp_ (this)
      {
      }

      SimFrameAndDividerProps::
      SimFrameAndDividerProps (const RefId_type& RefId)
      : ::schema::simxml::SimModelCore::SimPropertySetDefinition (RefId),
        SimFrameAndDividerProps_Name_ (this),
        SimFrameAndDividerProps_FrmWidth_ (this),
        SimFrameAndDividerProps_FrmOutsdProject_ (this),
        SimFrameAndDividerProps_FrmInsideProject_ (this),
        SimFrameAndDividerProps_FrmCond_ (this),
        SimFrameAndDividerProps_RatioFrmEdgeGlassCondToCntrGlassCond_ (this),
        SimFrameAndDividerProps_FrmSolarAbsorp_ (this),
        SimFrameAndDividerProps_FrmVisibleAbsorp_ (this),
        SimFrameAndDividerProps_FrmThermHemisEmiss_ (this),
        SimFrameAndDividerProps_DivType_ (this),
        SimFrameAndDividerProps_DivWidth_ (this),
        SimFrameAndDividerProps_NumbHorzDivs_ (this),
        SimFrameAndDividerProps_NumbVertlDivs_ (this),
        SimFrameAndDividerProps_DivOutsdProject_ (this),
        SimFrameAndDividerProps_DivInsideProject_ (this),
        SimFrameAndDividerProps_DivCond_ (this),
        SimFrameAndDividerProps_RatioDivEdgeGlassCondToCntrGlassCond_ (this),
        SimFrameAndDividerProps_DivSolarAbsorp_ (this),
        SimFrameAndDividerProps_DivVisibleAbsorp_ (this),
        SimFrameAndDividerProps_DivThermHemisEmiss_ (this),
        SimFrameAndDividerProps_OutsdRevealSolarAbsorp_ (this),
        SimFrameAndDividerProps_InsideSillDepth_ (this),
        SimFrameAndDividerProps_InsideSillSolarAbsorp_ (this),
        SimFrameAndDividerProps_InsideRevealDepth_ (this),
        SimFrameAndDividerProps_InsideRevealSolarAbsorp_ (this)
      {
      }

      SimFrameAndDividerProps::
      SimFrameAndDividerProps (const SimFrameAndDividerProps& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimPropertySetDefinition (x, f, c),
        SimFrameAndDividerProps_Name_ (x.SimFrameAndDividerProps_Name_, f, this),
        SimFrameAndDividerProps_FrmWidth_ (x.SimFrameAndDividerProps_FrmWidth_, f, this),
        SimFrameAndDividerProps_FrmOutsdProject_ (x.SimFrameAndDividerProps_FrmOutsdProject_, f, this),
        SimFrameAndDividerProps_FrmInsideProject_ (x.SimFrameAndDividerProps_FrmInsideProject_, f, this),
        SimFrameAndDividerProps_FrmCond_ (x.SimFrameAndDividerProps_FrmCond_, f, this),
        SimFrameAndDividerProps_RatioFrmEdgeGlassCondToCntrGlassCond_ (x.SimFrameAndDividerProps_RatioFrmEdgeGlassCondToCntrGlassCond_, f, this),
        SimFrameAndDividerProps_FrmSolarAbsorp_ (x.SimFrameAndDividerProps_FrmSolarAbsorp_, f, this),
        SimFrameAndDividerProps_FrmVisibleAbsorp_ (x.SimFrameAndDividerProps_FrmVisibleAbsorp_, f, this),
        SimFrameAndDividerProps_FrmThermHemisEmiss_ (x.SimFrameAndDividerProps_FrmThermHemisEmiss_, f, this),
        SimFrameAndDividerProps_DivType_ (x.SimFrameAndDividerProps_DivType_, f, this),
        SimFrameAndDividerProps_DivWidth_ (x.SimFrameAndDividerProps_DivWidth_, f, this),
        SimFrameAndDividerProps_NumbHorzDivs_ (x.SimFrameAndDividerProps_NumbHorzDivs_, f, this),
        SimFrameAndDividerProps_NumbVertlDivs_ (x.SimFrameAndDividerProps_NumbVertlDivs_, f, this),
        SimFrameAndDividerProps_DivOutsdProject_ (x.SimFrameAndDividerProps_DivOutsdProject_, f, this),
        SimFrameAndDividerProps_DivInsideProject_ (x.SimFrameAndDividerProps_DivInsideProject_, f, this),
        SimFrameAndDividerProps_DivCond_ (x.SimFrameAndDividerProps_DivCond_, f, this),
        SimFrameAndDividerProps_RatioDivEdgeGlassCondToCntrGlassCond_ (x.SimFrameAndDividerProps_RatioDivEdgeGlassCondToCntrGlassCond_, f, this),
        SimFrameAndDividerProps_DivSolarAbsorp_ (x.SimFrameAndDividerProps_DivSolarAbsorp_, f, this),
        SimFrameAndDividerProps_DivVisibleAbsorp_ (x.SimFrameAndDividerProps_DivVisibleAbsorp_, f, this),
        SimFrameAndDividerProps_DivThermHemisEmiss_ (x.SimFrameAndDividerProps_DivThermHemisEmiss_, f, this),
        SimFrameAndDividerProps_OutsdRevealSolarAbsorp_ (x.SimFrameAndDividerProps_OutsdRevealSolarAbsorp_, f, this),
        SimFrameAndDividerProps_InsideSillDepth_ (x.SimFrameAndDividerProps_InsideSillDepth_, f, this),
        SimFrameAndDividerProps_InsideSillSolarAbsorp_ (x.SimFrameAndDividerProps_InsideSillSolarAbsorp_, f, this),
        SimFrameAndDividerProps_InsideRevealDepth_ (x.SimFrameAndDividerProps_InsideRevealDepth_, f, this),
        SimFrameAndDividerProps_InsideRevealSolarAbsorp_ (x.SimFrameAndDividerProps_InsideRevealSolarAbsorp_, f, this)
      {
      }

      SimFrameAndDividerProps::
      SimFrameAndDividerProps (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimPropertySetDefinition (e, f | ::xml_schema::flags::base, c),
        SimFrameAndDividerProps_Name_ (this),
        SimFrameAndDividerProps_FrmWidth_ (this),
        SimFrameAndDividerProps_FrmOutsdProject_ (this),
        SimFrameAndDividerProps_FrmInsideProject_ (this),
        SimFrameAndDividerProps_FrmCond_ (this),
        SimFrameAndDividerProps_RatioFrmEdgeGlassCondToCntrGlassCond_ (this),
        SimFrameAndDividerProps_FrmSolarAbsorp_ (this),
        SimFrameAndDividerProps_FrmVisibleAbsorp_ (this),
        SimFrameAndDividerProps_FrmThermHemisEmiss_ (this),
        SimFrameAndDividerProps_DivType_ (this),
        SimFrameAndDividerProps_DivWidth_ (this),
        SimFrameAndDividerProps_NumbHorzDivs_ (this),
        SimFrameAndDividerProps_NumbVertlDivs_ (this),
        SimFrameAndDividerProps_DivOutsdProject_ (this),
        SimFrameAndDividerProps_DivInsideProject_ (this),
        SimFrameAndDividerProps_DivCond_ (this),
        SimFrameAndDividerProps_RatioDivEdgeGlassCondToCntrGlassCond_ (this),
        SimFrameAndDividerProps_DivSolarAbsorp_ (this),
        SimFrameAndDividerProps_DivVisibleAbsorp_ (this),
        SimFrameAndDividerProps_DivThermHemisEmiss_ (this),
        SimFrameAndDividerProps_OutsdRevealSolarAbsorp_ (this),
        SimFrameAndDividerProps_InsideSillDepth_ (this),
        SimFrameAndDividerProps_InsideSillSolarAbsorp_ (this),
        SimFrameAndDividerProps_InsideRevealDepth_ (this),
        SimFrameAndDividerProps_InsideRevealSolarAbsorp_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFrameAndDividerProps::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::SimModelCore::SimPropertySetDefinition::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFrameAndDividerProps_Name
          //
          if (n.name () == "SimFrameAndDividerProps_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimFrameAndDividerProps_Name_type > r (
              SimFrameAndDividerProps_Name_traits::create (i, f, this));

            if (!this->SimFrameAndDividerProps_Name_)
            {
              this->SimFrameAndDividerProps_Name_.set (r);
              continue;
            }
          }

          // SimFrameAndDividerProps_FrmWidth
          //
          if (n.name () == "SimFrameAndDividerProps_FrmWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimFrameAndDividerProps_FrmWidth_)
            {
              this->SimFrameAndDividerProps_FrmWidth_.set (SimFrameAndDividerProps_FrmWidth_traits::create (i, f, this));
              continue;
            }
          }

          // SimFrameAndDividerProps_FrmOutsdProject
          //
          if (n.name () == "SimFrameAndDividerProps_FrmOutsdProject" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimFrameAndDividerProps_FrmOutsdProject_)
            {
              this->SimFrameAndDividerProps_FrmOutsdProject_.set (SimFrameAndDividerProps_FrmOutsdProject_traits::create (i, f, this));
              continue;
            }
          }

          // SimFrameAndDividerProps_FrmInsideProject
          //
          if (n.name () == "SimFrameAndDividerProps_FrmInsideProject" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimFrameAndDividerProps_FrmInsideProject_)
            {
              this->SimFrameAndDividerProps_FrmInsideProject_.set (SimFrameAndDividerProps_FrmInsideProject_traits::create (i, f, this));
              continue;
            }
          }

          // SimFrameAndDividerProps_FrmCond
          //
          if (n.name () == "SimFrameAndDividerProps_FrmCond" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimFrameAndDividerProps_FrmCond_)
            {
              this->SimFrameAndDividerProps_FrmCond_.set (SimFrameAndDividerProps_FrmCond_traits::create (i, f, this));
              continue;
            }
          }

          // SimFrameAndDividerProps_RatioFrmEdgeGlassCondToCntrGlassCond
          //
          if (n.name () == "SimFrameAndDividerProps_RatioFrmEdgeGlassCondToCntrGlassCond" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimFrameAndDividerProps_RatioFrmEdgeGlassCondToCntrGlassCond_)
            {
              this->SimFrameAndDividerProps_RatioFrmEdgeGlassCondToCntrGlassCond_.set (SimFrameAndDividerProps_RatioFrmEdgeGlassCondToCntrGlassCond_traits::create (i, f, this));
              continue;
            }
          }

          // SimFrameAndDividerProps_FrmSolarAbsorp
          //
          if (n.name () == "SimFrameAndDividerProps_FrmSolarAbsorp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimFrameAndDividerProps_FrmSolarAbsorp_)
            {
              this->SimFrameAndDividerProps_FrmSolarAbsorp_.set (SimFrameAndDividerProps_FrmSolarAbsorp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFrameAndDividerProps_FrmVisibleAbsorp
          //
          if (n.name () == "SimFrameAndDividerProps_FrmVisibleAbsorp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimFrameAndDividerProps_FrmVisibleAbsorp_)
            {
              this->SimFrameAndDividerProps_FrmVisibleAbsorp_.set (SimFrameAndDividerProps_FrmVisibleAbsorp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFrameAndDividerProps_FrmThermHemisEmiss
          //
          if (n.name () == "SimFrameAndDividerProps_FrmThermHemisEmiss" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimFrameAndDividerProps_FrmThermHemisEmiss_)
            {
              this->SimFrameAndDividerProps_FrmThermHemisEmiss_.set (SimFrameAndDividerProps_FrmThermHemisEmiss_traits::create (i, f, this));
              continue;
            }
          }

          // SimFrameAndDividerProps_DivType
          //
          if (n.name () == "SimFrameAndDividerProps_DivType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimFrameAndDividerProps_DivType_type > r (
              SimFrameAndDividerProps_DivType_traits::create (i, f, this));

            if (!this->SimFrameAndDividerProps_DivType_)
            {
              this->SimFrameAndDividerProps_DivType_.set (r);
              continue;
            }
          }

          // SimFrameAndDividerProps_DivWidth
          //
          if (n.name () == "SimFrameAndDividerProps_DivWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimFrameAndDividerProps_DivWidth_)
            {
              this->SimFrameAndDividerProps_DivWidth_.set (SimFrameAndDividerProps_DivWidth_traits::create (i, f, this));
              continue;
            }
          }

          // SimFrameAndDividerProps_NumbHorzDivs
          //
          if (n.name () == "SimFrameAndDividerProps_NumbHorzDivs" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimFrameAndDividerProps_NumbHorzDivs_)
            {
              this->SimFrameAndDividerProps_NumbHorzDivs_.set (SimFrameAndDividerProps_NumbHorzDivs_traits::create (i, f, this));
              continue;
            }
          }

          // SimFrameAndDividerProps_NumbVertlDivs
          //
          if (n.name () == "SimFrameAndDividerProps_NumbVertlDivs" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimFrameAndDividerProps_NumbVertlDivs_)
            {
              this->SimFrameAndDividerProps_NumbVertlDivs_.set (SimFrameAndDividerProps_NumbVertlDivs_traits::create (i, f, this));
              continue;
            }
          }

          // SimFrameAndDividerProps_DivOutsdProject
          //
          if (n.name () == "SimFrameAndDividerProps_DivOutsdProject" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimFrameAndDividerProps_DivOutsdProject_)
            {
              this->SimFrameAndDividerProps_DivOutsdProject_.set (SimFrameAndDividerProps_DivOutsdProject_traits::create (i, f, this));
              continue;
            }
          }

          // SimFrameAndDividerProps_DivInsideProject
          //
          if (n.name () == "SimFrameAndDividerProps_DivInsideProject" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimFrameAndDividerProps_DivInsideProject_)
            {
              this->SimFrameAndDividerProps_DivInsideProject_.set (SimFrameAndDividerProps_DivInsideProject_traits::create (i, f, this));
              continue;
            }
          }

          // SimFrameAndDividerProps_DivCond
          //
          if (n.name () == "SimFrameAndDividerProps_DivCond" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimFrameAndDividerProps_DivCond_)
            {
              this->SimFrameAndDividerProps_DivCond_.set (SimFrameAndDividerProps_DivCond_traits::create (i, f, this));
              continue;
            }
          }

          // SimFrameAndDividerProps_RatioDivEdgeGlassCondToCntrGlassCond
          //
          if (n.name () == "SimFrameAndDividerProps_RatioDivEdgeGlassCondToCntrGlassCond" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimFrameAndDividerProps_RatioDivEdgeGlassCondToCntrGlassCond_)
            {
              this->SimFrameAndDividerProps_RatioDivEdgeGlassCondToCntrGlassCond_.set (SimFrameAndDividerProps_RatioDivEdgeGlassCondToCntrGlassCond_traits::create (i, f, this));
              continue;
            }
          }

          // SimFrameAndDividerProps_DivSolarAbsorp
          //
          if (n.name () == "SimFrameAndDividerProps_DivSolarAbsorp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimFrameAndDividerProps_DivSolarAbsorp_)
            {
              this->SimFrameAndDividerProps_DivSolarAbsorp_.set (SimFrameAndDividerProps_DivSolarAbsorp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFrameAndDividerProps_DivVisibleAbsorp
          //
          if (n.name () == "SimFrameAndDividerProps_DivVisibleAbsorp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimFrameAndDividerProps_DivVisibleAbsorp_)
            {
              this->SimFrameAndDividerProps_DivVisibleAbsorp_.set (SimFrameAndDividerProps_DivVisibleAbsorp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFrameAndDividerProps_DivThermHemisEmiss
          //
          if (n.name () == "SimFrameAndDividerProps_DivThermHemisEmiss" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimFrameAndDividerProps_DivThermHemisEmiss_)
            {
              this->SimFrameAndDividerProps_DivThermHemisEmiss_.set (SimFrameAndDividerProps_DivThermHemisEmiss_traits::create (i, f, this));
              continue;
            }
          }

          // SimFrameAndDividerProps_OutsdRevealSolarAbsorp
          //
          if (n.name () == "SimFrameAndDividerProps_OutsdRevealSolarAbsorp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimFrameAndDividerProps_OutsdRevealSolarAbsorp_)
            {
              this->SimFrameAndDividerProps_OutsdRevealSolarAbsorp_.set (SimFrameAndDividerProps_OutsdRevealSolarAbsorp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFrameAndDividerProps_InsideSillDepth
          //
          if (n.name () == "SimFrameAndDividerProps_InsideSillDepth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimFrameAndDividerProps_InsideSillDepth_)
            {
              this->SimFrameAndDividerProps_InsideSillDepth_.set (SimFrameAndDividerProps_InsideSillDepth_traits::create (i, f, this));
              continue;
            }
          }

          // SimFrameAndDividerProps_InsideSillSolarAbsorp
          //
          if (n.name () == "SimFrameAndDividerProps_InsideSillSolarAbsorp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimFrameAndDividerProps_InsideSillSolarAbsorp_)
            {
              this->SimFrameAndDividerProps_InsideSillSolarAbsorp_.set (SimFrameAndDividerProps_InsideSillSolarAbsorp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFrameAndDividerProps_InsideRevealDepth
          //
          if (n.name () == "SimFrameAndDividerProps_InsideRevealDepth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimFrameAndDividerProps_InsideRevealDepth_)
            {
              this->SimFrameAndDividerProps_InsideRevealDepth_.set (SimFrameAndDividerProps_InsideRevealDepth_traits::create (i, f, this));
              continue;
            }
          }

          // SimFrameAndDividerProps_InsideRevealSolarAbsorp
          //
          if (n.name () == "SimFrameAndDividerProps_InsideRevealSolarAbsorp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimFrameAndDividerProps_InsideRevealSolarAbsorp_)
            {
              this->SimFrameAndDividerProps_InsideRevealSolarAbsorp_.set (SimFrameAndDividerProps_InsideRevealSolarAbsorp_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFrameAndDividerProps* SimFrameAndDividerProps::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFrameAndDividerProps (*this, f, c);
      }

      SimFrameAndDividerProps& SimFrameAndDividerProps::
      operator= (const SimFrameAndDividerProps& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::SimModelCore::SimPropertySetDefinition& > (*this) = x;
          this->SimFrameAndDividerProps_Name_ = x.SimFrameAndDividerProps_Name_;
          this->SimFrameAndDividerProps_FrmWidth_ = x.SimFrameAndDividerProps_FrmWidth_;
          this->SimFrameAndDividerProps_FrmOutsdProject_ = x.SimFrameAndDividerProps_FrmOutsdProject_;
          this->SimFrameAndDividerProps_FrmInsideProject_ = x.SimFrameAndDividerProps_FrmInsideProject_;
          this->SimFrameAndDividerProps_FrmCond_ = x.SimFrameAndDividerProps_FrmCond_;
          this->SimFrameAndDividerProps_RatioFrmEdgeGlassCondToCntrGlassCond_ = x.SimFrameAndDividerProps_RatioFrmEdgeGlassCondToCntrGlassCond_;
          this->SimFrameAndDividerProps_FrmSolarAbsorp_ = x.SimFrameAndDividerProps_FrmSolarAbsorp_;
          this->SimFrameAndDividerProps_FrmVisibleAbsorp_ = x.SimFrameAndDividerProps_FrmVisibleAbsorp_;
          this->SimFrameAndDividerProps_FrmThermHemisEmiss_ = x.SimFrameAndDividerProps_FrmThermHemisEmiss_;
          this->SimFrameAndDividerProps_DivType_ = x.SimFrameAndDividerProps_DivType_;
          this->SimFrameAndDividerProps_DivWidth_ = x.SimFrameAndDividerProps_DivWidth_;
          this->SimFrameAndDividerProps_NumbHorzDivs_ = x.SimFrameAndDividerProps_NumbHorzDivs_;
          this->SimFrameAndDividerProps_NumbVertlDivs_ = x.SimFrameAndDividerProps_NumbVertlDivs_;
          this->SimFrameAndDividerProps_DivOutsdProject_ = x.SimFrameAndDividerProps_DivOutsdProject_;
          this->SimFrameAndDividerProps_DivInsideProject_ = x.SimFrameAndDividerProps_DivInsideProject_;
          this->SimFrameAndDividerProps_DivCond_ = x.SimFrameAndDividerProps_DivCond_;
          this->SimFrameAndDividerProps_RatioDivEdgeGlassCondToCntrGlassCond_ = x.SimFrameAndDividerProps_RatioDivEdgeGlassCondToCntrGlassCond_;
          this->SimFrameAndDividerProps_DivSolarAbsorp_ = x.SimFrameAndDividerProps_DivSolarAbsorp_;
          this->SimFrameAndDividerProps_DivVisibleAbsorp_ = x.SimFrameAndDividerProps_DivVisibleAbsorp_;
          this->SimFrameAndDividerProps_DivThermHemisEmiss_ = x.SimFrameAndDividerProps_DivThermHemisEmiss_;
          this->SimFrameAndDividerProps_OutsdRevealSolarAbsorp_ = x.SimFrameAndDividerProps_OutsdRevealSolarAbsorp_;
          this->SimFrameAndDividerProps_InsideSillDepth_ = x.SimFrameAndDividerProps_InsideSillDepth_;
          this->SimFrameAndDividerProps_InsideSillSolarAbsorp_ = x.SimFrameAndDividerProps_InsideSillSolarAbsorp_;
          this->SimFrameAndDividerProps_InsideRevealDepth_ = x.SimFrameAndDividerProps_InsideRevealDepth_;
          this->SimFrameAndDividerProps_InsideRevealSolarAbsorp_ = x.SimFrameAndDividerProps_InsideRevealSolarAbsorp_;
        }

        return *this;
      }

      SimFrameAndDividerProps::
      ~SimFrameAndDividerProps ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

