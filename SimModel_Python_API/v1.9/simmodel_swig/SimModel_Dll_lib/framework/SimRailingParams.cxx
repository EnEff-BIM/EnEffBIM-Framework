// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimRailingParams.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimRailingParams
      // 

      const SimRailingParams::OverallLength_optional& SimRailingParams::
      OverallLength () const
      {
        return this->OverallLength_;
      }

      SimRailingParams::OverallLength_optional& SimRailingParams::
      OverallLength ()
      {
        return this->OverallLength_;
      }

      void SimRailingParams::
      OverallLength (const OverallLength_type& x)
      {
        this->OverallLength_.set (x);
      }

      void SimRailingParams::
      OverallLength (const OverallLength_optional& x)
      {
        this->OverallLength_ = x;
      }

      const SimRailingParams::OverallHeight_optional& SimRailingParams::
      OverallHeight () const
      {
        return this->OverallHeight_;
      }

      SimRailingParams::OverallHeight_optional& SimRailingParams::
      OverallHeight ()
      {
        return this->OverallHeight_;
      }

      void SimRailingParams::
      OverallHeight (const OverallHeight_type& x)
      {
        this->OverallHeight_.set (x);
      }

      void SimRailingParams::
      OverallHeight (const OverallHeight_optional& x)
      {
        this->OverallHeight_ = x;
      }

      const SimRailingParams::TopRailWidth_optional& SimRailingParams::
      TopRailWidth () const
      {
        return this->TopRailWidth_;
      }

      SimRailingParams::TopRailWidth_optional& SimRailingParams::
      TopRailWidth ()
      {
        return this->TopRailWidth_;
      }

      void SimRailingParams::
      TopRailWidth (const TopRailWidth_type& x)
      {
        this->TopRailWidth_.set (x);
      }

      void SimRailingParams::
      TopRailWidth (const TopRailWidth_optional& x)
      {
        this->TopRailWidth_ = x;
      }

      const SimRailingParams::TopRailDepth_optional& SimRailingParams::
      TopRailDepth () const
      {
        return this->TopRailDepth_;
      }

      SimRailingParams::TopRailDepth_optional& SimRailingParams::
      TopRailDepth ()
      {
        return this->TopRailDepth_;
      }

      void SimRailingParams::
      TopRailDepth (const TopRailDepth_type& x)
      {
        this->TopRailDepth_.set (x);
      }

      void SimRailingParams::
      TopRailDepth (const TopRailDepth_optional& x)
      {
        this->TopRailDepth_ = x;
      }

      const SimRailingParams::StileLength_optional& SimRailingParams::
      StileLength () const
      {
        return this->StileLength_;
      }

      SimRailingParams::StileLength_optional& SimRailingParams::
      StileLength ()
      {
        return this->StileLength_;
      }

      void SimRailingParams::
      StileLength (const StileLength_type& x)
      {
        this->StileLength_.set (x);
      }

      void SimRailingParams::
      StileLength (const StileLength_optional& x)
      {
        this->StileLength_ = x;
      }

      const SimRailingParams::StileWidth_optional& SimRailingParams::
      StileWidth () const
      {
        return this->StileWidth_;
      }

      SimRailingParams::StileWidth_optional& SimRailingParams::
      StileWidth ()
      {
        return this->StileWidth_;
      }

      void SimRailingParams::
      StileWidth (const StileWidth_type& x)
      {
        this->StileWidth_.set (x);
      }

      void SimRailingParams::
      StileWidth (const StileWidth_optional& x)
      {
        this->StileWidth_ = x;
      }

      const SimRailingParams::StileLengthSpacing_optional& SimRailingParams::
      StileLengthSpacing () const
      {
        return this->StileLengthSpacing_;
      }

      SimRailingParams::StileLengthSpacing_optional& SimRailingParams::
      StileLengthSpacing ()
      {
        return this->StileLengthSpacing_;
      }

      void SimRailingParams::
      StileLengthSpacing (const StileLengthSpacing_type& x)
      {
        this->StileLengthSpacing_.set (x);
      }

      void SimRailingParams::
      StileLengthSpacing (const StileLengthSpacing_optional& x)
      {
        this->StileLengthSpacing_ = x;
      }

      const SimRailingParams::BaseRailWidth_optional& SimRailingParams::
      BaseRailWidth () const
      {
        return this->BaseRailWidth_;
      }

      SimRailingParams::BaseRailWidth_optional& SimRailingParams::
      BaseRailWidth ()
      {
        return this->BaseRailWidth_;
      }

      void SimRailingParams::
      BaseRailWidth (const BaseRailWidth_type& x)
      {
        this->BaseRailWidth_.set (x);
      }

      void SimRailingParams::
      BaseRailWidth (const BaseRailWidth_optional& x)
      {
        this->BaseRailWidth_ = x;
      }

      const SimRailingParams::BaseRailDepth_optional& SimRailingParams::
      BaseRailDepth () const
      {
        return this->BaseRailDepth_;
      }

      SimRailingParams::BaseRailDepth_optional& SimRailingParams::
      BaseRailDepth ()
      {
        return this->BaseRailDepth_;
      }

      void SimRailingParams::
      BaseRailDepth (const BaseRailDepth_type& x)
      {
        this->BaseRailDepth_.set (x);
      }

      void SimRailingParams::
      BaseRailDepth (const BaseRailDepth_optional& x)
      {
        this->BaseRailDepth_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimRailingParams
      //

      SimRailingParams::
      SimRailingParams ()
      : ::schema::simxml::SimModelCore::SimBldgModelParams (),
        OverallLength_ (this),
        OverallHeight_ (this),
        TopRailWidth_ (this),
        TopRailDepth_ (this),
        StileLength_ (this),
        StileWidth_ (this),
        StileLengthSpacing_ (this),
        BaseRailWidth_ (this),
        BaseRailDepth_ (this)
      {
      }

      SimRailingParams::
      SimRailingParams (const RefId_type& RefId)
      : ::schema::simxml::SimModelCore::SimBldgModelParams (RefId),
        OverallLength_ (this),
        OverallHeight_ (this),
        TopRailWidth_ (this),
        TopRailDepth_ (this),
        StileLength_ (this),
        StileWidth_ (this),
        StileLengthSpacing_ (this),
        BaseRailWidth_ (this),
        BaseRailDepth_ (this)
      {
      }

      SimRailingParams::
      SimRailingParams (const SimRailingParams& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimBldgModelParams (x, f, c),
        OverallLength_ (x.OverallLength_, f, this),
        OverallHeight_ (x.OverallHeight_, f, this),
        TopRailWidth_ (x.TopRailWidth_, f, this),
        TopRailDepth_ (x.TopRailDepth_, f, this),
        StileLength_ (x.StileLength_, f, this),
        StileWidth_ (x.StileWidth_, f, this),
        StileLengthSpacing_ (x.StileLengthSpacing_, f, this),
        BaseRailWidth_ (x.BaseRailWidth_, f, this),
        BaseRailDepth_ (x.BaseRailDepth_, f, this)
      {
      }

      SimRailingParams::
      SimRailingParams (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimBldgModelParams (e, f | ::xml_schema::flags::base, c),
        OverallLength_ (this),
        OverallHeight_ (this),
        TopRailWidth_ (this),
        TopRailDepth_ (this),
        StileLength_ (this),
        StileWidth_ (this),
        StileLengthSpacing_ (this),
        BaseRailWidth_ (this),
        BaseRailDepth_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimRailingParams::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::SimModelCore::SimBldgModelParams::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // OverallLength
          //
          if (n.name () == "OverallLength" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->OverallLength_)
            {
              this->OverallLength_.set (OverallLength_traits::create (i, f, this));
              continue;
            }
          }

          // OverallHeight
          //
          if (n.name () == "OverallHeight" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->OverallHeight_)
            {
              this->OverallHeight_.set (OverallHeight_traits::create (i, f, this));
              continue;
            }
          }

          // TopRailWidth
          //
          if (n.name () == "TopRailWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->TopRailWidth_)
            {
              this->TopRailWidth_.set (TopRailWidth_traits::create (i, f, this));
              continue;
            }
          }

          // TopRailDepth
          //
          if (n.name () == "TopRailDepth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->TopRailDepth_)
            {
              this->TopRailDepth_.set (TopRailDepth_traits::create (i, f, this));
              continue;
            }
          }

          // StileLength
          //
          if (n.name () == "StileLength" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->StileLength_)
            {
              this->StileLength_.set (StileLength_traits::create (i, f, this));
              continue;
            }
          }

          // StileWidth
          //
          if (n.name () == "StileWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->StileWidth_)
            {
              this->StileWidth_.set (StileWidth_traits::create (i, f, this));
              continue;
            }
          }

          // StileLengthSpacing
          //
          if (n.name () == "StileLengthSpacing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->StileLengthSpacing_)
            {
              this->StileLengthSpacing_.set (StileLengthSpacing_traits::create (i, f, this));
              continue;
            }
          }

          // BaseRailWidth
          //
          if (n.name () == "BaseRailWidth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->BaseRailWidth_)
            {
              this->BaseRailWidth_.set (BaseRailWidth_traits::create (i, f, this));
              continue;
            }
          }

          // BaseRailDepth
          //
          if (n.name () == "BaseRailDepth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->BaseRailDepth_)
            {
              this->BaseRailDepth_.set (BaseRailDepth_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimRailingParams* SimRailingParams::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimRailingParams (*this, f, c);
      }

      SimRailingParams& SimRailingParams::
      operator= (const SimRailingParams& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::SimModelCore::SimBldgModelParams& > (*this) = x;
          this->OverallLength_ = x.OverallLength_;
          this->OverallHeight_ = x.OverallHeight_;
          this->TopRailWidth_ = x.TopRailWidth_;
          this->TopRailDepth_ = x.TopRailDepth_;
          this->StileLength_ = x.StileLength_;
          this->StileWidth_ = x.StileWidth_;
          this->StileLengthSpacing_ = x.StileLengthSpacing_;
          this->BaseRailWidth_ = x.BaseRailWidth_;
          this->BaseRailDepth_ = x.BaseRailDepth_;
        }

        return *this;
      }

      SimRailingParams::
      ~SimRailingParams ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

