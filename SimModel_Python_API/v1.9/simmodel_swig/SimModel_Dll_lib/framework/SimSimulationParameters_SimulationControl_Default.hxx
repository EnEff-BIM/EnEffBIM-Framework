// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_SIMULATION_PARAMETERS_SIMULATION_CONTROL_DEFAULT_HXX
#define SIM_SIMULATION_PARAMETERS_SIMULATION_CONTROL_DEFAULT_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      class SimSimulationParameters_SimulationControl_Default;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simsimulationparameters_simulationcontrol.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      class SimSimulationParameters_SimulationControl_Default: public ::schema::simxml::ResourcesGeneral::SimSimulationParameters_SimulationControl
      {
        public:
        // SimSimParams_DoZoneSizingCalc
        //
        typedef ::xml_schema::string SimSimParams_DoZoneSizingCalc_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_DoZoneSizingCalc_type > SimSimParams_DoZoneSizingCalc_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_DoZoneSizingCalc_type, char > SimSimParams_DoZoneSizingCalc_traits;

        const SimSimParams_DoZoneSizingCalc_optional&
        SimSimParams_DoZoneSizingCalc () const;

        SimSimParams_DoZoneSizingCalc_optional&
        SimSimParams_DoZoneSizingCalc ();

        void
        SimSimParams_DoZoneSizingCalc (const SimSimParams_DoZoneSizingCalc_type& x);

        void
        SimSimParams_DoZoneSizingCalc (const SimSimParams_DoZoneSizingCalc_optional& x);

        void
        SimSimParams_DoZoneSizingCalc (::std::auto_ptr< SimSimParams_DoZoneSizingCalc_type > p);

        // SimSimParams_DoSysSizingCalc
        //
        typedef ::xml_schema::string SimSimParams_DoSysSizingCalc_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_DoSysSizingCalc_type > SimSimParams_DoSysSizingCalc_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_DoSysSizingCalc_type, char > SimSimParams_DoSysSizingCalc_traits;

        const SimSimParams_DoSysSizingCalc_optional&
        SimSimParams_DoSysSizingCalc () const;

        SimSimParams_DoSysSizingCalc_optional&
        SimSimParams_DoSysSizingCalc ();

        void
        SimSimParams_DoSysSizingCalc (const SimSimParams_DoSysSizingCalc_type& x);

        void
        SimSimParams_DoSysSizingCalc (const SimSimParams_DoSysSizingCalc_optional& x);

        void
        SimSimParams_DoSysSizingCalc (::std::auto_ptr< SimSimParams_DoSysSizingCalc_type > p);

        // SimSimParams_DoPlantSizingCalc
        //
        typedef ::xml_schema::string SimSimParams_DoPlantSizingCalc_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_DoPlantSizingCalc_type > SimSimParams_DoPlantSizingCalc_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_DoPlantSizingCalc_type, char > SimSimParams_DoPlantSizingCalc_traits;

        const SimSimParams_DoPlantSizingCalc_optional&
        SimSimParams_DoPlantSizingCalc () const;

        SimSimParams_DoPlantSizingCalc_optional&
        SimSimParams_DoPlantSizingCalc ();

        void
        SimSimParams_DoPlantSizingCalc (const SimSimParams_DoPlantSizingCalc_type& x);

        void
        SimSimParams_DoPlantSizingCalc (const SimSimParams_DoPlantSizingCalc_optional& x);

        void
        SimSimParams_DoPlantSizingCalc (::std::auto_ptr< SimSimParams_DoPlantSizingCalc_type > p);

        // SimSimParams_RunSimForSizingPeriods
        //
        typedef ::xml_schema::string SimSimParams_RunSimForSizingPeriods_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_RunSimForSizingPeriods_type > SimSimParams_RunSimForSizingPeriods_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_RunSimForSizingPeriods_type, char > SimSimParams_RunSimForSizingPeriods_traits;

        const SimSimParams_RunSimForSizingPeriods_optional&
        SimSimParams_RunSimForSizingPeriods () const;

        SimSimParams_RunSimForSizingPeriods_optional&
        SimSimParams_RunSimForSizingPeriods ();

        void
        SimSimParams_RunSimForSizingPeriods (const SimSimParams_RunSimForSizingPeriods_type& x);

        void
        SimSimParams_RunSimForSizingPeriods (const SimSimParams_RunSimForSizingPeriods_optional& x);

        void
        SimSimParams_RunSimForSizingPeriods (::std::auto_ptr< SimSimParams_RunSimForSizingPeriods_type > p);

        // SimSimParams_RunSimForWeatherFileRunPeriods
        //
        typedef ::xml_schema::string SimSimParams_RunSimForWeatherFileRunPeriods_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_RunSimForWeatherFileRunPeriods_type > SimSimParams_RunSimForWeatherFileRunPeriods_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_RunSimForWeatherFileRunPeriods_type, char > SimSimParams_RunSimForWeatherFileRunPeriods_traits;

        const SimSimParams_RunSimForWeatherFileRunPeriods_optional&
        SimSimParams_RunSimForWeatherFileRunPeriods () const;

        SimSimParams_RunSimForWeatherFileRunPeriods_optional&
        SimSimParams_RunSimForWeatherFileRunPeriods ();

        void
        SimSimParams_RunSimForWeatherFileRunPeriods (const SimSimParams_RunSimForWeatherFileRunPeriods_type& x);

        void
        SimSimParams_RunSimForWeatherFileRunPeriods (const SimSimParams_RunSimForWeatherFileRunPeriods_optional& x);

        void
        SimSimParams_RunSimForWeatherFileRunPeriods (::std::auto_ptr< SimSimParams_RunSimForWeatherFileRunPeriods_type > p);

        // Version_VersionIdentifier
        //
        typedef ::xml_schema::string Version_VersionIdentifier_type;
        typedef ::xsd::cxx::tree::optional< Version_VersionIdentifier_type > Version_VersionIdentifier_optional;
        typedef ::xsd::cxx::tree::traits< Version_VersionIdentifier_type, char > Version_VersionIdentifier_traits;

        const Version_VersionIdentifier_optional&
        Version_VersionIdentifier () const;

        Version_VersionIdentifier_optional&
        Version_VersionIdentifier ();

        void
        Version_VersionIdentifier (const Version_VersionIdentifier_type& x);

        void
        Version_VersionIdentifier (const Version_VersionIdentifier_optional& x);

        void
        Version_VersionIdentifier (::std::auto_ptr< Version_VersionIdentifier_type > p);

        // ShadowCalc_CalcMeth
        //
        typedef ::xml_schema::string ShadowCalc_CalcMeth_type;
        typedef ::xsd::cxx::tree::optional< ShadowCalc_CalcMeth_type > ShadowCalc_CalcMeth_optional;
        typedef ::xsd::cxx::tree::traits< ShadowCalc_CalcMeth_type, char > ShadowCalc_CalcMeth_traits;

        const ShadowCalc_CalcMeth_optional&
        ShadowCalc_CalcMeth () const;

        ShadowCalc_CalcMeth_optional&
        ShadowCalc_CalcMeth ();

        void
        ShadowCalc_CalcMeth (const ShadowCalc_CalcMeth_type& x);

        void
        ShadowCalc_CalcMeth (const ShadowCalc_CalcMeth_optional& x);

        void
        ShadowCalc_CalcMeth (::std::auto_ptr< ShadowCalc_CalcMeth_type > p);

        // ShadowCalc_CalcFreq
        //
        typedef ::xml_schema::int_ ShadowCalc_CalcFreq_type;
        typedef ::xsd::cxx::tree::optional< ShadowCalc_CalcFreq_type > ShadowCalc_CalcFreq_optional;
        typedef ::xsd::cxx::tree::traits< ShadowCalc_CalcFreq_type, char > ShadowCalc_CalcFreq_traits;

        const ShadowCalc_CalcFreq_optional&
        ShadowCalc_CalcFreq () const;

        ShadowCalc_CalcFreq_optional&
        ShadowCalc_CalcFreq ();

        void
        ShadowCalc_CalcFreq (const ShadowCalc_CalcFreq_type& x);

        void
        ShadowCalc_CalcFreq (const ShadowCalc_CalcFreq_optional& x);

        // ShadowCalc_MaxFiguresShadowOverlapCalcs
        //
        typedef ::xml_schema::int_ ShadowCalc_MaxFiguresShadowOverlapCalcs_type;
        typedef ::xsd::cxx::tree::optional< ShadowCalc_MaxFiguresShadowOverlapCalcs_type > ShadowCalc_MaxFiguresShadowOverlapCalcs_optional;
        typedef ::xsd::cxx::tree::traits< ShadowCalc_MaxFiguresShadowOverlapCalcs_type, char > ShadowCalc_MaxFiguresShadowOverlapCalcs_traits;

        const ShadowCalc_MaxFiguresShadowOverlapCalcs_optional&
        ShadowCalc_MaxFiguresShadowOverlapCalcs () const;

        ShadowCalc_MaxFiguresShadowOverlapCalcs_optional&
        ShadowCalc_MaxFiguresShadowOverlapCalcs ();

        void
        ShadowCalc_MaxFiguresShadowOverlapCalcs (const ShadowCalc_MaxFiguresShadowOverlapCalcs_type& x);

        void
        ShadowCalc_MaxFiguresShadowOverlapCalcs (const ShadowCalc_MaxFiguresShadowOverlapCalcs_optional& x);

        // ShadowCalc_PolygonClippingAlgorithm
        //
        typedef ::xml_schema::string ShadowCalc_PolygonClippingAlgorithm_type;
        typedef ::xsd::cxx::tree::optional< ShadowCalc_PolygonClippingAlgorithm_type > ShadowCalc_PolygonClippingAlgorithm_optional;
        typedef ::xsd::cxx::tree::traits< ShadowCalc_PolygonClippingAlgorithm_type, char > ShadowCalc_PolygonClippingAlgorithm_traits;

        const ShadowCalc_PolygonClippingAlgorithm_optional&
        ShadowCalc_PolygonClippingAlgorithm () const;

        ShadowCalc_PolygonClippingAlgorithm_optional&
        ShadowCalc_PolygonClippingAlgorithm ();

        void
        ShadowCalc_PolygonClippingAlgorithm (const ShadowCalc_PolygonClippingAlgorithm_type& x);

        void
        ShadowCalc_PolygonClippingAlgorithm (const ShadowCalc_PolygonClippingAlgorithm_optional& x);

        void
        ShadowCalc_PolygonClippingAlgorithm (::std::auto_ptr< ShadowCalc_PolygonClippingAlgorithm_type > p);

        // ShadowCalc_SkyDiffuseModAlgo
        //
        typedef ::xml_schema::string ShadowCalc_SkyDiffuseModAlgo_type;
        typedef ::xsd::cxx::tree::optional< ShadowCalc_SkyDiffuseModAlgo_type > ShadowCalc_SkyDiffuseModAlgo_optional;
        typedef ::xsd::cxx::tree::traits< ShadowCalc_SkyDiffuseModAlgo_type, char > ShadowCalc_SkyDiffuseModAlgo_traits;

        const ShadowCalc_SkyDiffuseModAlgo_optional&
        ShadowCalc_SkyDiffuseModAlgo () const;

        ShadowCalc_SkyDiffuseModAlgo_optional&
        ShadowCalc_SkyDiffuseModAlgo ();

        void
        ShadowCalc_SkyDiffuseModAlgo (const ShadowCalc_SkyDiffuseModAlgo_type& x);

        void
        ShadowCalc_SkyDiffuseModAlgo (const ShadowCalc_SkyDiffuseModAlgo_optional& x);

        void
        ShadowCalc_SkyDiffuseModAlgo (::std::auto_ptr< ShadowCalc_SkyDiffuseModAlgo_type > p);

        // ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult
        //
        typedef ::xml_schema::double_ ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_type;
        typedef ::xsd::cxx::tree::optional< ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_type > ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_optional;
        typedef ::xsd::cxx::tree::traits< ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_type, char, ::xsd::cxx::tree::schema_type::double_ > ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_traits;

        const ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_optional&
        ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult () const;

        ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_optional&
        ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult ();

        void
        ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult (const ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_type& x);

        void
        ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult (const ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_optional& x);

        // ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult
        //
        typedef ::xml_schema::double_ ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_type;
        typedef ::xsd::cxx::tree::optional< ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_type > ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_optional;
        typedef ::xsd::cxx::tree::traits< ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_type, char, ::xsd::cxx::tree::schema_type::double_ > ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_traits;

        const ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_optional&
        ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult () const;

        ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_optional&
        ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult ();

        void
        ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult (const ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_type& x);

        void
        ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult (const ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_optional& x);

        // ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult
        //
        typedef ::xml_schema::double_ ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_type;
        typedef ::xsd::cxx::tree::optional< ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_type > ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_optional;
        typedef ::xsd::cxx::tree::traits< ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_type, char, ::xsd::cxx::tree::schema_type::double_ > ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_traits;

        const ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_optional&
        ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult () const;

        ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_optional&
        ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult ();

        void
        ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult (const ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_type& x);

        void
        ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult (const ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_optional& x);

        // ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult
        //
        typedef ::xml_schema::double_ ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_type;
        typedef ::xsd::cxx::tree::optional< ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_type > ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_optional;
        typedef ::xsd::cxx::tree::traits< ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_type, char, ::xsd::cxx::tree::schema_type::double_ > ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_traits;

        const ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_optional&
        ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult () const;

        ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_optional&
        ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult ();

        void
        ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult (const ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_type& x);

        void
        ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult (const ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_optional& x);

        // ZoneAirContamBalance_CO2Concentration
        //
        typedef ::xml_schema::string ZoneAirContamBalance_CO2Concentration_type;
        typedef ::xsd::cxx::tree::optional< ZoneAirContamBalance_CO2Concentration_type > ZoneAirContamBalance_CO2Concentration_optional;
        typedef ::xsd::cxx::tree::traits< ZoneAirContamBalance_CO2Concentration_type, char > ZoneAirContamBalance_CO2Concentration_traits;

        const ZoneAirContamBalance_CO2Concentration_optional&
        ZoneAirContamBalance_CO2Concentration () const;

        ZoneAirContamBalance_CO2Concentration_optional&
        ZoneAirContamBalance_CO2Concentration ();

        void
        ZoneAirContamBalance_CO2Concentration (const ZoneAirContamBalance_CO2Concentration_type& x);

        void
        ZoneAirContamBalance_CO2Concentration (const ZoneAirContamBalance_CO2Concentration_optional& x);

        void
        ZoneAirContamBalance_CO2Concentration (::std::auto_ptr< ZoneAirContamBalance_CO2Concentration_type > p);

        // ZoneAirContamBalance_OutdrCO2ScheduleName
        //
        typedef ::xml_schema::idref ZoneAirContamBalance_OutdrCO2ScheduleName_type;
        typedef ::xsd::cxx::tree::optional< ZoneAirContamBalance_OutdrCO2ScheduleName_type > ZoneAirContamBalance_OutdrCO2ScheduleName_optional;
        typedef ::xsd::cxx::tree::traits< ZoneAirContamBalance_OutdrCO2ScheduleName_type, char > ZoneAirContamBalance_OutdrCO2ScheduleName_traits;

        const ZoneAirContamBalance_OutdrCO2ScheduleName_optional&
        ZoneAirContamBalance_OutdrCO2ScheduleName () const;

        ZoneAirContamBalance_OutdrCO2ScheduleName_optional&
        ZoneAirContamBalance_OutdrCO2ScheduleName ();

        void
        ZoneAirContamBalance_OutdrCO2ScheduleName (const ZoneAirContamBalance_OutdrCO2ScheduleName_type& x);

        void
        ZoneAirContamBalance_OutdrCO2ScheduleName (const ZoneAirContamBalance_OutdrCO2ScheduleName_optional& x);

        void
        ZoneAirContamBalance_OutdrCO2ScheduleName (::std::auto_ptr< ZoneAirContamBalance_OutdrCO2ScheduleName_type > p);

        // ZoneAirContamBalance_GenContamConcentration
        //
        typedef ::xml_schema::string ZoneAirContamBalance_GenContamConcentration_type;
        typedef ::xsd::cxx::tree::optional< ZoneAirContamBalance_GenContamConcentration_type > ZoneAirContamBalance_GenContamConcentration_optional;
        typedef ::xsd::cxx::tree::traits< ZoneAirContamBalance_GenContamConcentration_type, char > ZoneAirContamBalance_GenContamConcentration_traits;

        const ZoneAirContamBalance_GenContamConcentration_optional&
        ZoneAirContamBalance_GenContamConcentration () const;

        ZoneAirContamBalance_GenContamConcentration_optional&
        ZoneAirContamBalance_GenContamConcentration ();

        void
        ZoneAirContamBalance_GenContamConcentration (const ZoneAirContamBalance_GenContamConcentration_type& x);

        void
        ZoneAirContamBalance_GenContamConcentration (const ZoneAirContamBalance_GenContamConcentration_optional& x);

        void
        ZoneAirContamBalance_GenContamConcentration (::std::auto_ptr< ZoneAirContamBalance_GenContamConcentration_type > p);

        // ZoneAirContamBalance_OutdoorGenContamSchedName
        //
        typedef ::xml_schema::idref ZoneAirContamBalance_OutdoorGenContamSchedName_type;
        typedef ::xsd::cxx::tree::optional< ZoneAirContamBalance_OutdoorGenContamSchedName_type > ZoneAirContamBalance_OutdoorGenContamSchedName_optional;
        typedef ::xsd::cxx::tree::traits< ZoneAirContamBalance_OutdoorGenContamSchedName_type, char > ZoneAirContamBalance_OutdoorGenContamSchedName_traits;

        const ZoneAirContamBalance_OutdoorGenContamSchedName_optional&
        ZoneAirContamBalance_OutdoorGenContamSchedName () const;

        ZoneAirContamBalance_OutdoorGenContamSchedName_optional&
        ZoneAirContamBalance_OutdoorGenContamSchedName ();

        void
        ZoneAirContamBalance_OutdoorGenContamSchedName (const ZoneAirContamBalance_OutdoorGenContamSchedName_type& x);

        void
        ZoneAirContamBalance_OutdoorGenContamSchedName (const ZoneAirContamBalance_OutdoorGenContamSchedName_optional& x);

        void
        ZoneAirContamBalance_OutdoorGenContamSchedName (::std::auto_ptr< ZoneAirContamBalance_OutdoorGenContamSchedName_type > p);

        // Timestep_NumTimestepsPerHour
        //
        typedef ::xml_schema::int_ Timestep_NumTimestepsPerHour_type;
        typedef ::xsd::cxx::tree::optional< Timestep_NumTimestepsPerHour_type > Timestep_NumTimestepsPerHour_optional;
        typedef ::xsd::cxx::tree::traits< Timestep_NumTimestepsPerHour_type, char > Timestep_NumTimestepsPerHour_traits;

        const Timestep_NumTimestepsPerHour_optional&
        Timestep_NumTimestepsPerHour () const;

        Timestep_NumTimestepsPerHour_optional&
        Timestep_NumTimestepsPerHour ();

        void
        Timestep_NumTimestepsPerHour (const Timestep_NumTimestepsPerHour_type& x);

        void
        Timestep_NumTimestepsPerHour (const Timestep_NumTimestepsPerHour_optional& x);

        // ConvLimits_MinSysTimestep
        //
        typedef ::xml_schema::double_ ConvLimits_MinSysTimestep_type;
        typedef ::xsd::cxx::tree::optional< ConvLimits_MinSysTimestep_type > ConvLimits_MinSysTimestep_optional;
        typedef ::xsd::cxx::tree::traits< ConvLimits_MinSysTimestep_type, char, ::xsd::cxx::tree::schema_type::double_ > ConvLimits_MinSysTimestep_traits;

        const ConvLimits_MinSysTimestep_optional&
        ConvLimits_MinSysTimestep () const;

        ConvLimits_MinSysTimestep_optional&
        ConvLimits_MinSysTimestep ();

        void
        ConvLimits_MinSysTimestep (const ConvLimits_MinSysTimestep_type& x);

        void
        ConvLimits_MinSysTimestep (const ConvLimits_MinSysTimestep_optional& x);

        // ConvLimits_MaxHVACIterations
        //
        typedef ::xml_schema::int_ ConvLimits_MaxHVACIterations_type;
        typedef ::xsd::cxx::tree::optional< ConvLimits_MaxHVACIterations_type > ConvLimits_MaxHVACIterations_optional;
        typedef ::xsd::cxx::tree::traits< ConvLimits_MaxHVACIterations_type, char > ConvLimits_MaxHVACIterations_traits;

        const ConvLimits_MaxHVACIterations_optional&
        ConvLimits_MaxHVACIterations () const;

        ConvLimits_MaxHVACIterations_optional&
        ConvLimits_MaxHVACIterations ();

        void
        ConvLimits_MaxHVACIterations (const ConvLimits_MaxHVACIterations_type& x);

        void
        ConvLimits_MaxHVACIterations (const ConvLimits_MaxHVACIterations_optional& x);

        // ConvLimits_MinPlantIterations
        //
        typedef ::xml_schema::int_ ConvLimits_MinPlantIterations_type;
        typedef ::xsd::cxx::tree::optional< ConvLimits_MinPlantIterations_type > ConvLimits_MinPlantIterations_optional;
        typedef ::xsd::cxx::tree::traits< ConvLimits_MinPlantIterations_type, char > ConvLimits_MinPlantIterations_traits;

        const ConvLimits_MinPlantIterations_optional&
        ConvLimits_MinPlantIterations () const;

        ConvLimits_MinPlantIterations_optional&
        ConvLimits_MinPlantIterations ();

        void
        ConvLimits_MinPlantIterations (const ConvLimits_MinPlantIterations_type& x);

        void
        ConvLimits_MinPlantIterations (const ConvLimits_MinPlantIterations_optional& x);

        // ConvLimits_MaxPlantIterations
        //
        typedef ::xml_schema::int_ ConvLimits_MaxPlantIterations_type;
        typedef ::xsd::cxx::tree::optional< ConvLimits_MaxPlantIterations_type > ConvLimits_MaxPlantIterations_optional;
        typedef ::xsd::cxx::tree::traits< ConvLimits_MaxPlantIterations_type, char > ConvLimits_MaxPlantIterations_traits;

        const ConvLimits_MaxPlantIterations_optional&
        ConvLimits_MaxPlantIterations () const;

        ConvLimits_MaxPlantIterations_optional&
        ConvLimits_MaxPlantIterations ();

        void
        ConvLimits_MaxPlantIterations (const ConvLimits_MaxPlantIterations_type& x);

        void
        ConvLimits_MaxPlantIterations (const ConvLimits_MaxPlantIterations_optional& x);

        // ProgramControl_NumberofThreadsAllowed
        //
        typedef ::xml_schema::int_ ProgramControl_NumberofThreadsAllowed_type;
        typedef ::xsd::cxx::tree::optional< ProgramControl_NumberofThreadsAllowed_type > ProgramControl_NumberofThreadsAllowed_optional;
        typedef ::xsd::cxx::tree::traits< ProgramControl_NumberofThreadsAllowed_type, char > ProgramControl_NumberofThreadsAllowed_traits;

        const ProgramControl_NumberofThreadsAllowed_optional&
        ProgramControl_NumberofThreadsAllowed () const;

        ProgramControl_NumberofThreadsAllowed_optional&
        ProgramControl_NumberofThreadsAllowed ();

        void
        ProgramControl_NumberofThreadsAllowed (const ProgramControl_NumberofThreadsAllowed_type& x);

        void
        ProgramControl_NumberofThreadsAllowed (const ProgramControl_NumberofThreadsAllowed_optional& x);

        // Constructors.
        //
        SimSimulationParameters_SimulationControl_Default ();

        SimSimulationParameters_SimulationControl_Default (const RefId_type&);

        SimSimulationParameters_SimulationControl_Default (const ::xercesc::DOMElement& e,
                                                           ::xml_schema::flags f = 0,
                                                           ::xml_schema::container* c = 0);

        SimSimulationParameters_SimulationControl_Default (const SimSimulationParameters_SimulationControl_Default& x,
                                                           ::xml_schema::flags f = 0,
                                                           ::xml_schema::container* c = 0);

        virtual SimSimulationParameters_SimulationControl_Default*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimSimulationParameters_SimulationControl_Default&
        operator= (const SimSimulationParameters_SimulationControl_Default& x);

        virtual 
        ~SimSimulationParameters_SimulationControl_Default ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimSimParams_DoZoneSizingCalc_optional SimSimParams_DoZoneSizingCalc_;
        SimSimParams_DoSysSizingCalc_optional SimSimParams_DoSysSizingCalc_;
        SimSimParams_DoPlantSizingCalc_optional SimSimParams_DoPlantSizingCalc_;
        SimSimParams_RunSimForSizingPeriods_optional SimSimParams_RunSimForSizingPeriods_;
        SimSimParams_RunSimForWeatherFileRunPeriods_optional SimSimParams_RunSimForWeatherFileRunPeriods_;
        Version_VersionIdentifier_optional Version_VersionIdentifier_;
        ShadowCalc_CalcMeth_optional ShadowCalc_CalcMeth_;
        ShadowCalc_CalcFreq_optional ShadowCalc_CalcFreq_;
        ShadowCalc_MaxFiguresShadowOverlapCalcs_optional ShadowCalc_MaxFiguresShadowOverlapCalcs_;
        ShadowCalc_PolygonClippingAlgorithm_optional ShadowCalc_PolygonClippingAlgorithm_;
        ShadowCalc_SkyDiffuseModAlgo_optional ShadowCalc_SkyDiffuseModAlgo_;
        ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_optional ZoneCapacitanceMult_ResearchSpecial_TempCapacityMult_;
        ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_optional ZoneCapacitanceMult_ResearchSpecial_HumidCapacityMult_;
        ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_optional ZoneCapacitanceMult_ResearchSpecial_CO2CapacityMult_;
        ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_optional ZoneCapacitanceMult_ResearchSpecial_GenContamCapMult_;
        ZoneAirContamBalance_CO2Concentration_optional ZoneAirContamBalance_CO2Concentration_;
        ZoneAirContamBalance_OutdrCO2ScheduleName_optional ZoneAirContamBalance_OutdrCO2ScheduleName_;
        ZoneAirContamBalance_GenContamConcentration_optional ZoneAirContamBalance_GenContamConcentration_;
        ZoneAirContamBalance_OutdoorGenContamSchedName_optional ZoneAirContamBalance_OutdoorGenContamSchedName_;
        Timestep_NumTimestepsPerHour_optional Timestep_NumTimestepsPerHour_;
        ConvLimits_MinSysTimestep_optional ConvLimits_MinSysTimestep_;
        ConvLimits_MaxHVACIterations_optional ConvLimits_MaxHVACIterations_;
        ConvLimits_MinPlantIterations_optional ConvLimits_MinPlantIterations_;
        ConvLimits_MaxPlantIterations_optional ConvLimits_MaxPlantIterations_;
        ProgramControl_NumberofThreadsAllowed_optional ProgramControl_NumberofThreadsAllowed_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_SIMULATION_PARAMETERS_SIMULATION_CONTROL_DEFAULT_HXX
