// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowCompoundEqmt_UnitaryLoopEqmt_Default.hxx"

#include "doublelist.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowCompoundEqmt_UnitaryLoopEqmt_Default
      // 

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_Name_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_Name () const
      {
        return this->SimFlowCompEqmt_Name_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_Name_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_Name ()
      {
        return this->SimFlowCompEqmt_Name_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_Name (const SimFlowCompEqmt_Name_type& x)
      {
        this->SimFlowCompEqmt_Name_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_Name (const SimFlowCompEqmt_Name_optional& x)
      {
        this->SimFlowCompEqmt_Name_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_Name (::std::auto_ptr< SimFlowCompEqmt_Name_type > x)
      {
        this->SimFlowCompEqmt_Name_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_AvailSchedName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_AvailSchedName () const
      {
        return this->SimFlowCompEqmt_AvailSchedName_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_AvailSchedName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_AvailSchedName ()
      {
        return this->SimFlowCompEqmt_AvailSchedName_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_AvailSchedName (const SimFlowCompEqmt_AvailSchedName_type& x)
      {
        this->SimFlowCompEqmt_AvailSchedName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_AvailSchedName (const SimFlowCompEqmt_AvailSchedName_optional& x)
      {
        this->SimFlowCompEqmt_AvailSchedName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_AvailSchedName (::std::auto_ptr< SimFlowCompEqmt_AvailSchedName_type > x)
      {
        this->SimFlowCompEqmt_AvailSchedName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_DehumidCntlType_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DehumidCntlType () const
      {
        return this->SimFlowCompEqmt_DehumidCntlType_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_DehumidCntlType_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DehumidCntlType ()
      {
        return this->SimFlowCompEqmt_DehumidCntlType_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DehumidCntlType (const SimFlowCompEqmt_DehumidCntlType_type& x)
      {
        this->SimFlowCompEqmt_DehumidCntlType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DehumidCntlType (const SimFlowCompEqmt_DehumidCntlType_optional& x)
      {
        this->SimFlowCompEqmt_DehumidCntlType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DehumidCntlType (::std::auto_ptr< SimFlowCompEqmt_DehumidCntlType_type > x)
      {
        this->SimFlowCompEqmt_DehumidCntlType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_AirInNodeName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_AirInNodeName () const
      {
        return this->SimFlowCompEqmt_AirInNodeName_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_AirInNodeName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_AirInNodeName ()
      {
        return this->SimFlowCompEqmt_AirInNodeName_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_AirInNodeName (const SimFlowCompEqmt_AirInNodeName_type& x)
      {
        this->SimFlowCompEqmt_AirInNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_AirInNodeName (const SimFlowCompEqmt_AirInNodeName_optional& x)
      {
        this->SimFlowCompEqmt_AirInNodeName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_AirInNodeName (::std::auto_ptr< SimFlowCompEqmt_AirInNodeName_type > x)
      {
        this->SimFlowCompEqmt_AirInNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_AirOutNodeName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_AirOutNodeName () const
      {
        return this->SimFlowCompEqmt_AirOutNodeName_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_AirOutNodeName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_AirOutNodeName ()
      {
        return this->SimFlowCompEqmt_AirOutNodeName_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_AirOutNodeName (const SimFlowCompEqmt_AirOutNodeName_type& x)
      {
        this->SimFlowCompEqmt_AirOutNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_AirOutNodeName (const SimFlowCompEqmt_AirOutNodeName_optional& x)
      {
        this->SimFlowCompEqmt_AirOutNodeName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_AirOutNodeName (::std::auto_ptr< SimFlowCompEqmt_AirOutNodeName_type > x)
      {
        this->SimFlowCompEqmt_AirOutNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_CoolingCoilObjType_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_CoolingCoilObjType () const
      {
        return this->SimFlowCompEqmt_CoolingCoilObjType_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_CoolingCoilObjType_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_CoolingCoilObjType ()
      {
        return this->SimFlowCompEqmt_CoolingCoilObjType_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_CoolingCoilObjType (const SimFlowCompEqmt_CoolingCoilObjType_type& x)
      {
        this->SimFlowCompEqmt_CoolingCoilObjType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_CoolingCoilObjType (const SimFlowCompEqmt_CoolingCoilObjType_optional& x)
      {
        this->SimFlowCompEqmt_CoolingCoilObjType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_CoolingCoilObjType (::std::auto_ptr< SimFlowCompEqmt_CoolingCoilObjType_type > x)
      {
        this->SimFlowCompEqmt_CoolingCoilObjType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_CoolingCoilName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_CoolingCoilName () const
      {
        return this->SimFlowCompEqmt_CoolingCoilName_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_CoolingCoilName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_CoolingCoilName ()
      {
        return this->SimFlowCompEqmt_CoolingCoilName_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_CoolingCoilName (const SimFlowCompEqmt_CoolingCoilName_type& x)
      {
        this->SimFlowCompEqmt_CoolingCoilName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_CoolingCoilName (const SimFlowCompEqmt_CoolingCoilName_optional& x)
      {
        this->SimFlowCompEqmt_CoolingCoilName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_CoolingCoilName (::std::auto_ptr< SimFlowCompEqmt_CoolingCoilName_type > x)
      {
        this->SimFlowCompEqmt_CoolingCoilName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_HeatingCoilObjType_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatingCoilObjType () const
      {
        return this->SimFlowCompEqmt_HeatingCoilObjType_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_HeatingCoilObjType_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatingCoilObjType ()
      {
        return this->SimFlowCompEqmt_HeatingCoilObjType_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatingCoilObjType (const SimFlowCompEqmt_HeatingCoilObjType_type& x)
      {
        this->SimFlowCompEqmt_HeatingCoilObjType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatingCoilObjType (const SimFlowCompEqmt_HeatingCoilObjType_optional& x)
      {
        this->SimFlowCompEqmt_HeatingCoilObjType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatingCoilObjType (::std::auto_ptr< SimFlowCompEqmt_HeatingCoilObjType_type > x)
      {
        this->SimFlowCompEqmt_HeatingCoilObjType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_HeatingCoilName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatingCoilName () const
      {
        return this->SimFlowCompEqmt_HeatingCoilName_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_HeatingCoilName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatingCoilName ()
      {
        return this->SimFlowCompEqmt_HeatingCoilName_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatingCoilName (const SimFlowCompEqmt_HeatingCoilName_type& x)
      {
        this->SimFlowCompEqmt_HeatingCoilName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatingCoilName (const SimFlowCompEqmt_HeatingCoilName_optional& x)
      {
        this->SimFlowCompEqmt_HeatingCoilName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatingCoilName (::std::auto_ptr< SimFlowCompEqmt_HeatingCoilName_type > x)
      {
        this->SimFlowCompEqmt_HeatingCoilName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFanOperatModeSchedName () const
      {
        return this->SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFanOperatModeSchedName ()
      {
        return this->SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFanOperatModeSchedName (const SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_type& x)
      {
        this->SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFanOperatModeSchedName (const SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_optional& x)
      {
        this->SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFanOperatModeSchedName (::std::auto_ptr< SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_type > x)
      {
        this->SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_FanPlacement_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_FanPlacement () const
      {
        return this->SimFlowCompEqmt_FanPlacement_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_FanPlacement_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_FanPlacement ()
      {
        return this->SimFlowCompEqmt_FanPlacement_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_FanPlacement (const SimFlowCompEqmt_FanPlacement_type& x)
      {
        this->SimFlowCompEqmt_FanPlacement_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_FanPlacement (const SimFlowCompEqmt_FanPlacement_optional& x)
      {
        this->SimFlowCompEqmt_FanPlacement_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_FanPlacement (::std::auto_ptr< SimFlowCompEqmt_FanPlacement_type > x)
      {
        this->SimFlowCompEqmt_FanPlacement_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp () const
      {
        return this->SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp ()
      {
        return this->SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp (const SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_type& x)
      {
        this->SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp (const SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_optional& x)
      {
        this->SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp () const
      {
        return this->SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp ()
      {
        return this->SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp (const SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_type& x)
      {
        this->SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp (const SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_optional& x)
      {
        this->SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplementalHeatingCoilObjType_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplementalHeatingCoilObjType () const
      {
        return this->SimFlowCompEqmt_SupplementalHeatingCoilObjType_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplementalHeatingCoilObjType_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplementalHeatingCoilObjType ()
      {
        return this->SimFlowCompEqmt_SupplementalHeatingCoilObjType_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplementalHeatingCoilObjType (const SimFlowCompEqmt_SupplementalHeatingCoilObjType_type& x)
      {
        this->SimFlowCompEqmt_SupplementalHeatingCoilObjType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplementalHeatingCoilObjType (const SimFlowCompEqmt_SupplementalHeatingCoilObjType_optional& x)
      {
        this->SimFlowCompEqmt_SupplementalHeatingCoilObjType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplementalHeatingCoilObjType (::std::auto_ptr< SimFlowCompEqmt_SupplementalHeatingCoilObjType_type > x)
      {
        this->SimFlowCompEqmt_SupplementalHeatingCoilObjType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplementalHeatingCoilName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplementalHeatingCoilName () const
      {
        return this->SimFlowCompEqmt_SupplementalHeatingCoilName_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplementalHeatingCoilName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplementalHeatingCoilName ()
      {
        return this->SimFlowCompEqmt_SupplementalHeatingCoilName_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplementalHeatingCoilName (const SimFlowCompEqmt_SupplementalHeatingCoilName_type& x)
      {
        this->SimFlowCompEqmt_SupplementalHeatingCoilName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplementalHeatingCoilName (const SimFlowCompEqmt_SupplementalHeatingCoilName_optional& x)
      {
        this->SimFlowCompEqmt_SupplementalHeatingCoilName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplementalHeatingCoilName (::std::auto_ptr< SimFlowCompEqmt_SupplementalHeatingCoilName_type > x)
      {
        this->SimFlowCompEqmt_SupplementalHeatingCoilName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp () const
      {
        return this->SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp ()
      {
        return this->SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp (const SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_type& x)
      {
        this->SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp (const SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_optional& x)
      {
        this->SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_MaxCyclingRate_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_MaxCyclingRate () const
      {
        return this->SimFlowCompEqmt_MaxCyclingRate_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_MaxCyclingRate_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_MaxCyclingRate ()
      {
        return this->SimFlowCompEqmt_MaxCyclingRate_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_MaxCyclingRate (const SimFlowCompEqmt_MaxCyclingRate_type& x)
      {
        this->SimFlowCompEqmt_MaxCyclingRate_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_MaxCyclingRate (const SimFlowCompEqmt_MaxCyclingRate_optional& x)
      {
        this->SimFlowCompEqmt_MaxCyclingRate_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_HeatPumpTimeConst_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatPumpTimeConst () const
      {
        return this->SimFlowCompEqmt_HeatPumpTimeConst_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_HeatPumpTimeConst_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatPumpTimeConst ()
      {
        return this->SimFlowCompEqmt_HeatPumpTimeConst_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatPumpTimeConst (const SimFlowCompEqmt_HeatPumpTimeConst_type& x)
      {
        this->SimFlowCompEqmt_HeatPumpTimeConst_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatPumpTimeConst (const SimFlowCompEqmt_HeatPumpTimeConst_optional& x)
      {
        this->SimFlowCompEqmt_HeatPumpTimeConst_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_FractOnCyclePwrUse_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_FractOnCyclePwrUse () const
      {
        return this->SimFlowCompEqmt_FractOnCyclePwrUse_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_FractOnCyclePwrUse_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_FractOnCyclePwrUse ()
      {
        return this->SimFlowCompEqmt_FractOnCyclePwrUse_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_FractOnCyclePwrUse (const SimFlowCompEqmt_FractOnCyclePwrUse_type& x)
      {
        this->SimFlowCompEqmt_FractOnCyclePwrUse_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_FractOnCyclePwrUse (const SimFlowCompEqmt_FractOnCyclePwrUse_optional& x)
      {
        this->SimFlowCompEqmt_FractOnCyclePwrUse_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_HeatPumpFanDelayTime_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatPumpFanDelayTime () const
      {
        return this->SimFlowCompEqmt_HeatPumpFanDelayTime_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_HeatPumpFanDelayTime_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatPumpFanDelayTime ()
      {
        return this->SimFlowCompEqmt_HeatPumpFanDelayTime_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatPumpFanDelayTime (const SimFlowCompEqmt_HeatPumpFanDelayTime_type& x)
      {
        this->SimFlowCompEqmt_HeatPumpFanDelayTime_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatPumpFanDelayTime (const SimFlowCompEqmt_HeatPumpFanDelayTime_optional& x)
      {
        this->SimFlowCompEqmt_HeatPumpFanDelayTime_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName () const
      {
        return this->SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName ()
      {
        return this->SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName (const SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_type& x)
      {
        this->SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName (const SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_optional& x)
      {
        this->SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName (::std::auto_ptr< SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_type > x)
      {
        this->SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplyFanName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyFanName () const
      {
        return this->SimFlowCompEqmt_SupplyFanName_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplyFanName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyFanName ()
      {
        return this->SimFlowCompEqmt_SupplyFanName_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyFanName (const SimFlowCompEqmt_SupplyFanName_type& x)
      {
        this->SimFlowCompEqmt_SupplyFanName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyFanName (const SimFlowCompEqmt_SupplyFanName_optional& x)
      {
        this->SimFlowCompEqmt_SupplyFanName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyFanName (::std::auto_ptr< SimFlowCompEqmt_SupplyFanName_type > x)
      {
        this->SimFlowCompEqmt_SupplyFanName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_MaxSupplyAirTemp_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_MaxSupplyAirTemp () const
      {
        return this->SimFlowCompEqmt_MaxSupplyAirTemp_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_MaxSupplyAirTemp_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_MaxSupplyAirTemp ()
      {
        return this->SimFlowCompEqmt_MaxSupplyAirTemp_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_MaxSupplyAirTemp (const SimFlowCompEqmt_MaxSupplyAirTemp_type& x)
      {
        this->SimFlowCompEqmt_MaxSupplyAirTemp_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_MaxSupplyAirTemp (const SimFlowCompEqmt_MaxSupplyAirTemp_optional& x)
      {
        this->SimFlowCompEqmt_MaxSupplyAirTemp_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_CntllingZoneOrThermostatLocation_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_CntllingZoneOrThermostatLocation () const
      {
        return this->SimFlowCompEqmt_CntllingZoneOrThermostatLocation_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_CntllingZoneOrThermostatLocation_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_CntllingZoneOrThermostatLocation ()
      {
        return this->SimFlowCompEqmt_CntllingZoneOrThermostatLocation_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_CntllingZoneOrThermostatLocation (const SimFlowCompEqmt_CntllingZoneOrThermostatLocation_type& x)
      {
        this->SimFlowCompEqmt_CntllingZoneOrThermostatLocation_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_CntllingZoneOrThermostatLocation (const SimFlowCompEqmt_CntllingZoneOrThermostatLocation_optional& x)
      {
        this->SimFlowCompEqmt_CntllingZoneOrThermostatLocation_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_CntllingZoneOrThermostatLocation (::std::auto_ptr< SimFlowCompEqmt_CntllingZoneOrThermostatLocation_type > x)
      {
        this->SimFlowCompEqmt_CntllingZoneOrThermostatLocation_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupFanObjectType_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupFanObjectType () const
      {
        return this->SimFlowCompEqmt_SupFanObjectType_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupFanObjectType_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupFanObjectType ()
      {
        return this->SimFlowCompEqmt_SupFanObjectType_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupFanObjectType (const SimFlowCompEqmt_SupFanObjectType_type& x)
      {
        this->SimFlowCompEqmt_SupFanObjectType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupFanObjectType (const SimFlowCompEqmt_SupFanObjectType_optional& x)
      {
        this->SimFlowCompEqmt_SupFanObjectType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupFanObjectType (::std::auto_ptr< SimFlowCompEqmt_SupFanObjectType_type > x)
      {
        this->SimFlowCompEqmt_SupFanObjectType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DesignHeatRecovWaterFlowRate () const
      {
        return this->SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DesignHeatRecovWaterFlowRate ()
      {
        return this->SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DesignHeatRecovWaterFlowRate (const SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_type& x)
      {
        this->SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DesignHeatRecovWaterFlowRate (const SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_optional& x)
      {
        this->SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_MaxTempForHeatRecov_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_MaxTempForHeatRecov () const
      {
        return this->SimFlowCompEqmt_MaxTempForHeatRecov_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_MaxTempForHeatRecov_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_MaxTempForHeatRecov ()
      {
        return this->SimFlowCompEqmt_MaxTempForHeatRecov_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_MaxTempForHeatRecov (const SimFlowCompEqmt_MaxTempForHeatRecov_type& x)
      {
        this->SimFlowCompEqmt_MaxTempForHeatRecov_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_MaxTempForHeatRecov (const SimFlowCompEqmt_MaxTempForHeatRecov_optional& x)
      {
        this->SimFlowCompEqmt_MaxTempForHeatRecov_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_HeatRecovWaterInletNodeName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatRecovWaterInletNodeName () const
      {
        return this->SimFlowCompEqmt_HeatRecovWaterInletNodeName_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_HeatRecovWaterInletNodeName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatRecovWaterInletNodeName ()
      {
        return this->SimFlowCompEqmt_HeatRecovWaterInletNodeName_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatRecovWaterInletNodeName (const SimFlowCompEqmt_HeatRecovWaterInletNodeName_type& x)
      {
        this->SimFlowCompEqmt_HeatRecovWaterInletNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatRecovWaterInletNodeName (const SimFlowCompEqmt_HeatRecovWaterInletNodeName_optional& x)
      {
        this->SimFlowCompEqmt_HeatRecovWaterInletNodeName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatRecovWaterInletNodeName (::std::auto_ptr< SimFlowCompEqmt_HeatRecovWaterInletNodeName_type > x)
      {
        this->SimFlowCompEqmt_HeatRecovWaterInletNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_HeatRecovWaterOutletNodeName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatRecovWaterOutletNodeName () const
      {
        return this->SimFlowCompEqmt_HeatRecovWaterOutletNodeName_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_HeatRecovWaterOutletNodeName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatRecovWaterOutletNodeName ()
      {
        return this->SimFlowCompEqmt_HeatRecovWaterOutletNodeName_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatRecovWaterOutletNodeName (const SimFlowCompEqmt_HeatRecovWaterOutletNodeName_type& x)
      {
        this->SimFlowCompEqmt_HeatRecovWaterOutletNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatRecovWaterOutletNodeName (const SimFlowCompEqmt_HeatRecovWaterOutletNodeName_optional& x)
      {
        this->SimFlowCompEqmt_HeatRecovWaterOutletNodeName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_HeatRecovWaterOutletNodeName (::std::auto_ptr< SimFlowCompEqmt_HeatRecovWaterOutletNodeName_type > x)
      {
        this->SimFlowCompEqmt_HeatRecovWaterOutletNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_CntlType_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_CntlType () const
      {
        return this->SimFlowCompEqmt_CntlType_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_CntlType_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_CntlType ()
      {
        return this->SimFlowCompEqmt_CntlType_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_CntlType (const SimFlowCompEqmt_CntlType_type& x)
      {
        this->SimFlowCompEqmt_CntlType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_CntlType (const SimFlowCompEqmt_CntlType_optional& x)
      {
        this->SimFlowCompEqmt_CntlType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_CntlType (::std::auto_ptr< SimFlowCompEqmt_CntlType_type > x)
      {
        this->SimFlowCompEqmt_CntlType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_DXHeatCoilSizingRatio_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DXHeatCoilSizingRatio () const
      {
        return this->SimFlowCompEqmt_DXHeatCoilSizingRatio_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_DXHeatCoilSizingRatio_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DXHeatCoilSizingRatio ()
      {
        return this->SimFlowCompEqmt_DXHeatCoilSizingRatio_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DXHeatCoilSizingRatio (const SimFlowCompEqmt_DXHeatCoilSizingRatio_type& x)
      {
        this->SimFlowCompEqmt_DXHeatCoilSizingRatio_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DXHeatCoilSizingRatio (const SimFlowCompEqmt_DXHeatCoilSizingRatio_optional& x)
      {
        this->SimFlowCompEqmt_DXHeatCoilSizingRatio_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_UseDOASDXCoolCoil_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_UseDOASDXCoolCoil () const
      {
        return this->SimFlowCompEqmt_UseDOASDXCoolCoil_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_UseDOASDXCoolCoil_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_UseDOASDXCoolCoil ()
      {
        return this->SimFlowCompEqmt_UseDOASDXCoolCoil_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_UseDOASDXCoolCoil (const SimFlowCompEqmt_UseDOASDXCoolCoil_type& x)
      {
        this->SimFlowCompEqmt_UseDOASDXCoolCoil_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_UseDOASDXCoolCoil (const SimFlowCompEqmt_UseDOASDXCoolCoil_optional& x)
      {
        this->SimFlowCompEqmt_UseDOASDXCoolCoil_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_UseDOASDXCoolCoil (::std::auto_ptr< SimFlowCompEqmt_UseDOASDXCoolCoil_type > x)
      {
        this->SimFlowCompEqmt_UseDOASDXCoolCoil_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp () const
      {
        return this->SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp ()
      {
        return this->SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp (const SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_type& x)
      {
        this->SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp (const SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_optional& x)
      {
        this->SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_LatentLoadCntrl_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_LatentLoadCntrl () const
      {
        return this->SimFlowCompEqmt_LatentLoadCntrl_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_LatentLoadCntrl_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_LatentLoadCntrl ()
      {
        return this->SimFlowCompEqmt_LatentLoadCntrl_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_LatentLoadCntrl (const SimFlowCompEqmt_LatentLoadCntrl_type& x)
      {
        this->SimFlowCompEqmt_LatentLoadCntrl_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_LatentLoadCntrl (const SimFlowCompEqmt_LatentLoadCntrl_optional& x)
      {
        this->SimFlowCompEqmt_LatentLoadCntrl_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_LatentLoadCntrl (::std::auto_ptr< SimFlowCompEqmt_LatentLoadCntrl_type > x)
      {
        this->SimFlowCompEqmt_LatentLoadCntrl_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps () const
      {
        return this->SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps ()
      {
        return this->SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps (const SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_type& x)
      {
        this->SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps (const SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_optional& x)
      {
        this->SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps (::std::auto_ptr< SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_type > x)
      {
        this->SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps () const
      {
        return this->SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps ()
      {
        return this->SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps (const SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_type& x)
      {
        this->SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps (const SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_optional& x)
      {
        this->SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate () const
      {
        return this->SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate ()
      {
        return this->SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate (const SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_type& x)
      {
        this->SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate (const SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_optional& x)
      {
        this->SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps () const
      {
        return this->SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps ()
      {
        return this->SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps (const SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_type& x)
      {
        this->SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps (const SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_optional& x)
      {
        this->SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps () const
      {
        return this->SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps ()
      {
        return this->SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps (const SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_type& x)
      {
        this->SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps (const SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_optional& x)
      {
        this->SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps (::std::auto_ptr< SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_type > x)
      {
        this->SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps () const
      {
        return this->SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps ()
      {
        return this->SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps (const SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_type& x)
      {
        this->SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps (const SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_optional& x)
      {
        this->SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate () const
      {
        return this->SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate ()
      {
        return this->SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate (const SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_type& x)
      {
        this->SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate (const SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_optional& x)
      {
        this->SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps () const
      {
        return this->SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps ()
      {
        return this->SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps (const SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_type& x)
      {
        this->SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps (const SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_optional& x)
      {
        this->SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq () const
      {
        return this->SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq ()
      {
        return this->SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq (const SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_type& x)
      {
        this->SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq (const SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_optional& x)
      {
        this->SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq (::std::auto_ptr< SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_type > x)
      {
        this->SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq () const
      {
        return this->SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq ()
      {
        return this->SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq (const SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_type& x)
      {
        this->SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq (const SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_optional& x)
      {
        this->SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq () const
      {
        return this->SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq ()
      {
        return this->SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq (const SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_type& x)
      {
        this->SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq (const SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_optional& x)
      {
        this->SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_AncilliaryOn_CycleElecPower_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_AncilliaryOn_CycleElecPower () const
      {
        return this->SimFlowCompEqmt_AncilliaryOn_CycleElecPower_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_AncilliaryOn_CycleElecPower_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_AncilliaryOn_CycleElecPower ()
      {
        return this->SimFlowCompEqmt_AncilliaryOn_CycleElecPower_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_AncilliaryOn_CycleElecPower (const SimFlowCompEqmt_AncilliaryOn_CycleElecPower_type& x)
      {
        this->SimFlowCompEqmt_AncilliaryOn_CycleElecPower_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_AncilliaryOn_CycleElecPower (const SimFlowCompEqmt_AncilliaryOn_CycleElecPower_optional& x)
      {
        this->SimFlowCompEqmt_AncilliaryOn_CycleElecPower_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_AncilliaryOff_CycleElecPower_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_AncilliaryOff_CycleElecPower () const
      {
        return this->SimFlowCompEqmt_AncilliaryOff_CycleElecPower_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_AncilliaryOff_CycleElecPower_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_AncilliaryOff_CycleElecPower ()
      {
        return this->SimFlowCompEqmt_AncilliaryOff_CycleElecPower_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_AncilliaryOff_CycleElecPower (const SimFlowCompEqmt_AncilliaryOff_CycleElecPower_type& x)
      {
        this->SimFlowCompEqmt_AncilliaryOff_CycleElecPower_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_AncilliaryOff_CycleElecPower (const SimFlowCompEqmt_AncilliaryOff_CycleElecPower_optional& x)
      {
        this->SimFlowCompEqmt_AncilliaryOff_CycleElecPower_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType () const
      {
        return this->SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType ()
      {
        return this->SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType (const SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_type& x)
      {
        this->SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType (const SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_optional& x)
      {
        this->SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType (::std::auto_ptr< SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_type > x)
      {
        this->SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName () const
      {
        return this->SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName ()
      {
        return this->SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName (const SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_type& x)
      {
        this->SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName (const SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_optional& x)
      {
        this->SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName (::std::auto_ptr< SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_type > x)
      {
        this->SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::UnitarySystemPerformance_HeatPump_Multispeed_Name_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      UnitarySystemPerformance_HeatPump_Multispeed_Name () const
      {
        return this->UnitarySystemPerformance_HeatPump_Multispeed_Name_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::UnitarySystemPerformance_HeatPump_Multispeed_Name_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      UnitarySystemPerformance_HeatPump_Multispeed_Name ()
      {
        return this->UnitarySystemPerformance_HeatPump_Multispeed_Name_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      UnitarySystemPerformance_HeatPump_Multispeed_Name (const UnitarySystemPerformance_HeatPump_Multispeed_Name_type& x)
      {
        this->UnitarySystemPerformance_HeatPump_Multispeed_Name_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      UnitarySystemPerformance_HeatPump_Multispeed_Name (const UnitarySystemPerformance_HeatPump_Multispeed_Name_optional& x)
      {
        this->UnitarySystemPerformance_HeatPump_Multispeed_Name_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      UnitarySystemPerformance_HeatPump_Multispeed_Name (::std::auto_ptr< UnitarySystemPerformance_HeatPump_Multispeed_Name_type > x)
      {
        this->UnitarySystemPerformance_HeatPump_Multispeed_Name_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating () const
      {
        return this->UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating ()
      {
        return this->UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating (const UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_type& x)
      {
        this->UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating (const UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_optional& x)
      {
        this->UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling () const
      {
        return this->UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling ()
      {
        return this->UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling (const UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_type& x)
      {
        this->UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling (const UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_optional& x)
      {
        this->UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps () const
      {
        return this->UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps ()
      {
        return this->UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps (const UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_type& x)
      {
        this->UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps (const UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_optional& x)
      {
        this->UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps (::std::auto_ptr< UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_type > x)
      {
        this->UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps () const
      {
        return this->UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps ()
      {
        return this->UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps (const UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_type& x)
      {
        this->UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps (const UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_optional& x)
      {
        this->UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps (::std::auto_ptr< UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_type > x)
      {
        this->UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowCompoundEqmt_UnitaryLoopEqmt_Default
      //

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default ()
      : ::schema::simxml::MepModel::SimFlowCompoundEqmt_UnitaryLoopEqmt (),
        SimFlowCompEqmt_Name_ (this),
        SimFlowCompEqmt_AvailSchedName_ (this),
        SimFlowCompEqmt_DehumidCntlType_ (this),
        SimFlowCompEqmt_AirInNodeName_ (this),
        SimFlowCompEqmt_AirOutNodeName_ (this),
        SimFlowCompEqmt_CoolingCoilObjType_ (this),
        SimFlowCompEqmt_CoolingCoilName_ (this),
        SimFlowCompEqmt_HeatingCoilObjType_ (this),
        SimFlowCompEqmt_HeatingCoilName_ (this),
        SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_ (this),
        SimFlowCompEqmt_FanPlacement_ (this),
        SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_ (this),
        SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_ (this),
        SimFlowCompEqmt_SupplementalHeatingCoilObjType_ (this),
        SimFlowCompEqmt_SupplementalHeatingCoilName_ (this),
        SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_ (this),
        SimFlowCompEqmt_MaxCyclingRate_ (this),
        SimFlowCompEqmt_HeatPumpTimeConst_ (this),
        SimFlowCompEqmt_FractOnCyclePwrUse_ (this),
        SimFlowCompEqmt_HeatPumpFanDelayTime_ (this),
        SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_ (this),
        SimFlowCompEqmt_SupplyFanName_ (this),
        SimFlowCompEqmt_MaxSupplyAirTemp_ (this),
        SimFlowCompEqmt_CntllingZoneOrThermostatLocation_ (this),
        SimFlowCompEqmt_SupFanObjectType_ (this),
        SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_ (this),
        SimFlowCompEqmt_MaxTempForHeatRecov_ (this),
        SimFlowCompEqmt_HeatRecovWaterInletNodeName_ (this),
        SimFlowCompEqmt_HeatRecovWaterOutletNodeName_ (this),
        SimFlowCompEqmt_CntlType_ (this),
        SimFlowCompEqmt_DXHeatCoilSizingRatio_ (this),
        SimFlowCompEqmt_UseDOASDXCoolCoil_ (this),
        SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_ (this),
        SimFlowCompEqmt_LatentLoadCntrl_ (this),
        SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_ (this),
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_ (this),
        SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_ (this),
        SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_ (this),
        SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_ (this),
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_ (this),
        SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_ (this),
        SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_ (this),
        SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_ (this),
        SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_ (this),
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_ (this),
        SimFlowCompEqmt_AncilliaryOn_CycleElecPower_ (this),
        SimFlowCompEqmt_AncilliaryOff_CycleElecPower_ (this),
        SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_ (this),
        SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_ (this),
        UnitarySystemPerformance_HeatPump_Multispeed_Name_ (this),
        UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_ (this),
        UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_ (this),
        UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_ (this),
        UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_ (this)
      {
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowCompoundEqmt_UnitaryLoopEqmt (RefId),
        SimFlowCompEqmt_Name_ (this),
        SimFlowCompEqmt_AvailSchedName_ (this),
        SimFlowCompEqmt_DehumidCntlType_ (this),
        SimFlowCompEqmt_AirInNodeName_ (this),
        SimFlowCompEqmt_AirOutNodeName_ (this),
        SimFlowCompEqmt_CoolingCoilObjType_ (this),
        SimFlowCompEqmt_CoolingCoilName_ (this),
        SimFlowCompEqmt_HeatingCoilObjType_ (this),
        SimFlowCompEqmt_HeatingCoilName_ (this),
        SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_ (this),
        SimFlowCompEqmt_FanPlacement_ (this),
        SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_ (this),
        SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_ (this),
        SimFlowCompEqmt_SupplementalHeatingCoilObjType_ (this),
        SimFlowCompEqmt_SupplementalHeatingCoilName_ (this),
        SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_ (this),
        SimFlowCompEqmt_MaxCyclingRate_ (this),
        SimFlowCompEqmt_HeatPumpTimeConst_ (this),
        SimFlowCompEqmt_FractOnCyclePwrUse_ (this),
        SimFlowCompEqmt_HeatPumpFanDelayTime_ (this),
        SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_ (this),
        SimFlowCompEqmt_SupplyFanName_ (this),
        SimFlowCompEqmt_MaxSupplyAirTemp_ (this),
        SimFlowCompEqmt_CntllingZoneOrThermostatLocation_ (this),
        SimFlowCompEqmt_SupFanObjectType_ (this),
        SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_ (this),
        SimFlowCompEqmt_MaxTempForHeatRecov_ (this),
        SimFlowCompEqmt_HeatRecovWaterInletNodeName_ (this),
        SimFlowCompEqmt_HeatRecovWaterOutletNodeName_ (this),
        SimFlowCompEqmt_CntlType_ (this),
        SimFlowCompEqmt_DXHeatCoilSizingRatio_ (this),
        SimFlowCompEqmt_UseDOASDXCoolCoil_ (this),
        SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_ (this),
        SimFlowCompEqmt_LatentLoadCntrl_ (this),
        SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_ (this),
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_ (this),
        SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_ (this),
        SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_ (this),
        SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_ (this),
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_ (this),
        SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_ (this),
        SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_ (this),
        SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_ (this),
        SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_ (this),
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_ (this),
        SimFlowCompEqmt_AncilliaryOn_CycleElecPower_ (this),
        SimFlowCompEqmt_AncilliaryOff_CycleElecPower_ (this),
        SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_ (this),
        SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_ (this),
        UnitarySystemPerformance_HeatPump_Multispeed_Name_ (this),
        UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_ (this),
        UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_ (this),
        UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_ (this),
        UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_ (this)
      {
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default (const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default& x,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowCompoundEqmt_UnitaryLoopEqmt (x, f, c),
        SimFlowCompEqmt_Name_ (x.SimFlowCompEqmt_Name_, f, this),
        SimFlowCompEqmt_AvailSchedName_ (x.SimFlowCompEqmt_AvailSchedName_, f, this),
        SimFlowCompEqmt_DehumidCntlType_ (x.SimFlowCompEqmt_DehumidCntlType_, f, this),
        SimFlowCompEqmt_AirInNodeName_ (x.SimFlowCompEqmt_AirInNodeName_, f, this),
        SimFlowCompEqmt_AirOutNodeName_ (x.SimFlowCompEqmt_AirOutNodeName_, f, this),
        SimFlowCompEqmt_CoolingCoilObjType_ (x.SimFlowCompEqmt_CoolingCoilObjType_, f, this),
        SimFlowCompEqmt_CoolingCoilName_ (x.SimFlowCompEqmt_CoolingCoilName_, f, this),
        SimFlowCompEqmt_HeatingCoilObjType_ (x.SimFlowCompEqmt_HeatingCoilObjType_, f, this),
        SimFlowCompEqmt_HeatingCoilName_ (x.SimFlowCompEqmt_HeatingCoilName_, f, this),
        SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_ (x.SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_, f, this),
        SimFlowCompEqmt_FanPlacement_ (x.SimFlowCompEqmt_FanPlacement_, f, this),
        SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_ (x.SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_, f, this),
        SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_ (x.SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_, f, this),
        SimFlowCompEqmt_SupplementalHeatingCoilObjType_ (x.SimFlowCompEqmt_SupplementalHeatingCoilObjType_, f, this),
        SimFlowCompEqmt_SupplementalHeatingCoilName_ (x.SimFlowCompEqmt_SupplementalHeatingCoilName_, f, this),
        SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_ (x.SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_, f, this),
        SimFlowCompEqmt_MaxCyclingRate_ (x.SimFlowCompEqmt_MaxCyclingRate_, f, this),
        SimFlowCompEqmt_HeatPumpTimeConst_ (x.SimFlowCompEqmt_HeatPumpTimeConst_, f, this),
        SimFlowCompEqmt_FractOnCyclePwrUse_ (x.SimFlowCompEqmt_FractOnCyclePwrUse_, f, this),
        SimFlowCompEqmt_HeatPumpFanDelayTime_ (x.SimFlowCompEqmt_HeatPumpFanDelayTime_, f, this),
        SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_ (x.SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_, f, this),
        SimFlowCompEqmt_SupplyFanName_ (x.SimFlowCompEqmt_SupplyFanName_, f, this),
        SimFlowCompEqmt_MaxSupplyAirTemp_ (x.SimFlowCompEqmt_MaxSupplyAirTemp_, f, this),
        SimFlowCompEqmt_CntllingZoneOrThermostatLocation_ (x.SimFlowCompEqmt_CntllingZoneOrThermostatLocation_, f, this),
        SimFlowCompEqmt_SupFanObjectType_ (x.SimFlowCompEqmt_SupFanObjectType_, f, this),
        SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_ (x.SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_, f, this),
        SimFlowCompEqmt_MaxTempForHeatRecov_ (x.SimFlowCompEqmt_MaxTempForHeatRecov_, f, this),
        SimFlowCompEqmt_HeatRecovWaterInletNodeName_ (x.SimFlowCompEqmt_HeatRecovWaterInletNodeName_, f, this),
        SimFlowCompEqmt_HeatRecovWaterOutletNodeName_ (x.SimFlowCompEqmt_HeatRecovWaterOutletNodeName_, f, this),
        SimFlowCompEqmt_CntlType_ (x.SimFlowCompEqmt_CntlType_, f, this),
        SimFlowCompEqmt_DXHeatCoilSizingRatio_ (x.SimFlowCompEqmt_DXHeatCoilSizingRatio_, f, this),
        SimFlowCompEqmt_UseDOASDXCoolCoil_ (x.SimFlowCompEqmt_UseDOASDXCoolCoil_, f, this),
        SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_ (x.SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_, f, this),
        SimFlowCompEqmt_LatentLoadCntrl_ (x.SimFlowCompEqmt_LatentLoadCntrl_, f, this),
        SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_ (x.SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_, f, this),
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_ (x.SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_, f, this),
        SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_ (x.SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_, f, this),
        SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_ (x.SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_, f, this),
        SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_ (x.SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_, f, this),
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_ (x.SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_, f, this),
        SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_ (x.SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_, f, this),
        SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_ (x.SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_, f, this),
        SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_ (x.SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_, f, this),
        SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_ (x.SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_, f, this),
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_ (x.SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_, f, this),
        SimFlowCompEqmt_AncilliaryOn_CycleElecPower_ (x.SimFlowCompEqmt_AncilliaryOn_CycleElecPower_, f, this),
        SimFlowCompEqmt_AncilliaryOff_CycleElecPower_ (x.SimFlowCompEqmt_AncilliaryOff_CycleElecPower_, f, this),
        SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_ (x.SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_, f, this),
        SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_ (x.SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_, f, this),
        UnitarySystemPerformance_HeatPump_Multispeed_Name_ (x.UnitarySystemPerformance_HeatPump_Multispeed_Name_, f, this),
        UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_ (x.UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_, f, this),
        UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_ (x.UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_, f, this),
        UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_ (x.UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_, f, this),
        UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_ (x.UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_, f, this)
      {
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowCompoundEqmt_UnitaryLoopEqmt (e, f | ::xml_schema::flags::base, c),
        SimFlowCompEqmt_Name_ (this),
        SimFlowCompEqmt_AvailSchedName_ (this),
        SimFlowCompEqmt_DehumidCntlType_ (this),
        SimFlowCompEqmt_AirInNodeName_ (this),
        SimFlowCompEqmt_AirOutNodeName_ (this),
        SimFlowCompEqmt_CoolingCoilObjType_ (this),
        SimFlowCompEqmt_CoolingCoilName_ (this),
        SimFlowCompEqmt_HeatingCoilObjType_ (this),
        SimFlowCompEqmt_HeatingCoilName_ (this),
        SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_ (this),
        SimFlowCompEqmt_FanPlacement_ (this),
        SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_ (this),
        SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_ (this),
        SimFlowCompEqmt_SupplementalHeatingCoilObjType_ (this),
        SimFlowCompEqmt_SupplementalHeatingCoilName_ (this),
        SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_ (this),
        SimFlowCompEqmt_MaxCyclingRate_ (this),
        SimFlowCompEqmt_HeatPumpTimeConst_ (this),
        SimFlowCompEqmt_FractOnCyclePwrUse_ (this),
        SimFlowCompEqmt_HeatPumpFanDelayTime_ (this),
        SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_ (this),
        SimFlowCompEqmt_SupplyFanName_ (this),
        SimFlowCompEqmt_MaxSupplyAirTemp_ (this),
        SimFlowCompEqmt_CntllingZoneOrThermostatLocation_ (this),
        SimFlowCompEqmt_SupFanObjectType_ (this),
        SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_ (this),
        SimFlowCompEqmt_MaxTempForHeatRecov_ (this),
        SimFlowCompEqmt_HeatRecovWaterInletNodeName_ (this),
        SimFlowCompEqmt_HeatRecovWaterOutletNodeName_ (this),
        SimFlowCompEqmt_CntlType_ (this),
        SimFlowCompEqmt_DXHeatCoilSizingRatio_ (this),
        SimFlowCompEqmt_UseDOASDXCoolCoil_ (this),
        SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_ (this),
        SimFlowCompEqmt_LatentLoadCntrl_ (this),
        SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_ (this),
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_ (this),
        SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_ (this),
        SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_ (this),
        SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_ (this),
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_ (this),
        SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_ (this),
        SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_ (this),
        SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_ (this),
        SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_ (this),
        SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_ (this),
        SimFlowCompEqmt_AncilliaryOn_CycleElecPower_ (this),
        SimFlowCompEqmt_AncilliaryOff_CycleElecPower_ (this),
        SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_ (this),
        SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_ (this),
        UnitarySystemPerformance_HeatPump_Multispeed_Name_ (this),
        UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_ (this),
        UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_ (this),
        UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_ (this),
        UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowCompoundEqmt_UnitaryLoopEqmt::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowCompEqmt_Name
          //
          if (n.name () == "SimFlowCompEqmt_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_Name_type > r (
              SimFlowCompEqmt_Name_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_Name_)
            {
              this->SimFlowCompEqmt_Name_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_AvailSchedName
          //
          if (n.name () == "SimFlowCompEqmt_AvailSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_AvailSchedName_type > r (
              SimFlowCompEqmt_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_AvailSchedName_)
            {
              this->SimFlowCompEqmt_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_DehumidCntlType
          //
          if (n.name () == "SimFlowCompEqmt_DehumidCntlType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_DehumidCntlType_type > r (
              SimFlowCompEqmt_DehumidCntlType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_DehumidCntlType_)
            {
              this->SimFlowCompEqmt_DehumidCntlType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_AirInNodeName
          //
          if (n.name () == "SimFlowCompEqmt_AirInNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_AirInNodeName_type > r (
              SimFlowCompEqmt_AirInNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_AirInNodeName_)
            {
              this->SimFlowCompEqmt_AirInNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_AirOutNodeName
          //
          if (n.name () == "SimFlowCompEqmt_AirOutNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_AirOutNodeName_type > r (
              SimFlowCompEqmt_AirOutNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_AirOutNodeName_)
            {
              this->SimFlowCompEqmt_AirOutNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_CoolingCoilObjType
          //
          if (n.name () == "SimFlowCompEqmt_CoolingCoilObjType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_CoolingCoilObjType_type > r (
              SimFlowCompEqmt_CoolingCoilObjType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_CoolingCoilObjType_)
            {
              this->SimFlowCompEqmt_CoolingCoilObjType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_CoolingCoilName
          //
          if (n.name () == "SimFlowCompEqmt_CoolingCoilName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_CoolingCoilName_type > r (
              SimFlowCompEqmt_CoolingCoilName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_CoolingCoilName_)
            {
              this->SimFlowCompEqmt_CoolingCoilName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_HeatingCoilObjType
          //
          if (n.name () == "SimFlowCompEqmt_HeatingCoilObjType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_HeatingCoilObjType_type > r (
              SimFlowCompEqmt_HeatingCoilObjType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_HeatingCoilObjType_)
            {
              this->SimFlowCompEqmt_HeatingCoilObjType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_HeatingCoilName
          //
          if (n.name () == "SimFlowCompEqmt_HeatingCoilName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_HeatingCoilName_type > r (
              SimFlowCompEqmt_HeatingCoilName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_HeatingCoilName_)
            {
              this->SimFlowCompEqmt_HeatingCoilName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_SupplyAirFanOperatModeSchedName
          //
          if (n.name () == "SimFlowCompEqmt_SupplyAirFanOperatModeSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_type > r (
              SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_)
            {
              this->SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_FanPlacement
          //
          if (n.name () == "SimFlowCompEqmt_FanPlacement" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_FanPlacement_type > r (
              SimFlowCompEqmt_FanPlacement_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_FanPlacement_)
            {
              this->SimFlowCompEqmt_FanPlacement_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp
          //
          if (n.name () == "SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_)
            {
              this->SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_.set (SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp
          //
          if (n.name () == "SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_)
            {
              this->SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_.set (SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_SupplementalHeatingCoilObjType
          //
          if (n.name () == "SimFlowCompEqmt_SupplementalHeatingCoilObjType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_SupplementalHeatingCoilObjType_type > r (
              SimFlowCompEqmt_SupplementalHeatingCoilObjType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_SupplementalHeatingCoilObjType_)
            {
              this->SimFlowCompEqmt_SupplementalHeatingCoilObjType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_SupplementalHeatingCoilName
          //
          if (n.name () == "SimFlowCompEqmt_SupplementalHeatingCoilName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_SupplementalHeatingCoilName_type > r (
              SimFlowCompEqmt_SupplementalHeatingCoilName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_SupplementalHeatingCoilName_)
            {
              this->SimFlowCompEqmt_SupplementalHeatingCoilName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp
          //
          if (n.name () == "SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_)
            {
              this->SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_.set (SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_MaxCyclingRate
          //
          if (n.name () == "SimFlowCompEqmt_MaxCyclingRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_MaxCyclingRate_)
            {
              this->SimFlowCompEqmt_MaxCyclingRate_.set (SimFlowCompEqmt_MaxCyclingRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_HeatPumpTimeConst
          //
          if (n.name () == "SimFlowCompEqmt_HeatPumpTimeConst" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_HeatPumpTimeConst_)
            {
              this->SimFlowCompEqmt_HeatPumpTimeConst_.set (SimFlowCompEqmt_HeatPumpTimeConst_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_FractOnCyclePwrUse
          //
          if (n.name () == "SimFlowCompEqmt_FractOnCyclePwrUse" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_FractOnCyclePwrUse_)
            {
              this->SimFlowCompEqmt_FractOnCyclePwrUse_.set (SimFlowCompEqmt_FractOnCyclePwrUse_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_HeatPumpFanDelayTime
          //
          if (n.name () == "SimFlowCompEqmt_HeatPumpFanDelayTime" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_HeatPumpFanDelayTime_)
            {
              this->SimFlowCompEqmt_HeatPumpFanDelayTime_.set (SimFlowCompEqmt_HeatPumpFanDelayTime_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName
          //
          if (n.name () == "SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_type > r (
              SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_)
            {
              this->SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_SupplyFanName
          //
          if (n.name () == "SimFlowCompEqmt_SupplyFanName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_SupplyFanName_type > r (
              SimFlowCompEqmt_SupplyFanName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_SupplyFanName_)
            {
              this->SimFlowCompEqmt_SupplyFanName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_MaxSupplyAirTemp
          //
          if (n.name () == "SimFlowCompEqmt_MaxSupplyAirTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_MaxSupplyAirTemp_)
            {
              this->SimFlowCompEqmt_MaxSupplyAirTemp_.set (SimFlowCompEqmt_MaxSupplyAirTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_CntllingZoneOrThermostatLocation
          //
          if (n.name () == "SimFlowCompEqmt_CntllingZoneOrThermostatLocation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_CntllingZoneOrThermostatLocation_type > r (
              SimFlowCompEqmt_CntllingZoneOrThermostatLocation_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_CntllingZoneOrThermostatLocation_)
            {
              this->SimFlowCompEqmt_CntllingZoneOrThermostatLocation_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_SupFanObjectType
          //
          if (n.name () == "SimFlowCompEqmt_SupFanObjectType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_SupFanObjectType_type > r (
              SimFlowCompEqmt_SupFanObjectType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_SupFanObjectType_)
            {
              this->SimFlowCompEqmt_SupFanObjectType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_DesignHeatRecovWaterFlowRate
          //
          if (n.name () == "SimFlowCompEqmt_DesignHeatRecovWaterFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_)
            {
              this->SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_.set (SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_MaxTempForHeatRecov
          //
          if (n.name () == "SimFlowCompEqmt_MaxTempForHeatRecov" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_MaxTempForHeatRecov_)
            {
              this->SimFlowCompEqmt_MaxTempForHeatRecov_.set (SimFlowCompEqmt_MaxTempForHeatRecov_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_HeatRecovWaterInletNodeName
          //
          if (n.name () == "SimFlowCompEqmt_HeatRecovWaterInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_HeatRecovWaterInletNodeName_type > r (
              SimFlowCompEqmt_HeatRecovWaterInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_HeatRecovWaterInletNodeName_)
            {
              this->SimFlowCompEqmt_HeatRecovWaterInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_HeatRecovWaterOutletNodeName
          //
          if (n.name () == "SimFlowCompEqmt_HeatRecovWaterOutletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_HeatRecovWaterOutletNodeName_type > r (
              SimFlowCompEqmt_HeatRecovWaterOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_HeatRecovWaterOutletNodeName_)
            {
              this->SimFlowCompEqmt_HeatRecovWaterOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_CntlType
          //
          if (n.name () == "SimFlowCompEqmt_CntlType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_CntlType_type > r (
              SimFlowCompEqmt_CntlType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_CntlType_)
            {
              this->SimFlowCompEqmt_CntlType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_DXHeatCoilSizingRatio
          //
          if (n.name () == "SimFlowCompEqmt_DXHeatCoilSizingRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_DXHeatCoilSizingRatio_)
            {
              this->SimFlowCompEqmt_DXHeatCoilSizingRatio_.set (SimFlowCompEqmt_DXHeatCoilSizingRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_UseDOASDXCoolCoil
          //
          if (n.name () == "SimFlowCompEqmt_UseDOASDXCoolCoil" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_UseDOASDXCoolCoil_type > r (
              SimFlowCompEqmt_UseDOASDXCoolCoil_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_UseDOASDXCoolCoil_)
            {
              this->SimFlowCompEqmt_UseDOASDXCoolCoil_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp
          //
          if (n.name () == "SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_)
            {
              this->SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_.set (SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_LatentLoadCntrl
          //
          if (n.name () == "SimFlowCompEqmt_LatentLoadCntrl" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_LatentLoadCntrl_type > r (
              SimFlowCompEqmt_LatentLoadCntrl_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_LatentLoadCntrl_)
            {
              this->SimFlowCompEqmt_LatentLoadCntrl_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps
          //
          if (n.name () == "SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_type > r (
              SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_)
            {
              this->SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps
          //
          if (n.name () == "SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_)
            {
              this->SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_.set (SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate
          //
          if (n.name () == "SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_)
            {
              this->SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_.set (SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps
          //
          if (n.name () == "SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_)
            {
              this->SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_.set (SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps
          //
          if (n.name () == "SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_type > r (
              SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_)
            {
              this->SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps
          //
          if (n.name () == "SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_)
            {
              this->SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_.set (SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate
          //
          if (n.name () == "SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_)
            {
              this->SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_.set (SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps
          //
          if (n.name () == "SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_)
            {
              this->SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_.set (SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq
          //
          if (n.name () == "SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_type > r (
              SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_)
            {
              this->SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq
          //
          if (n.name () == "SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_)
            {
              this->SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_.set (SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq
          //
          if (n.name () == "SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_)
            {
              this->SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_.set (SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_AncilliaryOn_CycleElecPower
          //
          if (n.name () == "SimFlowCompEqmt_AncilliaryOn_CycleElecPower" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_AncilliaryOn_CycleElecPower_)
            {
              this->SimFlowCompEqmt_AncilliaryOn_CycleElecPower_.set (SimFlowCompEqmt_AncilliaryOn_CycleElecPower_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_AncilliaryOff_CycleElecPower
          //
          if (n.name () == "SimFlowCompEqmt_AncilliaryOff_CycleElecPower" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowCompEqmt_AncilliaryOff_CycleElecPower_)
            {
              this->SimFlowCompEqmt_AncilliaryOff_CycleElecPower_.set (SimFlowCompEqmt_AncilliaryOff_CycleElecPower_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType
          //
          if (n.name () == "SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_type > r (
              SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_)
            {
              this->SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName
          //
          if (n.name () == "SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_type > r (
              SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_)
            {
              this->SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_.set (r);
              continue;
            }
          }

          // UnitarySystemPerformance_HeatPump_Multispeed_Name
          //
          if (n.name () == "UnitarySystemPerformance_HeatPump_Multispeed_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< UnitarySystemPerformance_HeatPump_Multispeed_Name_type > r (
              UnitarySystemPerformance_HeatPump_Multispeed_Name_traits::create (i, f, this));

            if (!this->UnitarySystemPerformance_HeatPump_Multispeed_Name_)
            {
              this->UnitarySystemPerformance_HeatPump_Multispeed_Name_.set (r);
              continue;
            }
          }

          // UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating
          //
          if (n.name () == "UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_)
            {
              this->UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_.set (UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_traits::create (i, f, this));
              continue;
            }
          }

          // UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling
          //
          if (n.name () == "UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_)
            {
              this->UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_.set (UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_traits::create (i, f, this));
              continue;
            }
          }

          // UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps
          //
          if (n.name () == "UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_type > r (
              UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_traits::create (i, f, this));

            if (!this->UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_)
            {
              this->UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_.set (r);
              continue;
            }
          }

          // UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps
          //
          if (n.name () == "UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_type > r (
              UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_traits::create (i, f, this));

            if (!this->UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_)
            {
              this->UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default* SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowCompoundEqmt_UnitaryLoopEqmt_Default (*this, f, c);
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default& SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      operator= (const SimFlowCompoundEqmt_UnitaryLoopEqmt_Default& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowCompoundEqmt_UnitaryLoopEqmt& > (*this) = x;
          this->SimFlowCompEqmt_Name_ = x.SimFlowCompEqmt_Name_;
          this->SimFlowCompEqmt_AvailSchedName_ = x.SimFlowCompEqmt_AvailSchedName_;
          this->SimFlowCompEqmt_DehumidCntlType_ = x.SimFlowCompEqmt_DehumidCntlType_;
          this->SimFlowCompEqmt_AirInNodeName_ = x.SimFlowCompEqmt_AirInNodeName_;
          this->SimFlowCompEqmt_AirOutNodeName_ = x.SimFlowCompEqmt_AirOutNodeName_;
          this->SimFlowCompEqmt_CoolingCoilObjType_ = x.SimFlowCompEqmt_CoolingCoilObjType_;
          this->SimFlowCompEqmt_CoolingCoilName_ = x.SimFlowCompEqmt_CoolingCoilName_;
          this->SimFlowCompEqmt_HeatingCoilObjType_ = x.SimFlowCompEqmt_HeatingCoilObjType_;
          this->SimFlowCompEqmt_HeatingCoilName_ = x.SimFlowCompEqmt_HeatingCoilName_;
          this->SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_ = x.SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_;
          this->SimFlowCompEqmt_FanPlacement_ = x.SimFlowCompEqmt_FanPlacement_;
          this->SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_ = x.SimFlowCompEqmt_SupplyAirFlowRateDuringCoolingOp_;
          this->SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_ = x.SimFlowCompEqmt_SupplyAirFlowRateDuringHeatingOp_;
          this->SimFlowCompEqmt_SupplementalHeatingCoilObjType_ = x.SimFlowCompEqmt_SupplementalHeatingCoilObjType_;
          this->SimFlowCompEqmt_SupplementalHeatingCoilName_ = x.SimFlowCompEqmt_SupplementalHeatingCoilName_;
          this->SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_ = x.SimFlowCompEqmt_MaxOutdrDryBulbTempForSupplementalHeatOp_;
          this->SimFlowCompEqmt_MaxCyclingRate_ = x.SimFlowCompEqmt_MaxCyclingRate_;
          this->SimFlowCompEqmt_HeatPumpTimeConst_ = x.SimFlowCompEqmt_HeatPumpTimeConst_;
          this->SimFlowCompEqmt_FractOnCyclePwrUse_ = x.SimFlowCompEqmt_FractOnCyclePwrUse_;
          this->SimFlowCompEqmt_HeatPumpFanDelayTime_ = x.SimFlowCompEqmt_HeatPumpFanDelayTime_;
          this->SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_ = x.SimFlowCompEqmt_OutdrDryBulbTempSensorNodeName_;
          this->SimFlowCompEqmt_SupplyFanName_ = x.SimFlowCompEqmt_SupplyFanName_;
          this->SimFlowCompEqmt_MaxSupplyAirTemp_ = x.SimFlowCompEqmt_MaxSupplyAirTemp_;
          this->SimFlowCompEqmt_CntllingZoneOrThermostatLocation_ = x.SimFlowCompEqmt_CntllingZoneOrThermostatLocation_;
          this->SimFlowCompEqmt_SupFanObjectType_ = x.SimFlowCompEqmt_SupFanObjectType_;
          this->SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_ = x.SimFlowCompEqmt_DesignHeatRecovWaterFlowRate_;
          this->SimFlowCompEqmt_MaxTempForHeatRecov_ = x.SimFlowCompEqmt_MaxTempForHeatRecov_;
          this->SimFlowCompEqmt_HeatRecovWaterInletNodeName_ = x.SimFlowCompEqmt_HeatRecovWaterInletNodeName_;
          this->SimFlowCompEqmt_HeatRecovWaterOutletNodeName_ = x.SimFlowCompEqmt_HeatRecovWaterOutletNodeName_;
          this->SimFlowCompEqmt_CntlType_ = x.SimFlowCompEqmt_CntlType_;
          this->SimFlowCompEqmt_DXHeatCoilSizingRatio_ = x.SimFlowCompEqmt_DXHeatCoilSizingRatio_;
          this->SimFlowCompEqmt_UseDOASDXCoolCoil_ = x.SimFlowCompEqmt_UseDOASDXCoolCoil_;
          this->SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_ = x.SimFlowCompEqmt_DOASDXCoolCoilLeavingMinAirTemp_;
          this->SimFlowCompEqmt_LatentLoadCntrl_ = x.SimFlowCompEqmt_LatentLoadCntrl_;
          this->SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_ = x.SimFlowCompEqmt_SupplyAirFlowRateMethodDuringCoolOps_;
          this->SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_ = x.SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaDuringCoolOps_;
          this->SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_ = x.SimFlowCompEqmt_FracOfAutosizedDesignCoolSupplyAirFlowRate_;
          this->SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_ = x.SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringCoolOps_;
          this->SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_ = x.SimFlowCompEqmt_SupplyairFlowRateMethodDuringHeatOps_;
          this->SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_ = x.SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaduringHeatOps_;
          this->SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_ = x.SimFlowCompEqmt_FracOfAutosizedDesignHeatSupplyAirFlowRate_;
          this->SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_ = x.SimFlowCompEqmt_DesignSupplyAirFlowRatePerUnitOfCapDuringHeatOps_;
          this->SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_ = x.SimFlowCompEqmt_SupplyAirFlowRateMethodWhenNoCoolorHeatisReq_;
          this->SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_ = x.SimFlowCompEqmt_SupplyAirFlowRateWhenNoCoolorHeatisReq_;
          this->SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_ = x.SimFlowCompEqmt_SupplyAirFlowRatePerFloorAreaWhenNoCoolorHeatisReq_;
          this->SimFlowCompEqmt_AncilliaryOn_CycleElecPower_ = x.SimFlowCompEqmt_AncilliaryOn_CycleElecPower_;
          this->SimFlowCompEqmt_AncilliaryOff_CycleElecPower_ = x.SimFlowCompEqmt_AncilliaryOff_CycleElecPower_;
          this->SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_ = x.SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectType_;
          this->SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_ = x.SimFlowCompEqmt_DesignSpecMultispeedHeatPumpObjectName_;
          this->UnitarySystemPerformance_HeatPump_Multispeed_Name_ = x.UnitarySystemPerformance_HeatPump_Multispeed_Name_;
          this->UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_ = x.UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForHeating_;
          this->UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_ = x.UnitarySystemPerformance_HeatPump_Multispeed_NumSpeedsForCooling_;
          this->UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_ = x.UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringHeatOps_;
          this->UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_ = x.UnitarySystemPerformance_HeatPump_Multispeed_Speed_1_4_SupplyAirFlowRatioDuringCoolOps_;
        }

        return *this;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_Default::
      ~SimFlowCompoundEqmt_UnitaryLoopEqmt_Default ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

