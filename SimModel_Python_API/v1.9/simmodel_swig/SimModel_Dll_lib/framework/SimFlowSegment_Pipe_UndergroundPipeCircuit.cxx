// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowSegment_Pipe_UndergroundPipeCircuit.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowSegment_Pipe_UndergroundPipeCircuit
      // 

      const SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_PipeThermalCond_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeThermalCond () const
      {
        return this->SimFlowSeg_PipeThermalCond_;
      }

      SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_PipeThermalCond_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeThermalCond ()
      {
        return this->SimFlowSeg_PipeThermalCond_;
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeThermalCond (const SimFlowSeg_PipeThermalCond_type& x)
      {
        this->SimFlowSeg_PipeThermalCond_.set (x);
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeThermalCond (const SimFlowSeg_PipeThermalCond_optional& x)
      {
        this->SimFlowSeg_PipeThermalCond_ = x;
      }

      const SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_PipeDensity_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeDensity () const
      {
        return this->SimFlowSeg_PipeDensity_;
      }

      SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_PipeDensity_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeDensity ()
      {
        return this->SimFlowSeg_PipeDensity_;
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeDensity (const SimFlowSeg_PipeDensity_type& x)
      {
        this->SimFlowSeg_PipeDensity_.set (x);
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeDensity (const SimFlowSeg_PipeDensity_optional& x)
      {
        this->SimFlowSeg_PipeDensity_ = x;
      }

      const SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_PipeSpecificHeat_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeSpecificHeat () const
      {
        return this->SimFlowSeg_PipeSpecificHeat_;
      }

      SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_PipeSpecificHeat_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeSpecificHeat ()
      {
        return this->SimFlowSeg_PipeSpecificHeat_;
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeSpecificHeat (const SimFlowSeg_PipeSpecificHeat_type& x)
      {
        this->SimFlowSeg_PipeSpecificHeat_.set (x);
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeSpecificHeat (const SimFlowSeg_PipeSpecificHeat_optional& x)
      {
        this->SimFlowSeg_PipeSpecificHeat_ = x;
      }

      const SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_PipeInnerDiameter_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeInnerDiameter () const
      {
        return this->SimFlowSeg_PipeInnerDiameter_;
      }

      SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_PipeInnerDiameter_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeInnerDiameter ()
      {
        return this->SimFlowSeg_PipeInnerDiameter_;
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeInnerDiameter (const SimFlowSeg_PipeInnerDiameter_type& x)
      {
        this->SimFlowSeg_PipeInnerDiameter_.set (x);
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeInnerDiameter (const SimFlowSeg_PipeInnerDiameter_optional& x)
      {
        this->SimFlowSeg_PipeInnerDiameter_ = x;
      }

      const SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_PipeOuterDiameter_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeOuterDiameter () const
      {
        return this->SimFlowSeg_PipeOuterDiameter_;
      }

      SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_PipeOuterDiameter_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeOuterDiameter ()
      {
        return this->SimFlowSeg_PipeOuterDiameter_;
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeOuterDiameter (const SimFlowSeg_PipeOuterDiameter_type& x)
      {
        this->SimFlowSeg_PipeOuterDiameter_.set (x);
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeOuterDiameter (const SimFlowSeg_PipeOuterDiameter_optional& x)
      {
        this->SimFlowSeg_PipeOuterDiameter_ = x;
      }

      const SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_DesignFlowRate_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_DesignFlowRate () const
      {
        return this->SimFlowSeg_DesignFlowRate_;
      }

      SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_DesignFlowRate_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_DesignFlowRate ()
      {
        return this->SimFlowSeg_DesignFlowRate_;
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_DesignFlowRate (const SimFlowSeg_DesignFlowRate_type& x)
      {
        this->SimFlowSeg_DesignFlowRate_.set (x);
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_DesignFlowRate (const SimFlowSeg_DesignFlowRate_optional& x)
      {
        this->SimFlowSeg_DesignFlowRate_ = x;
      }

      const SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_CircInletNode_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_CircInletNode () const
      {
        return this->SimFlowSeg_CircInletNode_;
      }

      SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_CircInletNode_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_CircInletNode ()
      {
        return this->SimFlowSeg_CircInletNode_;
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_CircInletNode (const SimFlowSeg_CircInletNode_type& x)
      {
        this->SimFlowSeg_CircInletNode_.set (x);
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_CircInletNode (const SimFlowSeg_CircInletNode_optional& x)
      {
        this->SimFlowSeg_CircInletNode_ = x;
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_CircInletNode (::std::auto_ptr< SimFlowSeg_CircInletNode_type > x)
      {
        this->SimFlowSeg_CircInletNode_.set (x);
      }

      const SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_CircOutletNode_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_CircOutletNode () const
      {
        return this->SimFlowSeg_CircOutletNode_;
      }

      SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_CircOutletNode_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_CircOutletNode ()
      {
        return this->SimFlowSeg_CircOutletNode_;
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_CircOutletNode (const SimFlowSeg_CircOutletNode_type& x)
      {
        this->SimFlowSeg_CircOutletNode_.set (x);
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_CircOutletNode (const SimFlowSeg_CircOutletNode_optional& x)
      {
        this->SimFlowSeg_CircOutletNode_ = x;
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_CircOutletNode (::std::auto_ptr< SimFlowSeg_CircOutletNode_type > x)
      {
        this->SimFlowSeg_CircOutletNode_.set (x);
      }

      const SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_ConvergCritInnerRadialIterationLoop_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_ConvergCritInnerRadialIterationLoop () const
      {
        return this->SimFlowSeg_ConvergCritInnerRadialIterationLoop_;
      }

      SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_ConvergCritInnerRadialIterationLoop_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_ConvergCritInnerRadialIterationLoop ()
      {
        return this->SimFlowSeg_ConvergCritInnerRadialIterationLoop_;
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_ConvergCritInnerRadialIterationLoop (const SimFlowSeg_ConvergCritInnerRadialIterationLoop_type& x)
      {
        this->SimFlowSeg_ConvergCritInnerRadialIterationLoop_.set (x);
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_ConvergCritInnerRadialIterationLoop (const SimFlowSeg_ConvergCritInnerRadialIterationLoop_optional& x)
      {
        this->SimFlowSeg_ConvergCritInnerRadialIterationLoop_ = x;
      }

      const SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_MaxIterationsinInnerRadialIterationLoop_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_MaxIterationsinInnerRadialIterationLoop () const
      {
        return this->SimFlowSeg_MaxIterationsinInnerRadialIterationLoop_;
      }

      SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_MaxIterationsinInnerRadialIterationLoop_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_MaxIterationsinInnerRadialIterationLoop ()
      {
        return this->SimFlowSeg_MaxIterationsinInnerRadialIterationLoop_;
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_MaxIterationsinInnerRadialIterationLoop (const SimFlowSeg_MaxIterationsinInnerRadialIterationLoop_type& x)
      {
        this->SimFlowSeg_MaxIterationsinInnerRadialIterationLoop_.set (x);
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_MaxIterationsinInnerRadialIterationLoop (const SimFlowSeg_MaxIterationsinInnerRadialIterationLoop_optional& x)
      {
        this->SimFlowSeg_MaxIterationsinInnerRadialIterationLoop_ = x;
      }

      const SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_NumberSoilNodesinInnerRadialNearPipeMeshRegion_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_NumberSoilNodesinInnerRadialNearPipeMeshRegion () const
      {
        return this->SimFlowSeg_NumberSoilNodesinInnerRadialNearPipeMeshRegion_;
      }

      SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_NumberSoilNodesinInnerRadialNearPipeMeshRegion_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_NumberSoilNodesinInnerRadialNearPipeMeshRegion ()
      {
        return this->SimFlowSeg_NumberSoilNodesinInnerRadialNearPipeMeshRegion_;
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_NumberSoilNodesinInnerRadialNearPipeMeshRegion (const SimFlowSeg_NumberSoilNodesinInnerRadialNearPipeMeshRegion_type& x)
      {
        this->SimFlowSeg_NumberSoilNodesinInnerRadialNearPipeMeshRegion_.set (x);
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_NumberSoilNodesinInnerRadialNearPipeMeshRegion (const SimFlowSeg_NumberSoilNodesinInnerRadialNearPipeMeshRegion_optional& x)
      {
        this->SimFlowSeg_NumberSoilNodesinInnerRadialNearPipeMeshRegion_ = x;
      }

      const SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_RadialThicknessInnerRadialNearPipeMeshRegion_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_RadialThicknessInnerRadialNearPipeMeshRegion () const
      {
        return this->SimFlowSeg_RadialThicknessInnerRadialNearPipeMeshRegion_;
      }

      SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_RadialThicknessInnerRadialNearPipeMeshRegion_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_RadialThicknessInnerRadialNearPipeMeshRegion ()
      {
        return this->SimFlowSeg_RadialThicknessInnerRadialNearPipeMeshRegion_;
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_RadialThicknessInnerRadialNearPipeMeshRegion (const SimFlowSeg_RadialThicknessInnerRadialNearPipeMeshRegion_type& x)
      {
        this->SimFlowSeg_RadialThicknessInnerRadialNearPipeMeshRegion_.set (x);
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_RadialThicknessInnerRadialNearPipeMeshRegion (const SimFlowSeg_RadialThicknessInnerRadialNearPipeMeshRegion_optional& x)
      {
        this->SimFlowSeg_RadialThicknessInnerRadialNearPipeMeshRegion_ = x;
      }

      const SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_NumberPipeSegmentsEnteredthisPipeCirc_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_NumberPipeSegmentsEnteredthisPipeCirc () const
      {
        return this->SimFlowSeg_NumberPipeSegmentsEnteredthisPipeCirc_;
      }

      SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_NumberPipeSegmentsEnteredthisPipeCirc_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_NumberPipeSegmentsEnteredthisPipeCirc ()
      {
        return this->SimFlowSeg_NumberPipeSegmentsEnteredthisPipeCirc_;
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_NumberPipeSegmentsEnteredthisPipeCirc (const SimFlowSeg_NumberPipeSegmentsEnteredthisPipeCirc_type& x)
      {
        this->SimFlowSeg_NumberPipeSegmentsEnteredthisPipeCirc_.set (x);
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_NumberPipeSegmentsEnteredthisPipeCirc (const SimFlowSeg_NumberPipeSegmentsEnteredthisPipeCirc_optional& x)
      {
        this->SimFlowSeg_NumberPipeSegmentsEnteredthisPipeCirc_ = x;
      }

      const SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_PipeSeg_1_6_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeSeg_1_6 () const
      {
        return this->SimFlowSeg_PipeSeg_1_6_;
      }

      SimFlowSegment_Pipe_UndergroundPipeCircuit::SimFlowSeg_PipeSeg_1_6_optional& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeSeg_1_6 ()
      {
        return this->SimFlowSeg_PipeSeg_1_6_;
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeSeg_1_6 (const SimFlowSeg_PipeSeg_1_6_type& x)
      {
        this->SimFlowSeg_PipeSeg_1_6_.set (x);
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeSeg_1_6 (const SimFlowSeg_PipeSeg_1_6_optional& x)
      {
        this->SimFlowSeg_PipeSeg_1_6_ = x;
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSeg_PipeSeg_1_6 (::std::auto_ptr< SimFlowSeg_PipeSeg_1_6_type > x)
      {
        this->SimFlowSeg_PipeSeg_1_6_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowSegment_Pipe_UndergroundPipeCircuit
      //

      SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSegment_Pipe_UndergroundPipeCircuit ()
      : ::schema::simxml::MepModel::SimFlowSegment_Pipe (),
        SimFlowSeg_PipeThermalCond_ (this),
        SimFlowSeg_PipeDensity_ (this),
        SimFlowSeg_PipeSpecificHeat_ (this),
        SimFlowSeg_PipeInnerDiameter_ (this),
        SimFlowSeg_PipeOuterDiameter_ (this),
        SimFlowSeg_DesignFlowRate_ (this),
        SimFlowSeg_CircInletNode_ (this),
        SimFlowSeg_CircOutletNode_ (this),
        SimFlowSeg_ConvergCritInnerRadialIterationLoop_ (this),
        SimFlowSeg_MaxIterationsinInnerRadialIterationLoop_ (this),
        SimFlowSeg_NumberSoilNodesinInnerRadialNearPipeMeshRegion_ (this),
        SimFlowSeg_RadialThicknessInnerRadialNearPipeMeshRegion_ (this),
        SimFlowSeg_NumberPipeSegmentsEnteredthisPipeCirc_ (this),
        SimFlowSeg_PipeSeg_1_6_ (this)
      {
      }

      SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSegment_Pipe_UndergroundPipeCircuit (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowSegment_Pipe (RefId),
        SimFlowSeg_PipeThermalCond_ (this),
        SimFlowSeg_PipeDensity_ (this),
        SimFlowSeg_PipeSpecificHeat_ (this),
        SimFlowSeg_PipeInnerDiameter_ (this),
        SimFlowSeg_PipeOuterDiameter_ (this),
        SimFlowSeg_DesignFlowRate_ (this),
        SimFlowSeg_CircInletNode_ (this),
        SimFlowSeg_CircOutletNode_ (this),
        SimFlowSeg_ConvergCritInnerRadialIterationLoop_ (this),
        SimFlowSeg_MaxIterationsinInnerRadialIterationLoop_ (this),
        SimFlowSeg_NumberSoilNodesinInnerRadialNearPipeMeshRegion_ (this),
        SimFlowSeg_RadialThicknessInnerRadialNearPipeMeshRegion_ (this),
        SimFlowSeg_NumberPipeSegmentsEnteredthisPipeCirc_ (this),
        SimFlowSeg_PipeSeg_1_6_ (this)
      {
      }

      SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSegment_Pipe_UndergroundPipeCircuit (const SimFlowSegment_Pipe_UndergroundPipeCircuit& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowSegment_Pipe (x, f, c),
        SimFlowSeg_PipeThermalCond_ (x.SimFlowSeg_PipeThermalCond_, f, this),
        SimFlowSeg_PipeDensity_ (x.SimFlowSeg_PipeDensity_, f, this),
        SimFlowSeg_PipeSpecificHeat_ (x.SimFlowSeg_PipeSpecificHeat_, f, this),
        SimFlowSeg_PipeInnerDiameter_ (x.SimFlowSeg_PipeInnerDiameter_, f, this),
        SimFlowSeg_PipeOuterDiameter_ (x.SimFlowSeg_PipeOuterDiameter_, f, this),
        SimFlowSeg_DesignFlowRate_ (x.SimFlowSeg_DesignFlowRate_, f, this),
        SimFlowSeg_CircInletNode_ (x.SimFlowSeg_CircInletNode_, f, this),
        SimFlowSeg_CircOutletNode_ (x.SimFlowSeg_CircOutletNode_, f, this),
        SimFlowSeg_ConvergCritInnerRadialIterationLoop_ (x.SimFlowSeg_ConvergCritInnerRadialIterationLoop_, f, this),
        SimFlowSeg_MaxIterationsinInnerRadialIterationLoop_ (x.SimFlowSeg_MaxIterationsinInnerRadialIterationLoop_, f, this),
        SimFlowSeg_NumberSoilNodesinInnerRadialNearPipeMeshRegion_ (x.SimFlowSeg_NumberSoilNodesinInnerRadialNearPipeMeshRegion_, f, this),
        SimFlowSeg_RadialThicknessInnerRadialNearPipeMeshRegion_ (x.SimFlowSeg_RadialThicknessInnerRadialNearPipeMeshRegion_, f, this),
        SimFlowSeg_NumberPipeSegmentsEnteredthisPipeCirc_ (x.SimFlowSeg_NumberPipeSegmentsEnteredthisPipeCirc_, f, this),
        SimFlowSeg_PipeSeg_1_6_ (x.SimFlowSeg_PipeSeg_1_6_, f, this)
      {
      }

      SimFlowSegment_Pipe_UndergroundPipeCircuit::
      SimFlowSegment_Pipe_UndergroundPipeCircuit (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowSegment_Pipe (e, f | ::xml_schema::flags::base, c),
        SimFlowSeg_PipeThermalCond_ (this),
        SimFlowSeg_PipeDensity_ (this),
        SimFlowSeg_PipeSpecificHeat_ (this),
        SimFlowSeg_PipeInnerDiameter_ (this),
        SimFlowSeg_PipeOuterDiameter_ (this),
        SimFlowSeg_DesignFlowRate_ (this),
        SimFlowSeg_CircInletNode_ (this),
        SimFlowSeg_CircOutletNode_ (this),
        SimFlowSeg_ConvergCritInnerRadialIterationLoop_ (this),
        SimFlowSeg_MaxIterationsinInnerRadialIterationLoop_ (this),
        SimFlowSeg_NumberSoilNodesinInnerRadialNearPipeMeshRegion_ (this),
        SimFlowSeg_RadialThicknessInnerRadialNearPipeMeshRegion_ (this),
        SimFlowSeg_NumberPipeSegmentsEnteredthisPipeCirc_ (this),
        SimFlowSeg_PipeSeg_1_6_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowSegment_Pipe_UndergroundPipeCircuit::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowSegment_Pipe::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowSeg_PipeThermalCond
          //
          if (n.name () == "SimFlowSeg_PipeThermalCond" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSeg_PipeThermalCond_)
            {
              this->SimFlowSeg_PipeThermalCond_.set (SimFlowSeg_PipeThermalCond_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSeg_PipeDensity
          //
          if (n.name () == "SimFlowSeg_PipeDensity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSeg_PipeDensity_)
            {
              this->SimFlowSeg_PipeDensity_.set (SimFlowSeg_PipeDensity_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSeg_PipeSpecificHeat
          //
          if (n.name () == "SimFlowSeg_PipeSpecificHeat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSeg_PipeSpecificHeat_)
            {
              this->SimFlowSeg_PipeSpecificHeat_.set (SimFlowSeg_PipeSpecificHeat_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSeg_PipeInnerDiameter
          //
          if (n.name () == "SimFlowSeg_PipeInnerDiameter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSeg_PipeInnerDiameter_)
            {
              this->SimFlowSeg_PipeInnerDiameter_.set (SimFlowSeg_PipeInnerDiameter_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSeg_PipeOuterDiameter
          //
          if (n.name () == "SimFlowSeg_PipeOuterDiameter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSeg_PipeOuterDiameter_)
            {
              this->SimFlowSeg_PipeOuterDiameter_.set (SimFlowSeg_PipeOuterDiameter_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSeg_DesignFlowRate
          //
          if (n.name () == "SimFlowSeg_DesignFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSeg_DesignFlowRate_)
            {
              this->SimFlowSeg_DesignFlowRate_.set (SimFlowSeg_DesignFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSeg_CircInletNode
          //
          if (n.name () == "SimFlowSeg_CircInletNode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowSeg_CircInletNode_type > r (
              SimFlowSeg_CircInletNode_traits::create (i, f, this));

            if (!this->SimFlowSeg_CircInletNode_)
            {
              this->SimFlowSeg_CircInletNode_.set (r);
              continue;
            }
          }

          // SimFlowSeg_CircOutletNode
          //
          if (n.name () == "SimFlowSeg_CircOutletNode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowSeg_CircOutletNode_type > r (
              SimFlowSeg_CircOutletNode_traits::create (i, f, this));

            if (!this->SimFlowSeg_CircOutletNode_)
            {
              this->SimFlowSeg_CircOutletNode_.set (r);
              continue;
            }
          }

          // SimFlowSeg_ConvergCritInnerRadialIterationLoop
          //
          if (n.name () == "SimFlowSeg_ConvergCritInnerRadialIterationLoop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSeg_ConvergCritInnerRadialIterationLoop_)
            {
              this->SimFlowSeg_ConvergCritInnerRadialIterationLoop_.set (SimFlowSeg_ConvergCritInnerRadialIterationLoop_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSeg_MaxIterationsinInnerRadialIterationLoop
          //
          if (n.name () == "SimFlowSeg_MaxIterationsinInnerRadialIterationLoop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSeg_MaxIterationsinInnerRadialIterationLoop_)
            {
              this->SimFlowSeg_MaxIterationsinInnerRadialIterationLoop_.set (SimFlowSeg_MaxIterationsinInnerRadialIterationLoop_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSeg_NumberSoilNodesinInnerRadialNearPipeMeshRegion
          //
          if (n.name () == "SimFlowSeg_NumberSoilNodesinInnerRadialNearPipeMeshRegion" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSeg_NumberSoilNodesinInnerRadialNearPipeMeshRegion_)
            {
              this->SimFlowSeg_NumberSoilNodesinInnerRadialNearPipeMeshRegion_.set (SimFlowSeg_NumberSoilNodesinInnerRadialNearPipeMeshRegion_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSeg_RadialThicknessInnerRadialNearPipeMeshRegion
          //
          if (n.name () == "SimFlowSeg_RadialThicknessInnerRadialNearPipeMeshRegion" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSeg_RadialThicknessInnerRadialNearPipeMeshRegion_)
            {
              this->SimFlowSeg_RadialThicknessInnerRadialNearPipeMeshRegion_.set (SimFlowSeg_RadialThicknessInnerRadialNearPipeMeshRegion_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSeg_NumberPipeSegmentsEnteredthisPipeCirc
          //
          if (n.name () == "SimFlowSeg_NumberPipeSegmentsEnteredthisPipeCirc" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowSeg_NumberPipeSegmentsEnteredthisPipeCirc_)
            {
              this->SimFlowSeg_NumberPipeSegmentsEnteredthisPipeCirc_.set (SimFlowSeg_NumberPipeSegmentsEnteredthisPipeCirc_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowSeg_PipeSeg_1_6
          //
          if (n.name () == "SimFlowSeg_PipeSeg_1_6" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowSeg_PipeSeg_1_6_type > r (
              SimFlowSeg_PipeSeg_1_6_traits::create (i, f, this));

            if (!this->SimFlowSeg_PipeSeg_1_6_)
            {
              this->SimFlowSeg_PipeSeg_1_6_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowSegment_Pipe_UndergroundPipeCircuit* SimFlowSegment_Pipe_UndergroundPipeCircuit::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowSegment_Pipe_UndergroundPipeCircuit (*this, f, c);
      }

      SimFlowSegment_Pipe_UndergroundPipeCircuit& SimFlowSegment_Pipe_UndergroundPipeCircuit::
      operator= (const SimFlowSegment_Pipe_UndergroundPipeCircuit& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowSegment_Pipe& > (*this) = x;
          this->SimFlowSeg_PipeThermalCond_ = x.SimFlowSeg_PipeThermalCond_;
          this->SimFlowSeg_PipeDensity_ = x.SimFlowSeg_PipeDensity_;
          this->SimFlowSeg_PipeSpecificHeat_ = x.SimFlowSeg_PipeSpecificHeat_;
          this->SimFlowSeg_PipeInnerDiameter_ = x.SimFlowSeg_PipeInnerDiameter_;
          this->SimFlowSeg_PipeOuterDiameter_ = x.SimFlowSeg_PipeOuterDiameter_;
          this->SimFlowSeg_DesignFlowRate_ = x.SimFlowSeg_DesignFlowRate_;
          this->SimFlowSeg_CircInletNode_ = x.SimFlowSeg_CircInletNode_;
          this->SimFlowSeg_CircOutletNode_ = x.SimFlowSeg_CircOutletNode_;
          this->SimFlowSeg_ConvergCritInnerRadialIterationLoop_ = x.SimFlowSeg_ConvergCritInnerRadialIterationLoop_;
          this->SimFlowSeg_MaxIterationsinInnerRadialIterationLoop_ = x.SimFlowSeg_MaxIterationsinInnerRadialIterationLoop_;
          this->SimFlowSeg_NumberSoilNodesinInnerRadialNearPipeMeshRegion_ = x.SimFlowSeg_NumberSoilNodesinInnerRadialNearPipeMeshRegion_;
          this->SimFlowSeg_RadialThicknessInnerRadialNearPipeMeshRegion_ = x.SimFlowSeg_RadialThicknessInnerRadialNearPipeMeshRegion_;
          this->SimFlowSeg_NumberPipeSegmentsEnteredthisPipeCirc_ = x.SimFlowSeg_NumberPipeSegmentsEnteredthisPipeCirc_;
          this->SimFlowSeg_PipeSeg_1_6_ = x.SimFlowSeg_PipeSeg_1_6_;
        }

        return *this;
      }

      SimFlowSegment_Pipe_UndergroundPipeCircuit::
      ~SimFlowSegment_Pipe_UndergroundPipeCircuit ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

