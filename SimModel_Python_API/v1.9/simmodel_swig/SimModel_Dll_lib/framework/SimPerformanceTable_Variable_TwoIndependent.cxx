// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimPerformanceTable_Variable_TwoIndependent.hxx"

#include "doublelist.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeometry
    {
      // SimPerformanceTable_Variable_TwoIndependent
      // 

      const SimPerformanceTable_Variable_TwoIndependent::SimPerformanceTable_MinValX_optional& SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_MinValX () const
      {
        return this->SimPerformanceTable_MinValX_;
      }

      SimPerformanceTable_Variable_TwoIndependent::SimPerformanceTable_MinValX_optional& SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_MinValX ()
      {
        return this->SimPerformanceTable_MinValX_;
      }

      void SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_MinValX (const SimPerformanceTable_MinValX_type& x)
      {
        this->SimPerformanceTable_MinValX_.set (x);
      }

      void SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_MinValX (const SimPerformanceTable_MinValX_optional& x)
      {
        this->SimPerformanceTable_MinValX_ = x;
      }

      const SimPerformanceTable_Variable_TwoIndependent::SimPerformanceTable_MaxValX_optional& SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_MaxValX () const
      {
        return this->SimPerformanceTable_MaxValX_;
      }

      SimPerformanceTable_Variable_TwoIndependent::SimPerformanceTable_MaxValX_optional& SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_MaxValX ()
      {
        return this->SimPerformanceTable_MaxValX_;
      }

      void SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_MaxValX (const SimPerformanceTable_MaxValX_type& x)
      {
        this->SimPerformanceTable_MaxValX_.set (x);
      }

      void SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_MaxValX (const SimPerformanceTable_MaxValX_optional& x)
      {
        this->SimPerformanceTable_MaxValX_ = x;
      }

      const SimPerformanceTable_Variable_TwoIndependent::SimPerformanceTable_InputUnitTypeForX_optional& SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_InputUnitTypeForX () const
      {
        return this->SimPerformanceTable_InputUnitTypeForX_;
      }

      SimPerformanceTable_Variable_TwoIndependent::SimPerformanceTable_InputUnitTypeForX_optional& SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_InputUnitTypeForX ()
      {
        return this->SimPerformanceTable_InputUnitTypeForX_;
      }

      void SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_InputUnitTypeForX (const SimPerformanceTable_InputUnitTypeForX_type& x)
      {
        this->SimPerformanceTable_InputUnitTypeForX_.set (x);
      }

      void SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_InputUnitTypeForX (const SimPerformanceTable_InputUnitTypeForX_optional& x)
      {
        this->SimPerformanceTable_InputUnitTypeForX_ = x;
      }

      void SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_InputUnitTypeForX (::std::auto_ptr< SimPerformanceTable_InputUnitTypeForX_type > x)
      {
        this->SimPerformanceTable_InputUnitTypeForX_.set (x);
      }

      const SimPerformanceTable_Variable_TwoIndependent::SimPerformanceTable_MinValY_optional& SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_MinValY () const
      {
        return this->SimPerformanceTable_MinValY_;
      }

      SimPerformanceTable_Variable_TwoIndependent::SimPerformanceTable_MinValY_optional& SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_MinValY ()
      {
        return this->SimPerformanceTable_MinValY_;
      }

      void SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_MinValY (const SimPerformanceTable_MinValY_type& x)
      {
        this->SimPerformanceTable_MinValY_.set (x);
      }

      void SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_MinValY (const SimPerformanceTable_MinValY_optional& x)
      {
        this->SimPerformanceTable_MinValY_ = x;
      }

      const SimPerformanceTable_Variable_TwoIndependent::SimPerformanceTable_MaxValY_optional& SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_MaxValY () const
      {
        return this->SimPerformanceTable_MaxValY_;
      }

      SimPerformanceTable_Variable_TwoIndependent::SimPerformanceTable_MaxValY_optional& SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_MaxValY ()
      {
        return this->SimPerformanceTable_MaxValY_;
      }

      void SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_MaxValY (const SimPerformanceTable_MaxValY_type& x)
      {
        this->SimPerformanceTable_MaxValY_.set (x);
      }

      void SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_MaxValY (const SimPerformanceTable_MaxValY_optional& x)
      {
        this->SimPerformanceTable_MaxValY_ = x;
      }

      const SimPerformanceTable_Variable_TwoIndependent::SimPerformanceTable_InputUnitTypeForY_optional& SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_InputUnitTypeForY () const
      {
        return this->SimPerformanceTable_InputUnitTypeForY_;
      }

      SimPerformanceTable_Variable_TwoIndependent::SimPerformanceTable_InputUnitTypeForY_optional& SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_InputUnitTypeForY ()
      {
        return this->SimPerformanceTable_InputUnitTypeForY_;
      }

      void SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_InputUnitTypeForY (const SimPerformanceTable_InputUnitTypeForY_type& x)
      {
        this->SimPerformanceTable_InputUnitTypeForY_.set (x);
      }

      void SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_InputUnitTypeForY (const SimPerformanceTable_InputUnitTypeForY_optional& x)
      {
        this->SimPerformanceTable_InputUnitTypeForY_ = x;
      }

      void SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_InputUnitTypeForY (::std::auto_ptr< SimPerformanceTable_InputUnitTypeForY_type > x)
      {
        this->SimPerformanceTable_InputUnitTypeForY_.set (x);
      }

      const SimPerformanceTable_Variable_TwoIndependent::SimPerformanceTable_XValue_1_164_optional& SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_XValue_1_164 () const
      {
        return this->SimPerformanceTable_XValue_1_164_;
      }

      SimPerformanceTable_Variable_TwoIndependent::SimPerformanceTable_XValue_1_164_optional& SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_XValue_1_164 ()
      {
        return this->SimPerformanceTable_XValue_1_164_;
      }

      void SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_XValue_1_164 (const SimPerformanceTable_XValue_1_164_type& x)
      {
        this->SimPerformanceTable_XValue_1_164_.set (x);
      }

      void SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_XValue_1_164 (const SimPerformanceTable_XValue_1_164_optional& x)
      {
        this->SimPerformanceTable_XValue_1_164_ = x;
      }

      void SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_XValue_1_164 (::std::auto_ptr< SimPerformanceTable_XValue_1_164_type > x)
      {
        this->SimPerformanceTable_XValue_1_164_.set (x);
      }

      const SimPerformanceTable_Variable_TwoIndependent::SimPerformanceTable_YValue_1_164_optional& SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_YValue_1_164 () const
      {
        return this->SimPerformanceTable_YValue_1_164_;
      }

      SimPerformanceTable_Variable_TwoIndependent::SimPerformanceTable_YValue_1_164_optional& SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_YValue_1_164 ()
      {
        return this->SimPerformanceTable_YValue_1_164_;
      }

      void SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_YValue_1_164 (const SimPerformanceTable_YValue_1_164_type& x)
      {
        this->SimPerformanceTable_YValue_1_164_.set (x);
      }

      void SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_YValue_1_164 (const SimPerformanceTable_YValue_1_164_optional& x)
      {
        this->SimPerformanceTable_YValue_1_164_ = x;
      }

      void SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_YValue_1_164 (::std::auto_ptr< SimPerformanceTable_YValue_1_164_type > x)
      {
        this->SimPerformanceTable_YValue_1_164_.set (x);
      }

      const SimPerformanceTable_Variable_TwoIndependent::SimPerformanceTable_OutputValue_1_164_optional& SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_OutputValue_1_164 () const
      {
        return this->SimPerformanceTable_OutputValue_1_164_;
      }

      SimPerformanceTable_Variable_TwoIndependent::SimPerformanceTable_OutputValue_1_164_optional& SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_OutputValue_1_164 ()
      {
        return this->SimPerformanceTable_OutputValue_1_164_;
      }

      void SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_OutputValue_1_164 (const SimPerformanceTable_OutputValue_1_164_type& x)
      {
        this->SimPerformanceTable_OutputValue_1_164_.set (x);
      }

      void SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_OutputValue_1_164 (const SimPerformanceTable_OutputValue_1_164_optional& x)
      {
        this->SimPerformanceTable_OutputValue_1_164_ = x;
      }

      void SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_OutputValue_1_164 (::std::auto_ptr< SimPerformanceTable_OutputValue_1_164_type > x)
      {
        this->SimPerformanceTable_OutputValue_1_164_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeometry
    {
      // SimPerformanceTable_Variable_TwoIndependent
      //

      SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_Variable_TwoIndependent ()
      : ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Variable (),
        SimPerformanceTable_MinValX_ (this),
        SimPerformanceTable_MaxValX_ (this),
        SimPerformanceTable_InputUnitTypeForX_ (this),
        SimPerformanceTable_MinValY_ (this),
        SimPerformanceTable_MaxValY_ (this),
        SimPerformanceTable_InputUnitTypeForY_ (this),
        SimPerformanceTable_XValue_1_164_ (this),
        SimPerformanceTable_YValue_1_164_ (this),
        SimPerformanceTable_OutputValue_1_164_ (this)
      {
      }

      SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_Variable_TwoIndependent (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Variable (RefId),
        SimPerformanceTable_MinValX_ (this),
        SimPerformanceTable_MaxValX_ (this),
        SimPerformanceTable_InputUnitTypeForX_ (this),
        SimPerformanceTable_MinValY_ (this),
        SimPerformanceTable_MaxValY_ (this),
        SimPerformanceTable_InputUnitTypeForY_ (this),
        SimPerformanceTable_XValue_1_164_ (this),
        SimPerformanceTable_YValue_1_164_ (this),
        SimPerformanceTable_OutputValue_1_164_ (this)
      {
      }

      SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_Variable_TwoIndependent (const SimPerformanceTable_Variable_TwoIndependent& x,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Variable (x, f, c),
        SimPerformanceTable_MinValX_ (x.SimPerformanceTable_MinValX_, f, this),
        SimPerformanceTable_MaxValX_ (x.SimPerformanceTable_MaxValX_, f, this),
        SimPerformanceTable_InputUnitTypeForX_ (x.SimPerformanceTable_InputUnitTypeForX_, f, this),
        SimPerformanceTable_MinValY_ (x.SimPerformanceTable_MinValY_, f, this),
        SimPerformanceTable_MaxValY_ (x.SimPerformanceTable_MaxValY_, f, this),
        SimPerformanceTable_InputUnitTypeForY_ (x.SimPerformanceTable_InputUnitTypeForY_, f, this),
        SimPerformanceTable_XValue_1_164_ (x.SimPerformanceTable_XValue_1_164_, f, this),
        SimPerformanceTable_YValue_1_164_ (x.SimPerformanceTable_YValue_1_164_, f, this),
        SimPerformanceTable_OutputValue_1_164_ (x.SimPerformanceTable_OutputValue_1_164_, f, this)
      {
      }

      SimPerformanceTable_Variable_TwoIndependent::
      SimPerformanceTable_Variable_TwoIndependent (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Variable (e, f | ::xml_schema::flags::base, c),
        SimPerformanceTable_MinValX_ (this),
        SimPerformanceTable_MaxValX_ (this),
        SimPerformanceTable_InputUnitTypeForX_ (this),
        SimPerformanceTable_MinValY_ (this),
        SimPerformanceTable_MaxValY_ (this),
        SimPerformanceTable_InputUnitTypeForY_ (this),
        SimPerformanceTable_XValue_1_164_ (this),
        SimPerformanceTable_YValue_1_164_ (this),
        SimPerformanceTable_OutputValue_1_164_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimPerformanceTable_Variable_TwoIndependent::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeometry::SimPerformanceTable_Variable::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimPerformanceTable_MinValX
          //
          if (n.name () == "SimPerformanceTable_MinValX" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            if (!this->SimPerformanceTable_MinValX_)
            {
              this->SimPerformanceTable_MinValX_.set (SimPerformanceTable_MinValX_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerformanceTable_MaxValX
          //
          if (n.name () == "SimPerformanceTable_MaxValX" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            if (!this->SimPerformanceTable_MaxValX_)
            {
              this->SimPerformanceTable_MaxValX_.set (SimPerformanceTable_MaxValX_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerformanceTable_InputUnitTypeForX
          //
          if (n.name () == "SimPerformanceTable_InputUnitTypeForX" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            ::std::auto_ptr< SimPerformanceTable_InputUnitTypeForX_type > r (
              SimPerformanceTable_InputUnitTypeForX_traits::create (i, f, this));

            if (!this->SimPerformanceTable_InputUnitTypeForX_)
            {
              this->SimPerformanceTable_InputUnitTypeForX_.set (r);
              continue;
            }
          }

          // SimPerformanceTable_MinValY
          //
          if (n.name () == "SimPerformanceTable_MinValY" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            if (!this->SimPerformanceTable_MinValY_)
            {
              this->SimPerformanceTable_MinValY_.set (SimPerformanceTable_MinValY_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerformanceTable_MaxValY
          //
          if (n.name () == "SimPerformanceTable_MaxValY" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            if (!this->SimPerformanceTable_MaxValY_)
            {
              this->SimPerformanceTable_MaxValY_.set (SimPerformanceTable_MaxValY_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerformanceTable_InputUnitTypeForY
          //
          if (n.name () == "SimPerformanceTable_InputUnitTypeForY" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            ::std::auto_ptr< SimPerformanceTable_InputUnitTypeForY_type > r (
              SimPerformanceTable_InputUnitTypeForY_traits::create (i, f, this));

            if (!this->SimPerformanceTable_InputUnitTypeForY_)
            {
              this->SimPerformanceTable_InputUnitTypeForY_.set (r);
              continue;
            }
          }

          // SimPerformanceTable_XValue_1_164
          //
          if (n.name () == "SimPerformanceTable_XValue_1_164" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            ::std::auto_ptr< SimPerformanceTable_XValue_1_164_type > r (
              SimPerformanceTable_XValue_1_164_traits::create (i, f, this));

            if (!this->SimPerformanceTable_XValue_1_164_)
            {
              this->SimPerformanceTable_XValue_1_164_.set (r);
              continue;
            }
          }

          // SimPerformanceTable_YValue_1_164
          //
          if (n.name () == "SimPerformanceTable_YValue_1_164" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            ::std::auto_ptr< SimPerformanceTable_YValue_1_164_type > r (
              SimPerformanceTable_YValue_1_164_traits::create (i, f, this));

            if (!this->SimPerformanceTable_YValue_1_164_)
            {
              this->SimPerformanceTable_YValue_1_164_.set (r);
              continue;
            }
          }

          // SimPerformanceTable_OutputValue_1_164
          //
          if (n.name () == "SimPerformanceTable_OutputValue_1_164" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeometry")
          {
            ::std::auto_ptr< SimPerformanceTable_OutputValue_1_164_type > r (
              SimPerformanceTable_OutputValue_1_164_traits::create (i, f, this));

            if (!this->SimPerformanceTable_OutputValue_1_164_)
            {
              this->SimPerformanceTable_OutputValue_1_164_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimPerformanceTable_Variable_TwoIndependent* SimPerformanceTable_Variable_TwoIndependent::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimPerformanceTable_Variable_TwoIndependent (*this, f, c);
      }

      SimPerformanceTable_Variable_TwoIndependent& SimPerformanceTable_Variable_TwoIndependent::
      operator= (const SimPerformanceTable_Variable_TwoIndependent& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeometry::SimPerformanceTable_Variable& > (*this) = x;
          this->SimPerformanceTable_MinValX_ = x.SimPerformanceTable_MinValX_;
          this->SimPerformanceTable_MaxValX_ = x.SimPerformanceTable_MaxValX_;
          this->SimPerformanceTable_InputUnitTypeForX_ = x.SimPerformanceTable_InputUnitTypeForX_;
          this->SimPerformanceTable_MinValY_ = x.SimPerformanceTable_MinValY_;
          this->SimPerformanceTable_MaxValY_ = x.SimPerformanceTable_MaxValY_;
          this->SimPerformanceTable_InputUnitTypeForY_ = x.SimPerformanceTable_InputUnitTypeForY_;
          this->SimPerformanceTable_XValue_1_164_ = x.SimPerformanceTable_XValue_1_164_;
          this->SimPerformanceTable_YValue_1_164_ = x.SimPerformanceTable_YValue_1_164_;
          this->SimPerformanceTable_OutputValue_1_164_ = x.SimPerformanceTable_OutputValue_1_164_;
        }

        return *this;
      }

      SimPerformanceTable_Variable_TwoIndependent::
      ~SimPerformanceTable_Variable_TwoIndependent ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeometry
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

