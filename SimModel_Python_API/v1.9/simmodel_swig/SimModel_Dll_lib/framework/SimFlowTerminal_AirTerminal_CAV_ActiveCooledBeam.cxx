// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam
      // 

      const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_Name_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_Name () const
      {
        return this->SimFlowTerm_Name_;
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_Name_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_Name ()
      {
        return this->SimFlowTerm_Name_;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_Name (const SimFlowTerm_Name_type& x)
      {
        this->SimFlowTerm_Name_.set (x);
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_Name (const SimFlowTerm_Name_optional& x)
      {
        this->SimFlowTerm_Name_ = x;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_Name (::std::auto_ptr< SimFlowTerm_Name_type > x)
      {
        this->SimFlowTerm_Name_.set (x);
      }

      const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_AvailSchedName_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_AvailSchedName () const
      {
        return this->SimFlowTerm_AvailSchedName_;
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_AvailSchedName_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_AvailSchedName ()
      {
        return this->SimFlowTerm_AvailSchedName_;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_AvailSchedName (const SimFlowTerm_AvailSchedName_type& x)
      {
        this->SimFlowTerm_AvailSchedName_.set (x);
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_AvailSchedName (const SimFlowTerm_AvailSchedName_optional& x)
      {
        this->SimFlowTerm_AvailSchedName_ = x;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_AvailSchedName (::std::auto_ptr< SimFlowTerm_AvailSchedName_type > x)
      {
        this->SimFlowTerm_AvailSchedName_.set (x);
      }

      const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_SupplyAirInletNodeName_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_SupplyAirInletNodeName () const
      {
        return this->SimFlowTerm_SupplyAirInletNodeName_;
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_SupplyAirInletNodeName_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_SupplyAirInletNodeName ()
      {
        return this->SimFlowTerm_SupplyAirInletNodeName_;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_SupplyAirInletNodeName (const SimFlowTerm_SupplyAirInletNodeName_type& x)
      {
        this->SimFlowTerm_SupplyAirInletNodeName_.set (x);
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_SupplyAirInletNodeName (const SimFlowTerm_SupplyAirInletNodeName_optional& x)
      {
        this->SimFlowTerm_SupplyAirInletNodeName_ = x;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_SupplyAirInletNodeName (::std::auto_ptr< SimFlowTerm_SupplyAirInletNodeName_type > x)
      {
        this->SimFlowTerm_SupplyAirInletNodeName_.set (x);
      }

      const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_CoolBeamType_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_CoolBeamType () const
      {
        return this->SimFlowTerm_CoolBeamType_;
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_CoolBeamType_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_CoolBeamType ()
      {
        return this->SimFlowTerm_CoolBeamType_;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_CoolBeamType (const SimFlowTerm_CoolBeamType_type& x)
      {
        this->SimFlowTerm_CoolBeamType_.set (x);
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_CoolBeamType (const SimFlowTerm_CoolBeamType_optional& x)
      {
        this->SimFlowTerm_CoolBeamType_ = x;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_CoolBeamType (::std::auto_ptr< SimFlowTerm_CoolBeamType_type > x)
      {
        this->SimFlowTerm_CoolBeamType_.set (x);
      }

      const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_SupplyAirOutletNodeName_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_SupplyAirOutletNodeName () const
      {
        return this->SimFlowTerm_SupplyAirOutletNodeName_;
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_SupplyAirOutletNodeName_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_SupplyAirOutletNodeName ()
      {
        return this->SimFlowTerm_SupplyAirOutletNodeName_;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_SupplyAirOutletNodeName (const SimFlowTerm_SupplyAirOutletNodeName_type& x)
      {
        this->SimFlowTerm_SupplyAirOutletNodeName_.set (x);
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_SupplyAirOutletNodeName (const SimFlowTerm_SupplyAirOutletNodeName_optional& x)
      {
        this->SimFlowTerm_SupplyAirOutletNodeName_ = x;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_SupplyAirOutletNodeName (::std::auto_ptr< SimFlowTerm_SupplyAirOutletNodeName_type > x)
      {
        this->SimFlowTerm_SupplyAirOutletNodeName_.set (x);
      }

      const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_ChilledWaterInletNodeName_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ChilledWaterInletNodeName () const
      {
        return this->SimFlowTerm_ChilledWaterInletNodeName_;
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_ChilledWaterInletNodeName_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ChilledWaterInletNodeName ()
      {
        return this->SimFlowTerm_ChilledWaterInletNodeName_;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ChilledWaterInletNodeName (const SimFlowTerm_ChilledWaterInletNodeName_type& x)
      {
        this->SimFlowTerm_ChilledWaterInletNodeName_.set (x);
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ChilledWaterInletNodeName (const SimFlowTerm_ChilledWaterInletNodeName_optional& x)
      {
        this->SimFlowTerm_ChilledWaterInletNodeName_ = x;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ChilledWaterInletNodeName (::std::auto_ptr< SimFlowTerm_ChilledWaterInletNodeName_type > x)
      {
        this->SimFlowTerm_ChilledWaterInletNodeName_.set (x);
      }

      const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_ChilledWaterOutletNodeName_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ChilledWaterOutletNodeName () const
      {
        return this->SimFlowTerm_ChilledWaterOutletNodeName_;
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_ChilledWaterOutletNodeName_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ChilledWaterOutletNodeName ()
      {
        return this->SimFlowTerm_ChilledWaterOutletNodeName_;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ChilledWaterOutletNodeName (const SimFlowTerm_ChilledWaterOutletNodeName_type& x)
      {
        this->SimFlowTerm_ChilledWaterOutletNodeName_.set (x);
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ChilledWaterOutletNodeName (const SimFlowTerm_ChilledWaterOutletNodeName_optional& x)
      {
        this->SimFlowTerm_ChilledWaterOutletNodeName_ = x;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ChilledWaterOutletNodeName (::std::auto_ptr< SimFlowTerm_ChilledWaterOutletNodeName_type > x)
      {
        this->SimFlowTerm_ChilledWaterOutletNodeName_.set (x);
      }

      const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_SupplyAirVolFlowRate_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_SupplyAirVolFlowRate () const
      {
        return this->SimFlowTerm_SupplyAirVolFlowRate_;
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_SupplyAirVolFlowRate_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_SupplyAirVolFlowRate ()
      {
        return this->SimFlowTerm_SupplyAirVolFlowRate_;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_SupplyAirVolFlowRate (const SimFlowTerm_SupplyAirVolFlowRate_type& x)
      {
        this->SimFlowTerm_SupplyAirVolFlowRate_.set (x);
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_SupplyAirVolFlowRate (const SimFlowTerm_SupplyAirVolFlowRate_optional& x)
      {
        this->SimFlowTerm_SupplyAirVolFlowRate_ = x;
      }

      const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_MaxTotalChilledWaterVolFlowRate_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_MaxTotalChilledWaterVolFlowRate () const
      {
        return this->SimFlowTerm_MaxTotalChilledWaterVolFlowRate_;
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_MaxTotalChilledWaterVolFlowRate_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_MaxTotalChilledWaterVolFlowRate ()
      {
        return this->SimFlowTerm_MaxTotalChilledWaterVolFlowRate_;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_MaxTotalChilledWaterVolFlowRate (const SimFlowTerm_MaxTotalChilledWaterVolFlowRate_type& x)
      {
        this->SimFlowTerm_MaxTotalChilledWaterVolFlowRate_.set (x);
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_MaxTotalChilledWaterVolFlowRate (const SimFlowTerm_MaxTotalChilledWaterVolFlowRate_optional& x)
      {
        this->SimFlowTerm_MaxTotalChilledWaterVolFlowRate_ = x;
      }

      const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_NumBeams_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_NumBeams () const
      {
        return this->SimFlowTerm_NumBeams_;
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_NumBeams_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_NumBeams ()
      {
        return this->SimFlowTerm_NumBeams_;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_NumBeams (const SimFlowTerm_NumBeams_type& x)
      {
        this->SimFlowTerm_NumBeams_.set (x);
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_NumBeams (const SimFlowTerm_NumBeams_optional& x)
      {
        this->SimFlowTerm_NumBeams_ = x;
      }

      const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_BeamLength_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_BeamLength () const
      {
        return this->SimFlowTerm_BeamLength_;
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_BeamLength_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_BeamLength ()
      {
        return this->SimFlowTerm_BeamLength_;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_BeamLength (const SimFlowTerm_BeamLength_type& x)
      {
        this->SimFlowTerm_BeamLength_.set (x);
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_BeamLength (const SimFlowTerm_BeamLength_optional& x)
      {
        this->SimFlowTerm_BeamLength_ = x;
      }

      const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_DesignInletWaterTemp_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_DesignInletWaterTemp () const
      {
        return this->SimFlowTerm_DesignInletWaterTemp_;
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_DesignInletWaterTemp_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_DesignInletWaterTemp ()
      {
        return this->SimFlowTerm_DesignInletWaterTemp_;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_DesignInletWaterTemp (const SimFlowTerm_DesignInletWaterTemp_type& x)
      {
        this->SimFlowTerm_DesignInletWaterTemp_.set (x);
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_DesignInletWaterTemp (const SimFlowTerm_DesignInletWaterTemp_optional& x)
      {
        this->SimFlowTerm_DesignInletWaterTemp_ = x;
      }

      const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_DesignOutletWaterTemp_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_DesignOutletWaterTemp () const
      {
        return this->SimFlowTerm_DesignOutletWaterTemp_;
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_DesignOutletWaterTemp_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_DesignOutletWaterTemp ()
      {
        return this->SimFlowTerm_DesignOutletWaterTemp_;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_DesignOutletWaterTemp (const SimFlowTerm_DesignOutletWaterTemp_type& x)
      {
        this->SimFlowTerm_DesignOutletWaterTemp_.set (x);
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_DesignOutletWaterTemp (const SimFlowTerm_DesignOutletWaterTemp_optional& x)
      {
        this->SimFlowTerm_DesignOutletWaterTemp_ = x;
      }

      const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_CoilSurfAreaPerCoilLength_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_CoilSurfAreaPerCoilLength () const
      {
        return this->SimFlowTerm_CoilSurfAreaPerCoilLength_;
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_CoilSurfAreaPerCoilLength_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_CoilSurfAreaPerCoilLength ()
      {
        return this->SimFlowTerm_CoilSurfAreaPerCoilLength_;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_CoilSurfAreaPerCoilLength (const SimFlowTerm_CoilSurfAreaPerCoilLength_type& x)
      {
        this->SimFlowTerm_CoilSurfAreaPerCoilLength_.set (x);
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_CoilSurfAreaPerCoilLength (const SimFlowTerm_CoilSurfAreaPerCoilLength_optional& x)
      {
        this->SimFlowTerm_CoilSurfAreaPerCoilLength_ = x;
      }

      const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_ModelParamA_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamA () const
      {
        return this->SimFlowTerm_ModelParamA_;
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_ModelParamA_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamA ()
      {
        return this->SimFlowTerm_ModelParamA_;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamA (const SimFlowTerm_ModelParamA_type& x)
      {
        this->SimFlowTerm_ModelParamA_.set (x);
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamA (const SimFlowTerm_ModelParamA_optional& x)
      {
        this->SimFlowTerm_ModelParamA_ = x;
      }

      const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_ModelParamN1_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamN1 () const
      {
        return this->SimFlowTerm_ModelParamN1_;
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_ModelParamN1_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamN1 ()
      {
        return this->SimFlowTerm_ModelParamN1_;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamN1 (const SimFlowTerm_ModelParamN1_type& x)
      {
        this->SimFlowTerm_ModelParamN1_.set (x);
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamN1 (const SimFlowTerm_ModelParamN1_optional& x)
      {
        this->SimFlowTerm_ModelParamN1_ = x;
      }

      const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_ModelParamn2_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamn2 () const
      {
        return this->SimFlowTerm_ModelParamn2_;
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_ModelParamn2_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamn2 ()
      {
        return this->SimFlowTerm_ModelParamn2_;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamn2 (const SimFlowTerm_ModelParamn2_type& x)
      {
        this->SimFlowTerm_ModelParamn2_.set (x);
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamn2 (const SimFlowTerm_ModelParamn2_optional& x)
      {
        this->SimFlowTerm_ModelParamn2_ = x;
      }

      const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_ModelParamn3_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamn3 () const
      {
        return this->SimFlowTerm_ModelParamn3_;
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_ModelParamn3_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamn3 ()
      {
        return this->SimFlowTerm_ModelParamn3_;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamn3 (const SimFlowTerm_ModelParamn3_type& x)
      {
        this->SimFlowTerm_ModelParamn3_.set (x);
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamn3 (const SimFlowTerm_ModelParamn3_optional& x)
      {
        this->SimFlowTerm_ModelParamn3_ = x;
      }

      const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_ModelParamA0_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamA0 () const
      {
        return this->SimFlowTerm_ModelParamA0_;
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_ModelParamA0_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamA0 ()
      {
        return this->SimFlowTerm_ModelParamA0_;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamA0 (const SimFlowTerm_ModelParamA0_type& x)
      {
        this->SimFlowTerm_ModelParamA0_.set (x);
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamA0 (const SimFlowTerm_ModelParamA0_optional& x)
      {
        this->SimFlowTerm_ModelParamA0_ = x;
      }

      const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_ModelParamK1_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamK1 () const
      {
        return this->SimFlowTerm_ModelParamK1_;
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_ModelParamK1_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamK1 ()
      {
        return this->SimFlowTerm_ModelParamK1_;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamK1 (const SimFlowTerm_ModelParamK1_type& x)
      {
        this->SimFlowTerm_ModelParamK1_.set (x);
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamK1 (const SimFlowTerm_ModelParamK1_optional& x)
      {
        this->SimFlowTerm_ModelParamK1_ = x;
      }

      const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_ModelParamN_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamN () const
      {
        return this->SimFlowTerm_ModelParamN_;
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_ModelParamN_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamN ()
      {
        return this->SimFlowTerm_ModelParamN_;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamN (const SimFlowTerm_ModelParamN_type& x)
      {
        this->SimFlowTerm_ModelParamN_.set (x);
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_ModelParamN (const SimFlowTerm_ModelParamN_optional& x)
      {
        this->SimFlowTerm_ModelParamN_ = x;
      }

      const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_CoeffInductionKin_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_CoeffInductionKin () const
      {
        return this->SimFlowTerm_CoeffInductionKin_;
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_CoeffInductionKin_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_CoeffInductionKin ()
      {
        return this->SimFlowTerm_CoeffInductionKin_;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_CoeffInductionKin (const SimFlowTerm_CoeffInductionKin_type& x)
      {
        this->SimFlowTerm_CoeffInductionKin_.set (x);
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_CoeffInductionKin (const SimFlowTerm_CoeffInductionKin_optional& x)
      {
        this->SimFlowTerm_CoeffInductionKin_ = x;
      }

      const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_LeavPipesideDiam_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_LeavPipesideDiam () const
      {
        return this->SimFlowTerm_LeavPipesideDiam_;
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::SimFlowTerm_LeavPipesideDiam_optional& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_LeavPipesideDiam ()
      {
        return this->SimFlowTerm_LeavPipesideDiam_;
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_LeavPipesideDiam (const SimFlowTerm_LeavPipesideDiam_type& x)
      {
        this->SimFlowTerm_LeavPipesideDiam_.set (x);
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerm_LeavPipesideDiam (const SimFlowTerm_LeavPipesideDiam_optional& x)
      {
        this->SimFlowTerm_LeavPipesideDiam_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam
      //

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam ()
      : ::schema::simxml::MepModel::SimFlowTerminal_AirTerminal (),
        SimFlowTerm_Name_ (this),
        SimFlowTerm_AvailSchedName_ (this),
        SimFlowTerm_SupplyAirInletNodeName_ (this),
        SimFlowTerm_CoolBeamType_ (this),
        SimFlowTerm_SupplyAirOutletNodeName_ (this),
        SimFlowTerm_ChilledWaterInletNodeName_ (this),
        SimFlowTerm_ChilledWaterOutletNodeName_ (this),
        SimFlowTerm_SupplyAirVolFlowRate_ (this),
        SimFlowTerm_MaxTotalChilledWaterVolFlowRate_ (this),
        SimFlowTerm_NumBeams_ (this),
        SimFlowTerm_BeamLength_ (this),
        SimFlowTerm_DesignInletWaterTemp_ (this),
        SimFlowTerm_DesignOutletWaterTemp_ (this),
        SimFlowTerm_CoilSurfAreaPerCoilLength_ (this),
        SimFlowTerm_ModelParamA_ (this),
        SimFlowTerm_ModelParamN1_ (this),
        SimFlowTerm_ModelParamn2_ (this),
        SimFlowTerm_ModelParamn3_ (this),
        SimFlowTerm_ModelParamA0_ (this),
        SimFlowTerm_ModelParamK1_ (this),
        SimFlowTerm_ModelParamN_ (this),
        SimFlowTerm_CoeffInductionKin_ (this),
        SimFlowTerm_LeavPipesideDiam_ (this)
      {
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowTerminal_AirTerminal (RefId),
        SimFlowTerm_Name_ (this),
        SimFlowTerm_AvailSchedName_ (this),
        SimFlowTerm_SupplyAirInletNodeName_ (this),
        SimFlowTerm_CoolBeamType_ (this),
        SimFlowTerm_SupplyAirOutletNodeName_ (this),
        SimFlowTerm_ChilledWaterInletNodeName_ (this),
        SimFlowTerm_ChilledWaterOutletNodeName_ (this),
        SimFlowTerm_SupplyAirVolFlowRate_ (this),
        SimFlowTerm_MaxTotalChilledWaterVolFlowRate_ (this),
        SimFlowTerm_NumBeams_ (this),
        SimFlowTerm_BeamLength_ (this),
        SimFlowTerm_DesignInletWaterTemp_ (this),
        SimFlowTerm_DesignOutletWaterTemp_ (this),
        SimFlowTerm_CoilSurfAreaPerCoilLength_ (this),
        SimFlowTerm_ModelParamA_ (this),
        SimFlowTerm_ModelParamN1_ (this),
        SimFlowTerm_ModelParamn2_ (this),
        SimFlowTerm_ModelParamn3_ (this),
        SimFlowTerm_ModelParamA0_ (this),
        SimFlowTerm_ModelParamK1_ (this),
        SimFlowTerm_ModelParamN_ (this),
        SimFlowTerm_CoeffInductionKin_ (this),
        SimFlowTerm_LeavPipesideDiam_ (this)
      {
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam (const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam& x,
                                                        ::xml_schema::flags f,
                                                        ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowTerminal_AirTerminal (x, f, c),
        SimFlowTerm_Name_ (x.SimFlowTerm_Name_, f, this),
        SimFlowTerm_AvailSchedName_ (x.SimFlowTerm_AvailSchedName_, f, this),
        SimFlowTerm_SupplyAirInletNodeName_ (x.SimFlowTerm_SupplyAirInletNodeName_, f, this),
        SimFlowTerm_CoolBeamType_ (x.SimFlowTerm_CoolBeamType_, f, this),
        SimFlowTerm_SupplyAirOutletNodeName_ (x.SimFlowTerm_SupplyAirOutletNodeName_, f, this),
        SimFlowTerm_ChilledWaterInletNodeName_ (x.SimFlowTerm_ChilledWaterInletNodeName_, f, this),
        SimFlowTerm_ChilledWaterOutletNodeName_ (x.SimFlowTerm_ChilledWaterOutletNodeName_, f, this),
        SimFlowTerm_SupplyAirVolFlowRate_ (x.SimFlowTerm_SupplyAirVolFlowRate_, f, this),
        SimFlowTerm_MaxTotalChilledWaterVolFlowRate_ (x.SimFlowTerm_MaxTotalChilledWaterVolFlowRate_, f, this),
        SimFlowTerm_NumBeams_ (x.SimFlowTerm_NumBeams_, f, this),
        SimFlowTerm_BeamLength_ (x.SimFlowTerm_BeamLength_, f, this),
        SimFlowTerm_DesignInletWaterTemp_ (x.SimFlowTerm_DesignInletWaterTemp_, f, this),
        SimFlowTerm_DesignOutletWaterTemp_ (x.SimFlowTerm_DesignOutletWaterTemp_, f, this),
        SimFlowTerm_CoilSurfAreaPerCoilLength_ (x.SimFlowTerm_CoilSurfAreaPerCoilLength_, f, this),
        SimFlowTerm_ModelParamA_ (x.SimFlowTerm_ModelParamA_, f, this),
        SimFlowTerm_ModelParamN1_ (x.SimFlowTerm_ModelParamN1_, f, this),
        SimFlowTerm_ModelParamn2_ (x.SimFlowTerm_ModelParamn2_, f, this),
        SimFlowTerm_ModelParamn3_ (x.SimFlowTerm_ModelParamn3_, f, this),
        SimFlowTerm_ModelParamA0_ (x.SimFlowTerm_ModelParamA0_, f, this),
        SimFlowTerm_ModelParamK1_ (x.SimFlowTerm_ModelParamK1_, f, this),
        SimFlowTerm_ModelParamN_ (x.SimFlowTerm_ModelParamN_, f, this),
        SimFlowTerm_CoeffInductionKin_ (x.SimFlowTerm_CoeffInductionKin_, f, this),
        SimFlowTerm_LeavPipesideDiam_ (x.SimFlowTerm_LeavPipesideDiam_, f, this)
      {
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam (const ::xercesc::DOMElement& e,
                                                        ::xml_schema::flags f,
                                                        ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowTerminal_AirTerminal (e, f | ::xml_schema::flags::base, c),
        SimFlowTerm_Name_ (this),
        SimFlowTerm_AvailSchedName_ (this),
        SimFlowTerm_SupplyAirInletNodeName_ (this),
        SimFlowTerm_CoolBeamType_ (this),
        SimFlowTerm_SupplyAirOutletNodeName_ (this),
        SimFlowTerm_ChilledWaterInletNodeName_ (this),
        SimFlowTerm_ChilledWaterOutletNodeName_ (this),
        SimFlowTerm_SupplyAirVolFlowRate_ (this),
        SimFlowTerm_MaxTotalChilledWaterVolFlowRate_ (this),
        SimFlowTerm_NumBeams_ (this),
        SimFlowTerm_BeamLength_ (this),
        SimFlowTerm_DesignInletWaterTemp_ (this),
        SimFlowTerm_DesignOutletWaterTemp_ (this),
        SimFlowTerm_CoilSurfAreaPerCoilLength_ (this),
        SimFlowTerm_ModelParamA_ (this),
        SimFlowTerm_ModelParamN1_ (this),
        SimFlowTerm_ModelParamn2_ (this),
        SimFlowTerm_ModelParamn3_ (this),
        SimFlowTerm_ModelParamA0_ (this),
        SimFlowTerm_ModelParamK1_ (this),
        SimFlowTerm_ModelParamN_ (this),
        SimFlowTerm_CoeffInductionKin_ (this),
        SimFlowTerm_LeavPipesideDiam_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowTerminal_AirTerminal::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowTerm_Name
          //
          if (n.name () == "SimFlowTerm_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_Name_type > r (
              SimFlowTerm_Name_traits::create (i, f, this));

            if (!this->SimFlowTerm_Name_)
            {
              this->SimFlowTerm_Name_.set (r);
              continue;
            }
          }

          // SimFlowTerm_AvailSchedName
          //
          if (n.name () == "SimFlowTerm_AvailSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_AvailSchedName_type > r (
              SimFlowTerm_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowTerm_AvailSchedName_)
            {
              this->SimFlowTerm_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_SupplyAirInletNodeName
          //
          if (n.name () == "SimFlowTerm_SupplyAirInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_SupplyAirInletNodeName_type > r (
              SimFlowTerm_SupplyAirInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowTerm_SupplyAirInletNodeName_)
            {
              this->SimFlowTerm_SupplyAirInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_CoolBeamType
          //
          if (n.name () == "SimFlowTerm_CoolBeamType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_CoolBeamType_type > r (
              SimFlowTerm_CoolBeamType_traits::create (i, f, this));

            if (!this->SimFlowTerm_CoolBeamType_)
            {
              this->SimFlowTerm_CoolBeamType_.set (r);
              continue;
            }
          }

          // SimFlowTerm_SupplyAirOutletNodeName
          //
          if (n.name () == "SimFlowTerm_SupplyAirOutletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_SupplyAirOutletNodeName_type > r (
              SimFlowTerm_SupplyAirOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowTerm_SupplyAirOutletNodeName_)
            {
              this->SimFlowTerm_SupplyAirOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_ChilledWaterInletNodeName
          //
          if (n.name () == "SimFlowTerm_ChilledWaterInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_ChilledWaterInletNodeName_type > r (
              SimFlowTerm_ChilledWaterInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowTerm_ChilledWaterInletNodeName_)
            {
              this->SimFlowTerm_ChilledWaterInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_ChilledWaterOutletNodeName
          //
          if (n.name () == "SimFlowTerm_ChilledWaterOutletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_ChilledWaterOutletNodeName_type > r (
              SimFlowTerm_ChilledWaterOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowTerm_ChilledWaterOutletNodeName_)
            {
              this->SimFlowTerm_ChilledWaterOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_SupplyAirVolFlowRate
          //
          if (n.name () == "SimFlowTerm_SupplyAirVolFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowTerm_SupplyAirVolFlowRate_)
            {
              this->SimFlowTerm_SupplyAirVolFlowRate_.set (SimFlowTerm_SupplyAirVolFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_MaxTotalChilledWaterVolFlowRate
          //
          if (n.name () == "SimFlowTerm_MaxTotalChilledWaterVolFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowTerm_MaxTotalChilledWaterVolFlowRate_)
            {
              this->SimFlowTerm_MaxTotalChilledWaterVolFlowRate_.set (SimFlowTerm_MaxTotalChilledWaterVolFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_NumBeams
          //
          if (n.name () == "SimFlowTerm_NumBeams" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowTerm_NumBeams_)
            {
              this->SimFlowTerm_NumBeams_.set (SimFlowTerm_NumBeams_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_BeamLength
          //
          if (n.name () == "SimFlowTerm_BeamLength" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowTerm_BeamLength_)
            {
              this->SimFlowTerm_BeamLength_.set (SimFlowTerm_BeamLength_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_DesignInletWaterTemp
          //
          if (n.name () == "SimFlowTerm_DesignInletWaterTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowTerm_DesignInletWaterTemp_)
            {
              this->SimFlowTerm_DesignInletWaterTemp_.set (SimFlowTerm_DesignInletWaterTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_DesignOutletWaterTemp
          //
          if (n.name () == "SimFlowTerm_DesignOutletWaterTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowTerm_DesignOutletWaterTemp_)
            {
              this->SimFlowTerm_DesignOutletWaterTemp_.set (SimFlowTerm_DesignOutletWaterTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_CoilSurfAreaPerCoilLength
          //
          if (n.name () == "SimFlowTerm_CoilSurfAreaPerCoilLength" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowTerm_CoilSurfAreaPerCoilLength_)
            {
              this->SimFlowTerm_CoilSurfAreaPerCoilLength_.set (SimFlowTerm_CoilSurfAreaPerCoilLength_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_ModelParamA
          //
          if (n.name () == "SimFlowTerm_ModelParamA" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowTerm_ModelParamA_)
            {
              this->SimFlowTerm_ModelParamA_.set (SimFlowTerm_ModelParamA_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_ModelParamN1
          //
          if (n.name () == "SimFlowTerm_ModelParamN1" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowTerm_ModelParamN1_)
            {
              this->SimFlowTerm_ModelParamN1_.set (SimFlowTerm_ModelParamN1_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_ModelParamn2
          //
          if (n.name () == "SimFlowTerm_ModelParamn2" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowTerm_ModelParamn2_)
            {
              this->SimFlowTerm_ModelParamn2_.set (SimFlowTerm_ModelParamn2_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_ModelParamn3
          //
          if (n.name () == "SimFlowTerm_ModelParamn3" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowTerm_ModelParamn3_)
            {
              this->SimFlowTerm_ModelParamn3_.set (SimFlowTerm_ModelParamn3_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_ModelParamA0
          //
          if (n.name () == "SimFlowTerm_ModelParamA0" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowTerm_ModelParamA0_)
            {
              this->SimFlowTerm_ModelParamA0_.set (SimFlowTerm_ModelParamA0_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_ModelParamK1
          //
          if (n.name () == "SimFlowTerm_ModelParamK1" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowTerm_ModelParamK1_)
            {
              this->SimFlowTerm_ModelParamK1_.set (SimFlowTerm_ModelParamK1_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_ModelParamN
          //
          if (n.name () == "SimFlowTerm_ModelParamN" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowTerm_ModelParamN_)
            {
              this->SimFlowTerm_ModelParamN_.set (SimFlowTerm_ModelParamN_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_CoeffInductionKin
          //
          if (n.name () == "SimFlowTerm_CoeffInductionKin" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowTerm_CoeffInductionKin_)
            {
              this->SimFlowTerm_CoeffInductionKin_.set (SimFlowTerm_CoeffInductionKin_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_LeavPipesideDiam
          //
          if (n.name () == "SimFlowTerm_LeavPipesideDiam" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowTerm_LeavPipesideDiam_)
            {
              this->SimFlowTerm_LeavPipesideDiam_.set (SimFlowTerm_LeavPipesideDiam_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam* SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam (*this, f, c);
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam& SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      operator= (const SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowTerminal_AirTerminal& > (*this) = x;
          this->SimFlowTerm_Name_ = x.SimFlowTerm_Name_;
          this->SimFlowTerm_AvailSchedName_ = x.SimFlowTerm_AvailSchedName_;
          this->SimFlowTerm_SupplyAirInletNodeName_ = x.SimFlowTerm_SupplyAirInletNodeName_;
          this->SimFlowTerm_CoolBeamType_ = x.SimFlowTerm_CoolBeamType_;
          this->SimFlowTerm_SupplyAirOutletNodeName_ = x.SimFlowTerm_SupplyAirOutletNodeName_;
          this->SimFlowTerm_ChilledWaterInletNodeName_ = x.SimFlowTerm_ChilledWaterInletNodeName_;
          this->SimFlowTerm_ChilledWaterOutletNodeName_ = x.SimFlowTerm_ChilledWaterOutletNodeName_;
          this->SimFlowTerm_SupplyAirVolFlowRate_ = x.SimFlowTerm_SupplyAirVolFlowRate_;
          this->SimFlowTerm_MaxTotalChilledWaterVolFlowRate_ = x.SimFlowTerm_MaxTotalChilledWaterVolFlowRate_;
          this->SimFlowTerm_NumBeams_ = x.SimFlowTerm_NumBeams_;
          this->SimFlowTerm_BeamLength_ = x.SimFlowTerm_BeamLength_;
          this->SimFlowTerm_DesignInletWaterTemp_ = x.SimFlowTerm_DesignInletWaterTemp_;
          this->SimFlowTerm_DesignOutletWaterTemp_ = x.SimFlowTerm_DesignOutletWaterTemp_;
          this->SimFlowTerm_CoilSurfAreaPerCoilLength_ = x.SimFlowTerm_CoilSurfAreaPerCoilLength_;
          this->SimFlowTerm_ModelParamA_ = x.SimFlowTerm_ModelParamA_;
          this->SimFlowTerm_ModelParamN1_ = x.SimFlowTerm_ModelParamN1_;
          this->SimFlowTerm_ModelParamn2_ = x.SimFlowTerm_ModelParamn2_;
          this->SimFlowTerm_ModelParamn3_ = x.SimFlowTerm_ModelParamn3_;
          this->SimFlowTerm_ModelParamA0_ = x.SimFlowTerm_ModelParamA0_;
          this->SimFlowTerm_ModelParamK1_ = x.SimFlowTerm_ModelParamK1_;
          this->SimFlowTerm_ModelParamN_ = x.SimFlowTerm_ModelParamN_;
          this->SimFlowTerm_CoeffInductionKin_ = x.SimFlowTerm_CoeffInductionKin_;
          this->SimFlowTerm_LeavPipesideDiam_ = x.SimFlowTerm_LeavPipesideDiam_;
        }

        return *this;
      }

      SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam::
      ~SimFlowTerminal_AirTerminal_CAV_ActiveCooledBeam ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

