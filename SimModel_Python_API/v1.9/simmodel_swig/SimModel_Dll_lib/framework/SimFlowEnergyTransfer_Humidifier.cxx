// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransfer_Humidifier.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_Humidifier
      // 

      const SimFlowEnergyTransfer_Humidifier::SimFlowEnergyTrans_Name_optional& SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_Name () const
      {
        return this->SimFlowEnergyTrans_Name_;
      }

      SimFlowEnergyTransfer_Humidifier::SimFlowEnergyTrans_Name_optional& SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_Name ()
      {
        return this->SimFlowEnergyTrans_Name_;
      }

      void SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_Name (const SimFlowEnergyTrans_Name_type& x)
      {
        this->SimFlowEnergyTrans_Name_.set (x);
      }

      void SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_Name (const SimFlowEnergyTrans_Name_optional& x)
      {
        this->SimFlowEnergyTrans_Name_ = x;
      }

      void SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_Name (::std::auto_ptr< SimFlowEnergyTrans_Name_type > x)
      {
        this->SimFlowEnergyTrans_Name_.set (x);
      }

      const SimFlowEnergyTransfer_Humidifier::SimFlowEnergyTrans_AvailSchedName_optional& SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_AvailSchedName () const
      {
        return this->SimFlowEnergyTrans_AvailSchedName_;
      }

      SimFlowEnergyTransfer_Humidifier::SimFlowEnergyTrans_AvailSchedName_optional& SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_AvailSchedName ()
      {
        return this->SimFlowEnergyTrans_AvailSchedName_;
      }

      void SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_type& x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_.set (x);
      }

      void SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_optional& x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_ = x;
      }

      void SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_AvailSchedName (::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_.set (x);
      }

      const SimFlowEnergyTransfer_Humidifier::SimFlowEnergyTrans_RatedCap_optional& SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_RatedCap () const
      {
        return this->SimFlowEnergyTrans_RatedCap_;
      }

      SimFlowEnergyTransfer_Humidifier::SimFlowEnergyTrans_RatedCap_optional& SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_RatedCap ()
      {
        return this->SimFlowEnergyTrans_RatedCap_;
      }

      void SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_RatedCap (const SimFlowEnergyTrans_RatedCap_type& x)
      {
        this->SimFlowEnergyTrans_RatedCap_.set (x);
      }

      void SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_RatedCap (const SimFlowEnergyTrans_RatedCap_optional& x)
      {
        this->SimFlowEnergyTrans_RatedCap_ = x;
      }

      const SimFlowEnergyTransfer_Humidifier::SimFlowEnergyTrans_AirInNodeName_optional& SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_AirInNodeName () const
      {
        return this->SimFlowEnergyTrans_AirInNodeName_;
      }

      SimFlowEnergyTransfer_Humidifier::SimFlowEnergyTrans_AirInNodeName_optional& SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_AirInNodeName ()
      {
        return this->SimFlowEnergyTrans_AirInNodeName_;
      }

      void SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_AirInNodeName (const SimFlowEnergyTrans_AirInNodeName_type& x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_AirInNodeName (const SimFlowEnergyTrans_AirInNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_ = x;
      }

      void SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_AirInNodeName (::std::auto_ptr< SimFlowEnergyTrans_AirInNodeName_type > x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_Humidifier::SimFlowEnergyTrans_AirOutNodeName_optional& SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_AirOutNodeName () const
      {
        return this->SimFlowEnergyTrans_AirOutNodeName_;
      }

      SimFlowEnergyTransfer_Humidifier::SimFlowEnergyTrans_AirOutNodeName_optional& SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_AirOutNodeName ()
      {
        return this->SimFlowEnergyTrans_AirOutNodeName_;
      }

      void SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_AirOutNodeName (const SimFlowEnergyTrans_AirOutNodeName_type& x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_AirOutNodeName (const SimFlowEnergyTrans_AirOutNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_ = x;
      }

      void SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_AirOutNodeName (::std::auto_ptr< SimFlowEnergyTrans_AirOutNodeName_type > x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_Humidifier::SimFlowEnergyTrans_RatedPwr_optional& SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_RatedPwr () const
      {
        return this->SimFlowEnergyTrans_RatedPwr_;
      }

      SimFlowEnergyTransfer_Humidifier::SimFlowEnergyTrans_RatedPwr_optional& SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_RatedPwr ()
      {
        return this->SimFlowEnergyTrans_RatedPwr_;
      }

      void SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_RatedPwr (const SimFlowEnergyTrans_RatedPwr_type& x)
      {
        this->SimFlowEnergyTrans_RatedPwr_.set (x);
      }

      void SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_RatedPwr (const SimFlowEnergyTrans_RatedPwr_optional& x)
      {
        this->SimFlowEnergyTrans_RatedPwr_ = x;
      }

      const SimFlowEnergyTransfer_Humidifier::SimFlowEnergyTrans_RatedFanPwr_optional& SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_RatedFanPwr () const
      {
        return this->SimFlowEnergyTrans_RatedFanPwr_;
      }

      SimFlowEnergyTransfer_Humidifier::SimFlowEnergyTrans_RatedFanPwr_optional& SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_RatedFanPwr ()
      {
        return this->SimFlowEnergyTrans_RatedFanPwr_;
      }

      void SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_RatedFanPwr (const SimFlowEnergyTrans_RatedFanPwr_type& x)
      {
        this->SimFlowEnergyTrans_RatedFanPwr_.set (x);
      }

      void SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_RatedFanPwr (const SimFlowEnergyTrans_RatedFanPwr_optional& x)
      {
        this->SimFlowEnergyTrans_RatedFanPwr_ = x;
      }

      const SimFlowEnergyTransfer_Humidifier::SimFlowEnergyTrans_StandbyPwr_optional& SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_StandbyPwr () const
      {
        return this->SimFlowEnergyTrans_StandbyPwr_;
      }

      SimFlowEnergyTransfer_Humidifier::SimFlowEnergyTrans_StandbyPwr_optional& SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_StandbyPwr ()
      {
        return this->SimFlowEnergyTrans_StandbyPwr_;
      }

      void SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_StandbyPwr (const SimFlowEnergyTrans_StandbyPwr_type& x)
      {
        this->SimFlowEnergyTrans_StandbyPwr_.set (x);
      }

      void SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_StandbyPwr (const SimFlowEnergyTrans_StandbyPwr_optional& x)
      {
        this->SimFlowEnergyTrans_StandbyPwr_ = x;
      }

      const SimFlowEnergyTransfer_Humidifier::SimFlowEnergyTrans_WaterStorageTankName_optional& SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_WaterStorageTankName () const
      {
        return this->SimFlowEnergyTrans_WaterStorageTankName_;
      }

      SimFlowEnergyTransfer_Humidifier::SimFlowEnergyTrans_WaterStorageTankName_optional& SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_WaterStorageTankName ()
      {
        return this->SimFlowEnergyTrans_WaterStorageTankName_;
      }

      void SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_WaterStorageTankName (const SimFlowEnergyTrans_WaterStorageTankName_type& x)
      {
        this->SimFlowEnergyTrans_WaterStorageTankName_.set (x);
      }

      void SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_WaterStorageTankName (const SimFlowEnergyTrans_WaterStorageTankName_optional& x)
      {
        this->SimFlowEnergyTrans_WaterStorageTankName_ = x;
      }

      void SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTrans_WaterStorageTankName (::std::auto_ptr< SimFlowEnergyTrans_WaterStorageTankName_type > x)
      {
        this->SimFlowEnergyTrans_WaterStorageTankName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_Humidifier
      //

      SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTransfer_Humidifier ()
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer (),
        SimFlowEnergyTrans_Name_ (this),
        SimFlowEnergyTrans_AvailSchedName_ (this),
        SimFlowEnergyTrans_RatedCap_ (this),
        SimFlowEnergyTrans_AirInNodeName_ (this),
        SimFlowEnergyTrans_AirOutNodeName_ (this),
        SimFlowEnergyTrans_RatedPwr_ (this),
        SimFlowEnergyTrans_RatedFanPwr_ (this),
        SimFlowEnergyTrans_StandbyPwr_ (this),
        SimFlowEnergyTrans_WaterStorageTankName_ (this)
      {
      }

      SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTransfer_Humidifier (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer (RefId),
        SimFlowEnergyTrans_Name_ (this),
        SimFlowEnergyTrans_AvailSchedName_ (this),
        SimFlowEnergyTrans_RatedCap_ (this),
        SimFlowEnergyTrans_AirInNodeName_ (this),
        SimFlowEnergyTrans_AirOutNodeName_ (this),
        SimFlowEnergyTrans_RatedPwr_ (this),
        SimFlowEnergyTrans_RatedFanPwr_ (this),
        SimFlowEnergyTrans_StandbyPwr_ (this),
        SimFlowEnergyTrans_WaterStorageTankName_ (this)
      {
      }

      SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTransfer_Humidifier (const SimFlowEnergyTransfer_Humidifier& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer (x, f, c),
        SimFlowEnergyTrans_Name_ (x.SimFlowEnergyTrans_Name_, f, this),
        SimFlowEnergyTrans_AvailSchedName_ (x.SimFlowEnergyTrans_AvailSchedName_, f, this),
        SimFlowEnergyTrans_RatedCap_ (x.SimFlowEnergyTrans_RatedCap_, f, this),
        SimFlowEnergyTrans_AirInNodeName_ (x.SimFlowEnergyTrans_AirInNodeName_, f, this),
        SimFlowEnergyTrans_AirOutNodeName_ (x.SimFlowEnergyTrans_AirOutNodeName_, f, this),
        SimFlowEnergyTrans_RatedPwr_ (x.SimFlowEnergyTrans_RatedPwr_, f, this),
        SimFlowEnergyTrans_RatedFanPwr_ (x.SimFlowEnergyTrans_RatedFanPwr_, f, this),
        SimFlowEnergyTrans_StandbyPwr_ (x.SimFlowEnergyTrans_StandbyPwr_, f, this),
        SimFlowEnergyTrans_WaterStorageTankName_ (x.SimFlowEnergyTrans_WaterStorageTankName_, f, this)
      {
      }

      SimFlowEnergyTransfer_Humidifier::
      SimFlowEnergyTransfer_Humidifier (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer (e, f | ::xml_schema::flags::base, c),
        SimFlowEnergyTrans_Name_ (this),
        SimFlowEnergyTrans_AvailSchedName_ (this),
        SimFlowEnergyTrans_RatedCap_ (this),
        SimFlowEnergyTrans_AirInNodeName_ (this),
        SimFlowEnergyTrans_AirOutNodeName_ (this),
        SimFlowEnergyTrans_RatedPwr_ (this),
        SimFlowEnergyTrans_RatedFanPwr_ (this),
        SimFlowEnergyTrans_StandbyPwr_ (this),
        SimFlowEnergyTrans_WaterStorageTankName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransfer_Humidifier::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowEnergyTransfer::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowEnergyTrans_Name
          //
          if (n.name () == "SimFlowEnergyTrans_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_Name_type > r (
              SimFlowEnergyTrans_Name_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_Name_)
            {
              this->SimFlowEnergyTrans_Name_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_AvailSchedName
          //
          if (n.name () == "SimFlowEnergyTrans_AvailSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > r (
              SimFlowEnergyTrans_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AvailSchedName_)
            {
              this->SimFlowEnergyTrans_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedCap
          //
          if (n.name () == "SimFlowEnergyTrans_RatedCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedCap_)
            {
              this->SimFlowEnergyTrans_RatedCap_.set (SimFlowEnergyTrans_RatedCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_AirInNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_AirInNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AirInNodeName_type > r (
              SimFlowEnergyTrans_AirInNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AirInNodeName_)
            {
              this->SimFlowEnergyTrans_AirInNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_AirOutNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_AirOutNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AirOutNodeName_type > r (
              SimFlowEnergyTrans_AirOutNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AirOutNodeName_)
            {
              this->SimFlowEnergyTrans_AirOutNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedPwr
          //
          if (n.name () == "SimFlowEnergyTrans_RatedPwr" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedPwr_)
            {
              this->SimFlowEnergyTrans_RatedPwr_.set (SimFlowEnergyTrans_RatedPwr_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedFanPwr
          //
          if (n.name () == "SimFlowEnergyTrans_RatedFanPwr" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedFanPwr_)
            {
              this->SimFlowEnergyTrans_RatedFanPwr_.set (SimFlowEnergyTrans_RatedFanPwr_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_StandbyPwr
          //
          if (n.name () == "SimFlowEnergyTrans_StandbyPwr" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_StandbyPwr_)
            {
              this->SimFlowEnergyTrans_StandbyPwr_.set (SimFlowEnergyTrans_StandbyPwr_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_WaterStorageTankName
          //
          if (n.name () == "SimFlowEnergyTrans_WaterStorageTankName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_WaterStorageTankName_type > r (
              SimFlowEnergyTrans_WaterStorageTankName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_WaterStorageTankName_)
            {
              this->SimFlowEnergyTrans_WaterStorageTankName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransfer_Humidifier* SimFlowEnergyTransfer_Humidifier::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransfer_Humidifier (*this, f, c);
      }

      SimFlowEnergyTransfer_Humidifier& SimFlowEnergyTransfer_Humidifier::
      operator= (const SimFlowEnergyTransfer_Humidifier& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowEnergyTransfer& > (*this) = x;
          this->SimFlowEnergyTrans_Name_ = x.SimFlowEnergyTrans_Name_;
          this->SimFlowEnergyTrans_AvailSchedName_ = x.SimFlowEnergyTrans_AvailSchedName_;
          this->SimFlowEnergyTrans_RatedCap_ = x.SimFlowEnergyTrans_RatedCap_;
          this->SimFlowEnergyTrans_AirInNodeName_ = x.SimFlowEnergyTrans_AirInNodeName_;
          this->SimFlowEnergyTrans_AirOutNodeName_ = x.SimFlowEnergyTrans_AirOutNodeName_;
          this->SimFlowEnergyTrans_RatedPwr_ = x.SimFlowEnergyTrans_RatedPwr_;
          this->SimFlowEnergyTrans_RatedFanPwr_ = x.SimFlowEnergyTrans_RatedFanPwr_;
          this->SimFlowEnergyTrans_StandbyPwr_ = x.SimFlowEnergyTrans_StandbyPwr_;
          this->SimFlowEnergyTrans_WaterStorageTankName_ = x.SimFlowEnergyTrans_WaterStorageTankName_;
        }

        return *this;
      }

      SimFlowEnergyTransfer_Humidifier::
      ~SimFlowEnergyTransfer_Humidifier ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

