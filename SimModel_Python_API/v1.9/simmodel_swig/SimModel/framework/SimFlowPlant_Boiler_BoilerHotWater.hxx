// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_PLANT_BOILER_BOILER_HOT_WATER_HXX
#define SIM_FLOW_PLANT_BOILER_BOILER_HOT_WATER_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
//#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowPlant_Boiler_BoilerHotWater;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowplant_boiler.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowPlant_Boiler_BoilerHotWater: public ::schema::simxml::MepModel::SimFlowPlant_Boiler
      {
        public:
        // SimFlowPlant_Name
        //
        typedef ::xml_schema::string SimFlowPlant_Name_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Name_type, false > SimFlowPlant_Name_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Name_type, char > SimFlowPlant_Name_traits;

        const SimFlowPlant_Name_optional&
        SimFlowPlant_Name () const;

        SimFlowPlant_Name_optional&
        SimFlowPlant_Name ();

        void
        SimFlowPlant_Name (const SimFlowPlant_Name_type& x);

        void
        SimFlowPlant_Name (const SimFlowPlant_Name_optional& x);

        void
        SimFlowPlant_Name (::std::auto_ptr< SimFlowPlant_Name_type > p);

        // SimFlowPlant_FuelType
        //
        typedef ::xml_schema::string SimFlowPlant_FuelType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_FuelType_type, false > SimFlowPlant_FuelType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_FuelType_type, char > SimFlowPlant_FuelType_traits;

        const SimFlowPlant_FuelType_optional&
        SimFlowPlant_FuelType () const;

        SimFlowPlant_FuelType_optional&
        SimFlowPlant_FuelType ();

        void
        SimFlowPlant_FuelType (const SimFlowPlant_FuelType_type& x);

        void
        SimFlowPlant_FuelType (const SimFlowPlant_FuelType_optional& x);

        void
        SimFlowPlant_FuelType (::std::auto_ptr< SimFlowPlant_FuelType_type > p);

        // SimFlowPlant_NomCap
        //
        typedef ::xml_schema::double_ SimFlowPlant_NomCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_NomCap_type, true > SimFlowPlant_NomCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_NomCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_NomCap_traits;

        const SimFlowPlant_NomCap_optional&
        SimFlowPlant_NomCap () const;

        SimFlowPlant_NomCap_optional&
        SimFlowPlant_NomCap ();

        void
        SimFlowPlant_NomCap (const SimFlowPlant_NomCap_type& x);

        void
        SimFlowPlant_NomCap (const SimFlowPlant_NomCap_optional& x);

        // SimFlowPlant_NomThermalEff
        //
        typedef ::xml_schema::double_ SimFlowPlant_NomThermalEff_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_NomThermalEff_type, true > SimFlowPlant_NomThermalEff_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_NomThermalEff_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_NomThermalEff_traits;

        const SimFlowPlant_NomThermalEff_optional&
        SimFlowPlant_NomThermalEff () const;

        SimFlowPlant_NomThermalEff_optional&
        SimFlowPlant_NomThermalEff ();

        void
        SimFlowPlant_NomThermalEff (const SimFlowPlant_NomThermalEff_type& x);

        void
        SimFlowPlant_NomThermalEff (const SimFlowPlant_NomThermalEff_optional& x);

        // SimFlowPlant_EfficiencyCurveTempEvaluationVar
        //
        typedef ::xml_schema::string SimFlowPlant_EfficiencyCurveTempEvaluationVar_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_EfficiencyCurveTempEvaluationVar_type, false > SimFlowPlant_EfficiencyCurveTempEvaluationVar_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_EfficiencyCurveTempEvaluationVar_type, char > SimFlowPlant_EfficiencyCurveTempEvaluationVar_traits;

        const SimFlowPlant_EfficiencyCurveTempEvaluationVar_optional&
        SimFlowPlant_EfficiencyCurveTempEvaluationVar () const;

        SimFlowPlant_EfficiencyCurveTempEvaluationVar_optional&
        SimFlowPlant_EfficiencyCurveTempEvaluationVar ();

        void
        SimFlowPlant_EfficiencyCurveTempEvaluationVar (const SimFlowPlant_EfficiencyCurveTempEvaluationVar_type& x);

        void
        SimFlowPlant_EfficiencyCurveTempEvaluationVar (const SimFlowPlant_EfficiencyCurveTempEvaluationVar_optional& x);

        void
        SimFlowPlant_EfficiencyCurveTempEvaluationVar (::std::auto_ptr< SimFlowPlant_EfficiencyCurveTempEvaluationVar_type > p);

        // SimFlowPlant_NrmlizedBoilerEffCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_NrmlizedBoilerEffCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_NrmlizedBoilerEffCurveName_type, false > SimFlowPlant_NrmlizedBoilerEffCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_NrmlizedBoilerEffCurveName_type, char > SimFlowPlant_NrmlizedBoilerEffCurveName_traits;

        const SimFlowPlant_NrmlizedBoilerEffCurveName_optional&
        SimFlowPlant_NrmlizedBoilerEffCurveName () const;

        SimFlowPlant_NrmlizedBoilerEffCurveName_optional&
        SimFlowPlant_NrmlizedBoilerEffCurveName ();

        void
        SimFlowPlant_NrmlizedBoilerEffCurveName (const SimFlowPlant_NrmlizedBoilerEffCurveName_type& x);

        void
        SimFlowPlant_NrmlizedBoilerEffCurveName (const SimFlowPlant_NrmlizedBoilerEffCurveName_optional& x);

        void
        SimFlowPlant_NrmlizedBoilerEffCurveName (::std::auto_ptr< SimFlowPlant_NrmlizedBoilerEffCurveName_type > p);

        // SimFlowPlant_DesignWaterOutletTemp
        //
        typedef ::xml_schema::double_ SimFlowPlant_DesignWaterOutletTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_DesignWaterOutletTemp_type, true > SimFlowPlant_DesignWaterOutletTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_DesignWaterOutletTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_DesignWaterOutletTemp_traits;

        const SimFlowPlant_DesignWaterOutletTemp_optional&
        SimFlowPlant_DesignWaterOutletTemp () const;

        SimFlowPlant_DesignWaterOutletTemp_optional&
        SimFlowPlant_DesignWaterOutletTemp ();

        void
        SimFlowPlant_DesignWaterOutletTemp (const SimFlowPlant_DesignWaterOutletTemp_type& x);

        void
        SimFlowPlant_DesignWaterOutletTemp (const SimFlowPlant_DesignWaterOutletTemp_optional& x);

        // SimFlowPlant_DesignWaterFlowRate
        //
        typedef ::xml_schema::double_ SimFlowPlant_DesignWaterFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_DesignWaterFlowRate_type, true > SimFlowPlant_DesignWaterFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_DesignWaterFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_DesignWaterFlowRate_traits;

        const SimFlowPlant_DesignWaterFlowRate_optional&
        SimFlowPlant_DesignWaterFlowRate () const;

        SimFlowPlant_DesignWaterFlowRate_optional&
        SimFlowPlant_DesignWaterFlowRate ();

        void
        SimFlowPlant_DesignWaterFlowRate (const SimFlowPlant_DesignWaterFlowRate_type& x);

        void
        SimFlowPlant_DesignWaterFlowRate (const SimFlowPlant_DesignWaterFlowRate_optional& x);

        // SimFlowPlant_MinPartLoadRatio
        //
        typedef ::xml_schema::double_ SimFlowPlant_MinPartLoadRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_MinPartLoadRatio_type, true > SimFlowPlant_MinPartLoadRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_MinPartLoadRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_MinPartLoadRatio_traits;

        const SimFlowPlant_MinPartLoadRatio_optional&
        SimFlowPlant_MinPartLoadRatio () const;

        SimFlowPlant_MinPartLoadRatio_optional&
        SimFlowPlant_MinPartLoadRatio ();

        void
        SimFlowPlant_MinPartLoadRatio (const SimFlowPlant_MinPartLoadRatio_type& x);

        void
        SimFlowPlant_MinPartLoadRatio (const SimFlowPlant_MinPartLoadRatio_optional& x);

        // SimFlowPlant_MaxPartLoadRatio
        //
        typedef ::xml_schema::double_ SimFlowPlant_MaxPartLoadRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_MaxPartLoadRatio_type, true > SimFlowPlant_MaxPartLoadRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_MaxPartLoadRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_MaxPartLoadRatio_traits;

        const SimFlowPlant_MaxPartLoadRatio_optional&
        SimFlowPlant_MaxPartLoadRatio () const;

        SimFlowPlant_MaxPartLoadRatio_optional&
        SimFlowPlant_MaxPartLoadRatio ();

        void
        SimFlowPlant_MaxPartLoadRatio (const SimFlowPlant_MaxPartLoadRatio_type& x);

        void
        SimFlowPlant_MaxPartLoadRatio (const SimFlowPlant_MaxPartLoadRatio_optional& x);

        // SimFlowPlant_OptimumPartLoadRatio
        //
        typedef ::xml_schema::double_ SimFlowPlant_OptimumPartLoadRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_OptimumPartLoadRatio_type, true > SimFlowPlant_OptimumPartLoadRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_OptimumPartLoadRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_OptimumPartLoadRatio_traits;

        const SimFlowPlant_OptimumPartLoadRatio_optional&
        SimFlowPlant_OptimumPartLoadRatio () const;

        SimFlowPlant_OptimumPartLoadRatio_optional&
        SimFlowPlant_OptimumPartLoadRatio ();

        void
        SimFlowPlant_OptimumPartLoadRatio (const SimFlowPlant_OptimumPartLoadRatio_type& x);

        void
        SimFlowPlant_OptimumPartLoadRatio (const SimFlowPlant_OptimumPartLoadRatio_optional& x);

        // SimFlowPlant_BoilerWaterInletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_BoilerWaterInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_BoilerWaterInletNodeName_type, false > SimFlowPlant_BoilerWaterInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_BoilerWaterInletNodeName_type, char > SimFlowPlant_BoilerWaterInletNodeName_traits;

        const SimFlowPlant_BoilerWaterInletNodeName_optional&
        SimFlowPlant_BoilerWaterInletNodeName () const;

        SimFlowPlant_BoilerWaterInletNodeName_optional&
        SimFlowPlant_BoilerWaterInletNodeName ();

        void
        SimFlowPlant_BoilerWaterInletNodeName (const SimFlowPlant_BoilerWaterInletNodeName_type& x);

        void
        SimFlowPlant_BoilerWaterInletNodeName (const SimFlowPlant_BoilerWaterInletNodeName_optional& x);

        void
        SimFlowPlant_BoilerWaterInletNodeName (::std::auto_ptr< SimFlowPlant_BoilerWaterInletNodeName_type > p);

        // SimFlowPlant_BoilerWaterOutletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_BoilerWaterOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_BoilerWaterOutletNodeName_type, false > SimFlowPlant_BoilerWaterOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_BoilerWaterOutletNodeName_type, char > SimFlowPlant_BoilerWaterOutletNodeName_traits;

        const SimFlowPlant_BoilerWaterOutletNodeName_optional&
        SimFlowPlant_BoilerWaterOutletNodeName () const;

        SimFlowPlant_BoilerWaterOutletNodeName_optional&
        SimFlowPlant_BoilerWaterOutletNodeName ();

        void
        SimFlowPlant_BoilerWaterOutletNodeName (const SimFlowPlant_BoilerWaterOutletNodeName_type& x);

        void
        SimFlowPlant_BoilerWaterOutletNodeName (const SimFlowPlant_BoilerWaterOutletNodeName_optional& x);

        void
        SimFlowPlant_BoilerWaterOutletNodeName (::std::auto_ptr< SimFlowPlant_BoilerWaterOutletNodeName_type > p);

        // SimFlowPlant_WaterOutletUpTempLimit
        //
        typedef ::xml_schema::double_ SimFlowPlant_WaterOutletUpTempLimit_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_WaterOutletUpTempLimit_type, true > SimFlowPlant_WaterOutletUpTempLimit_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_WaterOutletUpTempLimit_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_WaterOutletUpTempLimit_traits;

        const SimFlowPlant_WaterOutletUpTempLimit_optional&
        SimFlowPlant_WaterOutletUpTempLimit () const;

        SimFlowPlant_WaterOutletUpTempLimit_optional&
        SimFlowPlant_WaterOutletUpTempLimit ();

        void
        SimFlowPlant_WaterOutletUpTempLimit (const SimFlowPlant_WaterOutletUpTempLimit_type& x);

        void
        SimFlowPlant_WaterOutletUpTempLimit (const SimFlowPlant_WaterOutletUpTempLimit_optional& x);

        // SimFlowPlant_BoilerFlowMode
        //
        typedef ::xml_schema::string SimFlowPlant_BoilerFlowMode_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_BoilerFlowMode_type, false > SimFlowPlant_BoilerFlowMode_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_BoilerFlowMode_type, char > SimFlowPlant_BoilerFlowMode_traits;

        const SimFlowPlant_BoilerFlowMode_optional&
        SimFlowPlant_BoilerFlowMode () const;

        SimFlowPlant_BoilerFlowMode_optional&
        SimFlowPlant_BoilerFlowMode ();

        void
        SimFlowPlant_BoilerFlowMode (const SimFlowPlant_BoilerFlowMode_type& x);

        void
        SimFlowPlant_BoilerFlowMode (const SimFlowPlant_BoilerFlowMode_optional& x);

        void
        SimFlowPlant_BoilerFlowMode (::std::auto_ptr< SimFlowPlant_BoilerFlowMode_type > p);

        // SimFlowPlant_ParasiticElecLoad
        //
        typedef ::xml_schema::double_ SimFlowPlant_ParasiticElecLoad_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_ParasiticElecLoad_type, true > SimFlowPlant_ParasiticElecLoad_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_ParasiticElecLoad_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_ParasiticElecLoad_traits;

        const SimFlowPlant_ParasiticElecLoad_optional&
        SimFlowPlant_ParasiticElecLoad () const;

        SimFlowPlant_ParasiticElecLoad_optional&
        SimFlowPlant_ParasiticElecLoad ();

        void
        SimFlowPlant_ParasiticElecLoad (const SimFlowPlant_ParasiticElecLoad_type& x);

        void
        SimFlowPlant_ParasiticElecLoad (const SimFlowPlant_ParasiticElecLoad_optional& x);

        // SimFlowPlant_SizingFactor
        //
        typedef ::xml_schema::double_ SimFlowPlant_SizingFactor_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_SizingFactor_type, true > SimFlowPlant_SizingFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_SizingFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_SizingFactor_traits;

        const SimFlowPlant_SizingFactor_optional&
        SimFlowPlant_SizingFactor () const;

        SimFlowPlant_SizingFactor_optional&
        SimFlowPlant_SizingFactor ();

        void
        SimFlowPlant_SizingFactor (const SimFlowPlant_SizingFactor_type& x);

        void
        SimFlowPlant_SizingFactor (const SimFlowPlant_SizingFactor_optional& x);

        // Constructors.
        //
        SimFlowPlant_Boiler_BoilerHotWater ();

        SimFlowPlant_Boiler_BoilerHotWater (const RefId_type&);

        SimFlowPlant_Boiler_BoilerHotWater (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

        SimFlowPlant_Boiler_BoilerHotWater (const SimFlowPlant_Boiler_BoilerHotWater& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

        virtual SimFlowPlant_Boiler_BoilerHotWater*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowPlant_Boiler_BoilerHotWater&
        operator= (const SimFlowPlant_Boiler_BoilerHotWater& x);

        virtual 
        ~SimFlowPlant_Boiler_BoilerHotWater ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowPlant_Name_optional SimFlowPlant_Name_;
        SimFlowPlant_FuelType_optional SimFlowPlant_FuelType_;
        SimFlowPlant_NomCap_optional SimFlowPlant_NomCap_;
        SimFlowPlant_NomThermalEff_optional SimFlowPlant_NomThermalEff_;
        SimFlowPlant_EfficiencyCurveTempEvaluationVar_optional SimFlowPlant_EfficiencyCurveTempEvaluationVar_;
        SimFlowPlant_NrmlizedBoilerEffCurveName_optional SimFlowPlant_NrmlizedBoilerEffCurveName_;
        SimFlowPlant_DesignWaterOutletTemp_optional SimFlowPlant_DesignWaterOutletTemp_;
        SimFlowPlant_DesignWaterFlowRate_optional SimFlowPlant_DesignWaterFlowRate_;
        SimFlowPlant_MinPartLoadRatio_optional SimFlowPlant_MinPartLoadRatio_;
        SimFlowPlant_MaxPartLoadRatio_optional SimFlowPlant_MaxPartLoadRatio_;
        SimFlowPlant_OptimumPartLoadRatio_optional SimFlowPlant_OptimumPartLoadRatio_;
        SimFlowPlant_BoilerWaterInletNodeName_optional SimFlowPlant_BoilerWaterInletNodeName_;
        SimFlowPlant_BoilerWaterOutletNodeName_optional SimFlowPlant_BoilerWaterOutletNodeName_;
        SimFlowPlant_WaterOutletUpTempLimit_optional SimFlowPlant_WaterOutletUpTempLimit_;
        SimFlowPlant_BoilerFlowMode_optional SimFlowPlant_BoilerFlowMode_;
        SimFlowPlant_ParasiticElecLoad_optional SimFlowPlant_ParasiticElecLoad_;
        SimFlowPlant_SizingFactor_optional SimFlowPlant_SizingFactor_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_PLANT_BOILER_BOILER_HOT_WATER_HXX
