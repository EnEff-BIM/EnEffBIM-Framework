// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_ENERGY_TRANSFER_DEHUMIDIFIER_NO_FANS_HXX
#define SIM_FLOW_ENERGY_TRANSFER_DEHUMIDIFIER_NO_FANS_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowEnergyTransfer_Dehumidifier_NoFans;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowenergytransfer_dehumidifier.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowEnergyTransfer_Dehumidifier_NoFans: public ::schema::simxml::MepModel::SimFlowEnergyTransfer_Dehumidifier
      {
        public:
        // SimFlowEnergyTrans_CntlType
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_CntlType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CntlType_type > SimFlowEnergyTrans_CntlType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CntlType_type, char > SimFlowEnergyTrans_CntlType_traits;

        const SimFlowEnergyTrans_CntlType_optional&
        SimFlowEnergyTrans_CntlType () const;

        SimFlowEnergyTrans_CntlType_optional&
        SimFlowEnergyTrans_CntlType ();

        void
        SimFlowEnergyTrans_CntlType (const SimFlowEnergyTrans_CntlType_type& x);

        void
        SimFlowEnergyTrans_CntlType (const SimFlowEnergyTrans_CntlType_optional& x);

        void
        SimFlowEnergyTrans_CntlType (::std::auto_ptr< SimFlowEnergyTrans_CntlType_type > p);

        // SimFlowEnergyTrans_ProcAirInletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_ProcAirInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_ProcAirInletNodeName_type > SimFlowEnergyTrans_ProcAirInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_ProcAirInletNodeName_type, char > SimFlowEnergyTrans_ProcAirInletNodeName_traits;

        const SimFlowEnergyTrans_ProcAirInletNodeName_optional&
        SimFlowEnergyTrans_ProcAirInletNodeName () const;

        SimFlowEnergyTrans_ProcAirInletNodeName_optional&
        SimFlowEnergyTrans_ProcAirInletNodeName ();

        void
        SimFlowEnergyTrans_ProcAirInletNodeName (const SimFlowEnergyTrans_ProcAirInletNodeName_type& x);

        void
        SimFlowEnergyTrans_ProcAirInletNodeName (const SimFlowEnergyTrans_ProcAirInletNodeName_optional& x);

        void
        SimFlowEnergyTrans_ProcAirInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_ProcAirInletNodeName_type > p);

        // SimFlowEnergyTrans_ProcAirOutletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_ProcAirOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_ProcAirOutletNodeName_type > SimFlowEnergyTrans_ProcAirOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_ProcAirOutletNodeName_type, char > SimFlowEnergyTrans_ProcAirOutletNodeName_traits;

        const SimFlowEnergyTrans_ProcAirOutletNodeName_optional&
        SimFlowEnergyTrans_ProcAirOutletNodeName () const;

        SimFlowEnergyTrans_ProcAirOutletNodeName_optional&
        SimFlowEnergyTrans_ProcAirOutletNodeName ();

        void
        SimFlowEnergyTrans_ProcAirOutletNodeName (const SimFlowEnergyTrans_ProcAirOutletNodeName_type& x);

        void
        SimFlowEnergyTrans_ProcAirOutletNodeName (const SimFlowEnergyTrans_ProcAirOutletNodeName_optional& x);

        void
        SimFlowEnergyTrans_ProcAirOutletNodeName (::std::auto_ptr< SimFlowEnergyTrans_ProcAirOutletNodeName_type > p);

        // SimFlowEnergyTrans_RegenAirInletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_RegenAirInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RegenAirInletNodeName_type > SimFlowEnergyTrans_RegenAirInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RegenAirInletNodeName_type, char > SimFlowEnergyTrans_RegenAirInletNodeName_traits;

        const SimFlowEnergyTrans_RegenAirInletNodeName_optional&
        SimFlowEnergyTrans_RegenAirInletNodeName () const;

        SimFlowEnergyTrans_RegenAirInletNodeName_optional&
        SimFlowEnergyTrans_RegenAirInletNodeName ();

        void
        SimFlowEnergyTrans_RegenAirInletNodeName (const SimFlowEnergyTrans_RegenAirInletNodeName_type& x);

        void
        SimFlowEnergyTrans_RegenAirInletNodeName (const SimFlowEnergyTrans_RegenAirInletNodeName_optional& x);

        void
        SimFlowEnergyTrans_RegenAirInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_RegenAirInletNodeName_type > p);

        // SimFlowEnergyTrans_RegenFanInletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_RegenFanInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RegenFanInletNodeName_type > SimFlowEnergyTrans_RegenFanInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RegenFanInletNodeName_type, char > SimFlowEnergyTrans_RegenFanInletNodeName_traits;

        const SimFlowEnergyTrans_RegenFanInletNodeName_optional&
        SimFlowEnergyTrans_RegenFanInletNodeName () const;

        SimFlowEnergyTrans_RegenFanInletNodeName_optional&
        SimFlowEnergyTrans_RegenFanInletNodeName ();

        void
        SimFlowEnergyTrans_RegenFanInletNodeName (const SimFlowEnergyTrans_RegenFanInletNodeName_type& x);

        void
        SimFlowEnergyTrans_RegenFanInletNodeName (const SimFlowEnergyTrans_RegenFanInletNodeName_optional& x);

        void
        SimFlowEnergyTrans_RegenFanInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_RegenFanInletNodeName_type > p);

        // SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_type > SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_traits;

        const SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_optional&
        SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint () const;

        SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_optional&
        SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint ();

        void
        SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint (const SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_type& x);

        void
        SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint (const SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_optional& x);

        // SimFlowEnergyTrans_NomProcAirFlowRate
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_NomProcAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_NomProcAirFlowRate_type > SimFlowEnergyTrans_NomProcAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_NomProcAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_NomProcAirFlowRate_traits;

        const SimFlowEnergyTrans_NomProcAirFlowRate_optional&
        SimFlowEnergyTrans_NomProcAirFlowRate () const;

        SimFlowEnergyTrans_NomProcAirFlowRate_optional&
        SimFlowEnergyTrans_NomProcAirFlowRate ();

        void
        SimFlowEnergyTrans_NomProcAirFlowRate (const SimFlowEnergyTrans_NomProcAirFlowRate_type& x);

        void
        SimFlowEnergyTrans_NomProcAirFlowRate (const SimFlowEnergyTrans_NomProcAirFlowRate_optional& x);

        // SimFlowEnergyTrans_NomProcAirVelo
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_NomProcAirVelo_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_NomProcAirVelo_type > SimFlowEnergyTrans_NomProcAirVelo_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_NomProcAirVelo_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_NomProcAirVelo_traits;

        const SimFlowEnergyTrans_NomProcAirVelo_optional&
        SimFlowEnergyTrans_NomProcAirVelo () const;

        SimFlowEnergyTrans_NomProcAirVelo_optional&
        SimFlowEnergyTrans_NomProcAirVelo ();

        void
        SimFlowEnergyTrans_NomProcAirVelo (const SimFlowEnergyTrans_NomProcAirVelo_type& x);

        void
        SimFlowEnergyTrans_NomProcAirVelo (const SimFlowEnergyTrans_NomProcAirVelo_optional& x);

        // SimFlowEnergyTrans_RotorPwr
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RotorPwr_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RotorPwr_type > SimFlowEnergyTrans_RotorPwr_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RotorPwr_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RotorPwr_traits;

        const SimFlowEnergyTrans_RotorPwr_optional&
        SimFlowEnergyTrans_RotorPwr () const;

        SimFlowEnergyTrans_RotorPwr_optional&
        SimFlowEnergyTrans_RotorPwr ();

        void
        SimFlowEnergyTrans_RotorPwr (const SimFlowEnergyTrans_RotorPwr_type& x);

        void
        SimFlowEnergyTrans_RotorPwr (const SimFlowEnergyTrans_RotorPwr_optional& x);

        // SimFlowEnergyTrans_RegenCoilObjType
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_RegenCoilObjType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RegenCoilObjType_type > SimFlowEnergyTrans_RegenCoilObjType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RegenCoilObjType_type, char > SimFlowEnergyTrans_RegenCoilObjType_traits;

        const SimFlowEnergyTrans_RegenCoilObjType_optional&
        SimFlowEnergyTrans_RegenCoilObjType () const;

        SimFlowEnergyTrans_RegenCoilObjType_optional&
        SimFlowEnergyTrans_RegenCoilObjType ();

        void
        SimFlowEnergyTrans_RegenCoilObjType (const SimFlowEnergyTrans_RegenCoilObjType_type& x);

        void
        SimFlowEnergyTrans_RegenCoilObjType (const SimFlowEnergyTrans_RegenCoilObjType_optional& x);

        void
        SimFlowEnergyTrans_RegenCoilObjType (::std::auto_ptr< SimFlowEnergyTrans_RegenCoilObjType_type > p);

        // SimFlowEnergyTrans_RegenCoilName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_RegenCoilName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RegenCoilName_type > SimFlowEnergyTrans_RegenCoilName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RegenCoilName_type, char > SimFlowEnergyTrans_RegenCoilName_traits;

        const SimFlowEnergyTrans_RegenCoilName_optional&
        SimFlowEnergyTrans_RegenCoilName () const;

        SimFlowEnergyTrans_RegenCoilName_optional&
        SimFlowEnergyTrans_RegenCoilName ();

        void
        SimFlowEnergyTrans_RegenCoilName (const SimFlowEnergyTrans_RegenCoilName_type& x);

        void
        SimFlowEnergyTrans_RegenCoilName (const SimFlowEnergyTrans_RegenCoilName_optional& x);

        void
        SimFlowEnergyTrans_RegenCoilName (::std::auto_ptr< SimFlowEnergyTrans_RegenCoilName_type > p);

        // SimFlowEnergyTrans_RegenFanObjType
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_RegenFanObjType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RegenFanObjType_type > SimFlowEnergyTrans_RegenFanObjType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RegenFanObjType_type, char > SimFlowEnergyTrans_RegenFanObjType_traits;

        const SimFlowEnergyTrans_RegenFanObjType_optional&
        SimFlowEnergyTrans_RegenFanObjType () const;

        SimFlowEnergyTrans_RegenFanObjType_optional&
        SimFlowEnergyTrans_RegenFanObjType ();

        void
        SimFlowEnergyTrans_RegenFanObjType (const SimFlowEnergyTrans_RegenFanObjType_type& x);

        void
        SimFlowEnergyTrans_RegenFanObjType (const SimFlowEnergyTrans_RegenFanObjType_optional& x);

        void
        SimFlowEnergyTrans_RegenFanObjType (::std::auto_ptr< SimFlowEnergyTrans_RegenFanObjType_type > p);

        // SimFlowEnergyTrans_RegenFanName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_RegenFanName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RegenFanName_type > SimFlowEnergyTrans_RegenFanName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RegenFanName_type, char > SimFlowEnergyTrans_RegenFanName_traits;

        const SimFlowEnergyTrans_RegenFanName_optional&
        SimFlowEnergyTrans_RegenFanName () const;

        SimFlowEnergyTrans_RegenFanName_optional&
        SimFlowEnergyTrans_RegenFanName ();

        void
        SimFlowEnergyTrans_RegenFanName (const SimFlowEnergyTrans_RegenFanName_type& x);

        void
        SimFlowEnergyTrans_RegenFanName (const SimFlowEnergyTrans_RegenFanName_optional& x);

        void
        SimFlowEnergyTrans_RegenFanName (::std::auto_ptr< SimFlowEnergyTrans_RegenFanName_type > p);

        // SimFlowEnergyTrans_PerfModelType
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_PerfModelType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_PerfModelType_type > SimFlowEnergyTrans_PerfModelType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_PerfModelType_type, char > SimFlowEnergyTrans_PerfModelType_traits;

        const SimFlowEnergyTrans_PerfModelType_optional&
        SimFlowEnergyTrans_PerfModelType () const;

        SimFlowEnergyTrans_PerfModelType_optional&
        SimFlowEnergyTrans_PerfModelType ();

        void
        SimFlowEnergyTrans_PerfModelType (const SimFlowEnergyTrans_PerfModelType_type& x);

        void
        SimFlowEnergyTrans_PerfModelType (const SimFlowEnergyTrans_PerfModelType_optional& x);

        void
        SimFlowEnergyTrans_PerfModelType (::std::auto_ptr< SimFlowEnergyTrans_PerfModelType_type > p);

        // SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_type > SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_type, char > SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_traits;

        const SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_optional&
        SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName () const;

        SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_optional&
        SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName ();

        void
        SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName (const SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_type& x);

        void
        SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName (const SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_optional& x);

        void
        SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName (::std::auto_ptr< SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_type > p);

        // SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_type > SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_type, char > SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_traits;

        const SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_optional&
        SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName () const;

        SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_optional&
        SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName ();

        void
        SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName (const SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_type& x);

        void
        SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName (const SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_optional& x);

        void
        SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName (::std::auto_ptr< SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_type > p);

        // SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_type > SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_type, char > SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_traits;

        const SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_optional&
        SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName () const;

        SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_optional&
        SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName ();

        void
        SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName (const SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_type& x);

        void
        SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName (const SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_optional& x);

        void
        SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName (::std::auto_ptr< SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_type > p);

        // SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_type > SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_type, char > SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_traits;

        const SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_optional&
        SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName () const;

        SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_optional&
        SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName ();

        void
        SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName (const SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_type& x);

        void
        SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName (const SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_optional& x);

        void
        SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName (::std::auto_ptr< SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_type > p);

        // SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_type > SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_type, char > SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_traits;

        const SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_optional&
        SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName () const;

        SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_optional&
        SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName ();

        void
        SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName (const SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_type& x);

        void
        SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName (const SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_optional& x);

        void
        SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName (::std::auto_ptr< SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_type > p);

        // SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_type > SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_type, char > SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_traits;

        const SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_optional&
        SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName () const;

        SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_optional&
        SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName ();

        void
        SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName (const SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_type& x);

        void
        SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName (const SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_optional& x);

        void
        SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName (::std::auto_ptr< SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_type > p);

        // SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_type > SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_type, char > SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_traits;

        const SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_optional&
        SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName () const;

        SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_optional&
        SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName ();

        void
        SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName (const SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_type& x);

        void
        SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName (const SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_optional& x);

        void
        SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName (::std::auto_ptr< SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_type > p);

        // SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_type > SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_type, char > SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_traits;

        const SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_optional&
        SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName () const;

        SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_optional&
        SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName ();

        void
        SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName (const SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_type& x);

        void
        SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName (const SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_optional& x);

        void
        SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName (::std::auto_ptr< SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_type > p);

        // SimFlowEnergyTrans_NomRegenTemp
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_NomRegenTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_NomRegenTemp_type > SimFlowEnergyTrans_NomRegenTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_NomRegenTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_NomRegenTemp_traits;

        const SimFlowEnergyTrans_NomRegenTemp_optional&
        SimFlowEnergyTrans_NomRegenTemp () const;

        SimFlowEnergyTrans_NomRegenTemp_optional&
        SimFlowEnergyTrans_NomRegenTemp ();

        void
        SimFlowEnergyTrans_NomRegenTemp (const SimFlowEnergyTrans_NomRegenTemp_type& x);

        void
        SimFlowEnergyTrans_NomRegenTemp (const SimFlowEnergyTrans_NomRegenTemp_optional& x);

        // Constructors.
        //
        SimFlowEnergyTransfer_Dehumidifier_NoFans ();

        SimFlowEnergyTransfer_Dehumidifier_NoFans (const RefId_type&);

        SimFlowEnergyTransfer_Dehumidifier_NoFans (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

        SimFlowEnergyTransfer_Dehumidifier_NoFans (const SimFlowEnergyTransfer_Dehumidifier_NoFans& x,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

        virtual SimFlowEnergyTransfer_Dehumidifier_NoFans*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowEnergyTransfer_Dehumidifier_NoFans&
        operator= (const SimFlowEnergyTransfer_Dehumidifier_NoFans& x);

        virtual 
        ~SimFlowEnergyTransfer_Dehumidifier_NoFans ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowEnergyTrans_CntlType_optional SimFlowEnergyTrans_CntlType_;
        SimFlowEnergyTrans_ProcAirInletNodeName_optional SimFlowEnergyTrans_ProcAirInletNodeName_;
        SimFlowEnergyTrans_ProcAirOutletNodeName_optional SimFlowEnergyTrans_ProcAirOutletNodeName_;
        SimFlowEnergyTrans_RegenAirInletNodeName_optional SimFlowEnergyTrans_RegenAirInletNodeName_;
        SimFlowEnergyTrans_RegenFanInletNodeName_optional SimFlowEnergyTrans_RegenFanInletNodeName_;
        SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_optional SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_;
        SimFlowEnergyTrans_NomProcAirFlowRate_optional SimFlowEnergyTrans_NomProcAirFlowRate_;
        SimFlowEnergyTrans_NomProcAirVelo_optional SimFlowEnergyTrans_NomProcAirVelo_;
        SimFlowEnergyTrans_RotorPwr_optional SimFlowEnergyTrans_RotorPwr_;
        SimFlowEnergyTrans_RegenCoilObjType_optional SimFlowEnergyTrans_RegenCoilObjType_;
        SimFlowEnergyTrans_RegenCoilName_optional SimFlowEnergyTrans_RegenCoilName_;
        SimFlowEnergyTrans_RegenFanObjType_optional SimFlowEnergyTrans_RegenFanObjType_;
        SimFlowEnergyTrans_RegenFanName_optional SimFlowEnergyTrans_RegenFanName_;
        SimFlowEnergyTrans_PerfModelType_optional SimFlowEnergyTrans_PerfModelType_;
        SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_optional SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_;
        SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_optional SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_;
        SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_optional SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_;
        SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_optional SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_;
        SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_optional SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_;
        SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_optional SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_;
        SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_optional SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_;
        SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_optional SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_;
        SimFlowEnergyTrans_NomRegenTemp_optional SimFlowEnergyTrans_NomRegenTemp_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_ENERGY_TRANSFER_DEHUMIDIFIER_NO_FANS_HXX
