// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "RefString.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace DataMap
    {
      // RefString
      // 

      const RefString::RefId_optional& RefString::
      RefId () const
      {
        return this->RefId_;
      }

      RefString::RefId_optional& RefString::
      RefId ()
      {
        return this->RefId_;
      }

      void RefString::
      RefId (const RefId_type& x)
      {
        this->RefId_.set (x);
      }

      void RefString::
      RefId (const RefId_optional& x)
      {
        this->RefId_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace DataMap
    {
      // RefString
      //

      RefString::
      RefString ()
      : ::xml_schema::string (),
        RefId_ (this)
      {
      }

      RefString::
      RefString (const char* _xsd_string_base)
      : ::xml_schema::string (_xsd_string_base),
        RefId_ (this)
      {
      }

      RefString::
      RefString (const ::std::string& _xsd_string_base)
      : ::xml_schema::string (_xsd_string_base),
        RefId_ (this)
      {
      }

      RefString::
      RefString (const ::xml_schema::string& _xsd_string_base)
      : ::xml_schema::string (_xsd_string_base),
        RefId_ (this)
      {
      }

      RefString::
      RefString (const RefString& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
      : ::xml_schema::string (x, f, c),
        RefId_ (x.RefId_, f, this)
      {
      }

      RefString::
      RefString (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
      : ::xml_schema::string (e, f | ::xml_schema::flags::base, c),
        RefId_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, false, false, true);
          this->parse (p, f);
        }
      }

      void RefString::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "RefId" && n.namespace_ ().empty ())
          {
            this->RefId_.set (RefId_traits::create (i, f, this));
            continue;
          }
        }
      }

      RefString* RefString::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class RefString (*this, f, c);
      }

      RefString& RefString::
      operator= (const RefString& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::string& > (*this) = x;
          this->RefId_ = x.RefId_;
        }

        return *this;
      }

      RefString::
      ~RefString ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace DataMap
    {
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace DataMap
    {
      void
      operator<< (::xercesc::DOMElement& e, const RefString& i)
      {
        e << static_cast< const ::xml_schema::string& > (i);

        // RefId
        //
        if (i.RefId ())
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "RefId",
              e));

          a << *i.RefId ();
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

