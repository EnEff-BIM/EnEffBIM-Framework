// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "InputCoefficient.hxx"

#include "refstringlist.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace DataMap
    {
      // InputCoefficient
      // 

      const InputCoefficient::Description_optional& InputCoefficient::
      Description () const
      {
        return this->Description_;
      }

      InputCoefficient::Description_optional& InputCoefficient::
      Description ()
      {
        return this->Description_;
      }

      void InputCoefficient::
      Description (const Description_type& x)
      {
        this->Description_.set (x);
      }

      void InputCoefficient::
      Description (const Description_optional& x)
      {
        this->Description_ = x;
      }

      void InputCoefficient::
      Description (::std::auto_ptr< Description_type > x)
      {
        this->Description_.set (x);
      }

      const InputCoefficient::CoefficientName_type& InputCoefficient::
      CoefficientName () const
      {
        return this->CoefficientName_.get ();
      }

      InputCoefficient::CoefficientName_type& InputCoefficient::
      CoefficientName ()
      {
        return this->CoefficientName_.get ();
      }

      void InputCoefficient::
      CoefficientName (const CoefficientName_type& x)
      {
        this->CoefficientName_.set (x);
      }

      void InputCoefficient::
      CoefficientName (::std::auto_ptr< CoefficientName_type > x)
      {
        this->CoefficientName_.set (x);
      }

      const InputCoefficient::IsReferenced_optional& InputCoefficient::
      IsReferenced () const
      {
        return this->IsReferenced_;
      }

      InputCoefficient::IsReferenced_optional& InputCoefficient::
      IsReferenced ()
      {
        return this->IsReferenced_;
      }

      void InputCoefficient::
      IsReferenced (const IsReferenced_type& x)
      {
        this->IsReferenced_.set (x);
      }

      void InputCoefficient::
      IsReferenced (const IsReferenced_optional& x)
      {
        this->IsReferenced_ = x;
      }

      const InputCoefficient::Value_optional& InputCoefficient::
      Value () const
      {
        return this->Value_;
      }

      InputCoefficient::Value_optional& InputCoefficient::
      Value ()
      {
        return this->Value_;
      }

      void InputCoefficient::
      Value (const Value_type& x)
      {
        this->Value_.set (x);
      }

      void InputCoefficient::
      Value (const Value_optional& x)
      {
        this->Value_ = x;
      }

      const InputCoefficient::RefValue_optional& InputCoefficient::
      RefValue () const
      {
        return this->RefValue_;
      }

      InputCoefficient::RefValue_optional& InputCoefficient::
      RefValue ()
      {
        return this->RefValue_;
      }

      void InputCoefficient::
      RefValue (const RefValue_type& x)
      {
        this->RefValue_.set (x);
      }

      void InputCoefficient::
      RefValue (const RefValue_optional& x)
      {
        this->RefValue_ = x;
      }

      void InputCoefficient::
      RefValue (::std::auto_ptr< RefValue_type > x)
      {
        this->RefValue_.set (x);
      }

      const InputCoefficient::RefId_type& InputCoefficient::
      RefId () const
      {
        return this->RefId_.get ();
      }

      InputCoefficient::RefId_type& InputCoefficient::
      RefId ()
      {
        return this->RefId_.get ();
      }

      void InputCoefficient::
      RefId (const RefId_type& x)
      {
        this->RefId_.set (x);
      }

      void InputCoefficient::
      RefId (::std::auto_ptr< RefId_type > x)
      {
        this->RefId_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace DataMap
    {
      // InputCoefficient
      //

      InputCoefficient::
      InputCoefficient ()
      : ::xml_schema::type (),
        Description_ (this),
        CoefficientName_ (this),
        IsReferenced_ (this),
        Value_ (this),
        RefValue_ (this),
        RefId_ (this)
      {
      }

      InputCoefficient::
      InputCoefficient (const CoefficientName_type& CoefficientName,
                        const RefId_type& RefId)
      : ::xml_schema::type (),
        Description_ (this),
        CoefficientName_ (CoefficientName, this),
        IsReferenced_ (this),
        Value_ (this),
        RefValue_ (this),
        RefId_ (RefId, this)
      {
      }

      InputCoefficient::
      InputCoefficient (const InputCoefficient& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        Description_ (x.Description_, f, this),
        CoefficientName_ (x.CoefficientName_, f, this),
        IsReferenced_ (x.IsReferenced_, f, this),
        Value_ (x.Value_, f, this),
        RefValue_ (x.RefValue_, f, this),
        RefId_ (x.RefId_, f, this)
      {
      }

      InputCoefficient::
      InputCoefficient (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        Description_ (this),
        CoefficientName_ (this),
        IsReferenced_ (this),
        Value_ (this),
        RefValue_ (this),
        RefId_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void InputCoefficient::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Description
          //
          if (n.name () == "Description" && n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
          {
            ::std::auto_ptr< Description_type > r (
              Description_traits::create (i, f, this));

            if (!this->Description_)
            {
              this->Description_.set (r);
              continue;
            }
          }

          // CoefficientName
          //
          if (n.name () == "CoefficientName" && n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
          {
            ::std::auto_ptr< CoefficientName_type > r (
              CoefficientName_traits::create (i, f, this));

            if (!CoefficientName_.present ())
            {
              this->CoefficientName_.set (r);
              continue;
            }
          }

          // IsReferenced
          //
          if (n.name () == "IsReferenced" && n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
          {
            if (!this->IsReferenced_)
            {
              this->IsReferenced_.set (IsReferenced_traits::create (i, f, this));
              continue;
            }
          }

          // Value
          //
          if (n.name () == "Value" && n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
          {
            if (!this->Value_)
            {
              this->Value_.set (Value_traits::create (i, f, this));
              continue;
            }
          }

          // RefValue
          //
          if (n.name () == "RefValue" && n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
          {
            ::std::auto_ptr< RefValue_type > r (
              RefValue_traits::create (i, f, this));

            if (!this->RefValue_)
            {
              this->RefValue_.set (r);
              continue;
            }
          }

          break;
        }

        if (!CoefficientName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "CoefficientName",
            "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
        }

        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "RefId" && n.namespace_ ().empty ())
          {
            this->RefId_.set (RefId_traits::create (i, f, this));
            continue;
          }
        }

        if (!RefId_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "RefId",
            "");
        }
      }

      InputCoefficient* InputCoefficient::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class InputCoefficient (*this, f, c);
      }

      InputCoefficient& InputCoefficient::
      operator= (const InputCoefficient& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::type& > (*this) = x;
          this->Description_ = x.Description_;
          this->CoefficientName_ = x.CoefficientName_;
          this->IsReferenced_ = x.IsReferenced_;
          this->Value_ = x.Value_;
          this->RefValue_ = x.RefValue_;
          this->RefId_ = x.RefId_;
        }

        return *this;
      }

      InputCoefficient::
      ~InputCoefficient ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace DataMap
    {
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace DataMap
    {
      void
      operator<< (::xercesc::DOMElement& e, const InputCoefficient& i)
      {
        e << static_cast< const ::xml_schema::type& > (i);

        // Description
        //
        if (i.Description ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Description",
              "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap",
              e));

          s << *i.Description ();
        }

        // CoefficientName
        //
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "CoefficientName",
              "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap",
              e));

          s << i.CoefficientName ();
        }

        // IsReferenced
        //
        if (i.IsReferenced ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "IsReferenced",
              "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap",
              e));

          s << *i.IsReferenced ();
        }

        // Value
        //
        if (i.Value ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "Value",
              "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap",
              e));

          s << ::xml_schema::as_double(*i.Value ());
        }

        // RefValue
        //
        if (i.RefValue ())
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "RefValue",
              "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap",
              e));

          s << *i.RefValue ();
        }

        // RefId
        //
        {
          ::xercesc::DOMAttr& a (
            ::xsd::cxx::xml::dom::create_attribute (
              "RefId",
              e));

          a << i.RefId ();
        }
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

